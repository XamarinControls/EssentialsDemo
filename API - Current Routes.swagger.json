{
    "swagger": "2.0",
    "info": {
        "title": "API - Current Routes",
        "version": "1.0"
    },
    "host": "navnps5j2apiae.azure-api.net",
    "basePath": "/cebutestv2",
    "schemes": [
        "http",
        "https"
    ],
    "securityDefinitions": {
        "apiKeyHeader": {
            "type": "apiKey",
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header"
        },
        "apiKeyQuery": {
            "type": "apiKey",
            "name": "subscription-key",
            "in": "query"
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ],
    "paths": {
        "/api/nsk/v1/account/password/change": {
            "post": {
                "description": "Changes the accounts password.",
                "operationId": "ApiNskV1AccountPasswordChangePost",
                "summary": "Changes the accounts password.",
                "tags": [
                    "account"
                ],
                "parameters": [
                    {
                        "name": "accountChangePasswordRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AccountChangePasswordRequest"
                        },
                        "description": "The change password request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1AccountPasswordChangePost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/account/password/reset": {
            "post": {
                "description": "Invokes the forgot password reset for a specific account.",
                "operationId": "ApiNskV1AccountPasswordResetPost",
                "summary": "Invokes the forgot password reset for a specific account.",
                "tags": [
                    "account"
                ],
                "parameters": [
                    {
                        "name": "accountForgotPasswordRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AccountForgotPasswordRequest"
                        },
                        "description": "The forgot password request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1AccountPasswordResetPost202TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/addOns/activities": {
            "post": {
                "description": "Sell request for an activity.",
                "operationId": "ApiNskV1AddOnsActivitiesPost",
                "summary": "Sell request for an activity.",
                "tags": [
                    "addOns"
                ],
                "parameters": [
                    {
                        "name": "sellTokenRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SellTokenRequest"
                        },
                        "description": "Items request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "schema": {
                            "$ref": "#/definitions/AddOn"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/addOns/activities/available": {
            "post": {
                "description": "This is functionally a GET but POST is used to reduce URL length overhead.",
                "operationId": "ApiNskV1AddOnsActivitiesAvailablePost",
                "summary": "Gets availability.",
                "tags": [
                    "addOns"
                ],
                "parameters": [
                    {
                        "name": "activitySimpleRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ActivitySimpleRequest"
                        },
                        "description": "Activity simple query."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ActivityProductArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/addOns/activities/quote": {
            "post": {
                "description": "Quote an activity.",
                "operationId": "ApiNskV1AddOnsActivitiesQuotePost",
                "summary": "Quote an activity.",
                "tags": [
                    "addOns"
                ],
                "parameters": [
                    {
                        "name": "quoteTokenRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/QuoteTokenRequest"
                        },
                        "description": "Quote hotel request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/QuotedProduct"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/addOns/cars": {
            "post": {
                "description": "Sell request for a car.",
                "operationId": "ApiNskV1AddOnsCarsPost",
                "summary": "Sell request for a car.",
                "tags": [
                    "addOns"
                ],
                "parameters": [
                    {
                        "name": "sellCarRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SellCarRequest"
                        },
                        "description": "Items request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "schema": {
                            "$ref": "#/definitions/AddOn"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/addOns/cars/available": {
            "post": {
                "description": "This is functionally a GET but POST is used to reduce URL length overhead.",
                "operationId": "ApiNskV1AddOnsCarsAvailablePost",
                "summary": "Gets availability.",
                "tags": [
                    "addOns"
                ],
                "parameters": [
                    {
                        "name": "productRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ProductRequest"
                        },
                        "description": "Activity simple query."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CarProductArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/addOns/cars/quote": {
            "post": {
                "description": "Quote car.",
                "operationId": "ApiNskV1AddOnsCarsQuotePost",
                "summary": "Quote car.",
                "tags": [
                    "addOns"
                ],
                "parameters": [
                    {
                        "name": "quoteCarRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/QuoteCarRequest"
                        },
                        "description": "Quote hotel request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/QuotedProduct"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/addOns/hotels": {
            "post": {
                "description": "Sell request for a hotel.",
                "operationId": "ApiNskV1AddOnsHotelsPost",
                "summary": "Sell request for a hotel.",
                "tags": [
                    "addOns"
                ],
                "parameters": [
                    {
                        "name": "sellHotelRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SellHotelRequest"
                        },
                        "description": "Items request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "schema": {
                            "$ref": "#/definitions/AddOn"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/addOns/hotels/available": {
            "post": {
                "description": "This is functionally a GET but POST is used to reduce URL length overhead.",
                "operationId": "ApiNskV1AddOnsHotelsAvailablePost",
                "summary": "Gets availability.",
                "tags": [
                    "addOns"
                ],
                "parameters": [
                    {
                        "name": "hotelRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/HotelRequest"
                        },
                        "description": "Activity simple query."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HotelProductArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/addOns/hotels/quote": {
            "post": {
                "description": "Quote hotel.",
                "operationId": "ApiNskV1AddOnsHotelsQuotePost",
                "summary": "Quote hotel.",
                "tags": [
                    "addOns"
                ],
                "parameters": [
                    {
                        "name": "quoteHotelRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/QuoteHotelRequest"
                        },
                        "description": "Quote hotel request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/QuotedProduct"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/availability/lowfare": {
            "post": {
                "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.",
                "operationId": "ApiNskV2AvailabilityLowfarePost",
                "summary": "Searches for low fare availability with the full low fare search request. This request allows for total control\r\nover the configuration. If a property is not set, the default settings (LowFareAvailabilitySettings) are used in\r\nits place.",
                "tags": [
                    "availability"
                ],
                "parameters": [
                    {
                        "name": "lowFareAvailabilityRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/LowFareAvailabilityRequest"
                        },
                        "description": "The low fare availability request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Availability returned OK.",
                        "schema": {
                            "$ref": "#/definitions/LowFareAvailability"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2AvailabilityLowfarePost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/availability/lowfare/simple": {
            "post": {
                "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.",
                "operationId": "ApiNskV2AvailabilityLowfareSimplePost",
                "summary": "Searches for low fare availability with the simple search request. The simple search request covers the common search\r\ncriteria and lets default settings (LowFareAvailabilitySettings) configure the rest.",
                "tags": [
                    "availability"
                ],
                "parameters": [
                    {
                        "name": "lowFareAvailabilitySearchSimpleRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/LowFareAvailabilitySearchSimpleRequest"
                        },
                        "description": "The low fare availability search simple request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Availability returned OK.",
                        "schema": {
                            "$ref": "#/definitions/LowFareAvailability"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2AvailabilityLowfareSimplePost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/availability/search": {
            "post": {
                "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.",
                "operationId": "ApiNskV3AvailabilitySearchPost",
                "summary": "Searches for availability with the full availability search request. This request allows for total control over\r\nthe configuration. If a property is not set, the default settings (AvailabilitySettings) are used in its place.",
                "tags": [
                    "availability"
                ],
                "parameters": [
                    {
                        "name": "availabilityRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AvailabilityRequest"
                        },
                        "description": "The availability search request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Availability returned OK.",
                        "schema": {
                            "$ref": "#/definitions/Availability"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3AvailabilitySearchPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/availability/search/simple": {
            "post": {
                "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.",
                "operationId": "ApiNskV3AvailabilitySearchSimplePost",
                "summary": "Searches for availability with the simple search request. The simple search request covers the common search\r\ncriteria and lets default settings (AvailabilitySettings) configure the rest.",
                "tags": [
                    "availability"
                ],
                "parameters": [
                    {
                        "name": "availabilitySimpleRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AvailabilitySimpleRequest"
                        },
                        "description": "The availability search simple request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Availability returned OK.",
                        "schema": {
                            "$ref": "#/definitions/Availability"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3AvailabilitySearchSimplePost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking": {
            "get": {
                "description": "ApiNskV1BookingGet",
                "operationId": "ApiNskV1BookingGet",
                "summary": "ApiNskV1BookingGet",
                "tags": [
                    "/nsk/v1/booking"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "ApiNskV1BookingPut",
                "operationId": "ApiNskV1BookingPut",
                "summary": "ApiNskV1BookingPut",
                "tags": [
                    "/nsk/v1/booking"
                ],
                "parameters": [
                    {
                        "name": "commitRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CommitRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "ApiNskV1BookingPost",
                "operationId": "ApiNskV1BookingPost",
                "summary": "ApiNskV1BookingPost",
                "tags": [
                    "/nsk/v1/booking"
                ],
                "parameters": [
                    {
                        "name": "commitRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CommitRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking": {
            "put": {
                "description": "Commits stateful changes made and processes the booking.",
                "operationId": "ApiNskV3BookingPut",
                "summary": "Commits stateful changes made and processes the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "commitRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CommitRequestv2"
                        },
                        "description": "Commit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPut200TextPlainResponse"
                        }
                    },
                    "201": {
                        "description": "Committed successfully."
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Commits stateful changes made and processes the booking.",
                "operationId": "ApiNskV3BookingPost",
                "summary": "Commits stateful changes made and processes the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "commitRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CommitRequestv2"
                        },
                        "description": "Commit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Committed successfully.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/account": {
            "get": {
                "description": "Retrieves the account and collections for the booking in state.",
                "operationId": "ApiNskV1BookingAccountGet",
                "summary": "Retrieves the account and collections for the booking in state.",
                "tags": [
                    "booking"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAccountGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/account/collection/{accountCollectionKey}/transactions": {
            "get": {
                "description": "Retrieves the account collection transactions for the booking in state.",
                "operationId": "ApiNskV1BookingAccountCollectionByAccountCollectionKeyTransactionsGet",
                "summary": "Retrieves the account collection transactions for the booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "accountCollectionKey",
                        "in": "path",
                        "description": "The account collection key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAccountCollection{accountCollectionKey}TransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/account/transactions": {
            "get": {
                "description": "Retrieves all of the transactions for all of the collections for the booking in state.",
                "operationId": "ApiNskV1BookingAccountTransactionsGet",
                "summary": "Retrieves all of the transactions for all of the collections for the booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAccountTransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addons": {
            "get": {
                "description": "Gets all the add-ons on the booking in state.",
                "operationId": "ApiNskV1BookingAddonsGet",
                "summary": "Gets all the add-ons on the booking in state.",
                "tags": [
                    "booking"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddonsGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddonsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addons/{addOnKey}": {
            "get": {
                "description": "Gets a specific add-on from the booking in state.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyGet",
                "summary": "Gets a specific add-on from the booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AddOn"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific add-on on the booking in state.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyDelete",
                "summary": "Deletes a specific add-on on the booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addons/{addOnKey}/customer": {
            "put": {
                "description": "Updates an order customer for a specific add-on on the booking.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyCustomerPut",
                "summary": "Updates an order customer for a specific add-on on the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "consumer",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Consumer"
                        },
                        "description": "The customer to update."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}CustomerPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}CustomerPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Updates an order customer for a specific add-on on the booking.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyCustomerPatch",
                "summary": "Updates an order customer for a specific add-on on the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[Consumer]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[Consumer]"
                        },
                        "description": "The customer to update."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}CustomerPatch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}CustomerPatch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addons/{addOnKey}/participants/{participantKey}": {
            "put": {
                "description": "Updates a single participant for a specific add-on on the booking.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPut",
                "summary": "Updates a single participant for a specific add-on on the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "participantKey",
                        "in": "path",
                        "description": "The unique participant key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orderParticipantUpdateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/OrderParticipantUpdateRequest"
                        },
                        "description": "The participant to update."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Updates a single participant for a specific add-on on the booking.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyParticipantsByParticipantKeyPatch",
                "summary": "Updates a single participant for a specific add-on on the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "participantKey",
                        "in": "path",
                        "description": "The unique participant key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[OrderParticipantUpdateRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[OrderParticipantUpdateRequest]"
                        },
                        "description": "The participant to update."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addons/{addOnKey}/payments": {
            "get": {
                "description": "If the add on's payment required flag is set to true, this endpoint\r\nwill return the allowed payment options for the add on.  If set to\r\nfalse, null will be returned.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyPaymentsGet",
                "summary": "Gets a specific add-on's allowed payment methods.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AddOnAllowedPayments"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}PaymentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Adds a payment to a specific add-on on the booking.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyPaymentsPost",
                "summary": "Adds a payment to a specific add-on on the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orderPaymentBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/OrderPaymentBase"
                        },
                        "description": "The order payment to be added."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}PaymentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addons/{addOnKey}/pre/cancel": {
            "get": {
                "description": "Pre cancels a specific add-on on the booking in state.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyPreCancelGet",
                "summary": "Pre cancels a specific add-on on the booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PreCancelDetail"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}PreCancelGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addons/{addOnKey}/sync": {
            "put": {
                "description": "Syncs the specific add-on on the booking.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeySyncPut",
                "summary": "Syncs the specific add-on on the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}SyncPut200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addons/{addOnKey}/validation": {
            "get": {
                "description": "Retrieves the field validation for a specific add-on on the booking.",
                "operationId": "ApiNskV1BookingAddonsByAddOnKeyValidationGet",
                "summary": "Retrieves the field validation for a specific add-on on the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "addOnKey",
                        "in": "path",
                        "description": "The unique add on key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AddOnSettings"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddons{addOnKey}ValidationGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addOns/activities": {
            "get": {
                "description": "Gets default availability using details from the booking in state.\r\nRequires a valid booking in state.",
                "operationId": "ApiNskV1BookingAddOnsActivitiesGet",
                "summary": "Gets default availability using details from the booking in state.\r\nRequires a valid booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "VendorCode",
                        "in": "query",
                        "description": "The specific vendor code.",
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ActivityProductArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addOns/cars": {
            "get": {
                "description": "Gets default availability using details from the booking in state.\r\nRequires a valid booking in state.",
                "operationId": "ApiNskV1BookingAddOnsCarsGet",
                "summary": "Gets default availability using details from the booking in state.\r\nRequires a valid booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "VendorCode",
                        "in": "query",
                        "description": "The specific vendor code.",
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CarProductArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addOns/hotels": {
            "get": {
                "description": "Gets default availability using details from the booking in state.\r\nRequires a valid booking in state.",
                "operationId": "ApiNskV1BookingAddOnsHotelsGet",
                "summary": "Gets default availability using details from the booking in state.\r\nRequires a valid booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "VendorCode",
                        "in": "query",
                        "description": "The specific vendor code.",
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HotelProductArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addOns/insurance": {
            "get": {
                "description": "Gets default availability using details from the booking in state.\r\nRequires a valid booking in state.",
                "operationId": "ApiNskV1BookingAddOnsInsuranceGet",
                "summary": "Gets default availability using details from the booking in state.\r\nRequires a valid booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "VendorCode",
                        "in": "query",
                        "description": "The specific vendor code.",
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/InsuranceProductArray"
                        }
                    },
                    "404": {
                        "description": "Not found."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Sells new insurance items.",
                "operationId": "ApiNskV1BookingAddOnsInsurancePost",
                "summary": "Sells new insurance items.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "sellInsuranceRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SellInsuranceRequest"
                        },
                        "description": "Quote request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/IActionResult"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/addons/payments": {
            "get": {
                "description": "Gets all the available add-ons allowed payment methods for all the add-ons on the booking in state.",
                "operationId": "ApiNskV1BookingAddonsPaymentsGet",
                "summary": "Gets all the available add-ons allowed payment methods for all the add-ons on the booking in state.",
                "tags": [
                    "booking"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddonsPaymentsGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingAddonsPaymentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/boardingpasses/journey/{journeyKey}": {
            "post": {
                "description": "Retrieves the version of the boarding passes based on a specific journey.",
                "operationId": "ApiNskV3BookingBoardingpassesJourneyByJourneyKeyPost",
                "summary": "Retrieves the version of the boarding passes based on a specific journey.",
                "tags": [
                    "booking/boardingpasses"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey to retrieve boarding passes for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "boardingPassFilterRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BoardingPassFilterRequest"
                        },
                        "description": "The passenger/segment filter request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BoardingPassesCollectionv2"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingBoardingpassesJourney{journeyKey}Post404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/boardingpasses/segment/{segmentKey}": {
            "post": {
                "description": "Retrieves the version of the boarding passes based on a specific segment.",
                "operationId": "ApiNskV3BookingBoardingpassesSegmentBySegmentKeyPost",
                "summary": "Retrieves the version of the boarding passes based on a specific segment.",
                "tags": [
                    "booking/boardingpasses"
                ],
                "parameters": [
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment to retrieve boarding passes for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "boardingPassPassengerFilterRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BoardingPassPassengerFilterRequest"
                        },
                        "description": "The passenger filter request"
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BoardingPassesCollectionv2"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingBoardingpassesSegment{segmentKey}Post404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/bundle/availability": {
            "post": {
                "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.",
                "operationId": "ApiNskV1BookingBundleAvailabilityPost",
                "summary": "Retrieves the bundle and ssr availability for the booking in-state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "bundleAvailabilityRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BundleAvailabilityRequest"
                        },
                        "description": "The bundle availability request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleAvailabilityArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingBundleAvailabilityPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/checkin/journey/{journeyKey}": {
            "delete": {
                "description": "Removes the checkin status of passengers for a specific journey in state.",
                "operationId": "ApiNskV1BookingCheckinJourneyByJourneyKeyDelete",
                "summary": "Removes the checkin status of passengers for a specific journey in state.",
                "tags": [
                    "booking/checkin"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "checkinPassengersRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CheckinPassengersRequest"
                        },
                        "description": "The checkin passengers request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingCheckinJourney{journeyKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/checkin/journey/{journeyKey}/requirements": {
            "get": {
                "description": "Gets the checkin pre-validation requirements for a specific journey.",
                "operationId": "ApiNskV1BookingCheckinJourneyByJourneyKeyRequirementsGet",
                "summary": "Gets the checkin pre-validation requirements for a specific journey.",
                "tags": [
                    "booking/checkin"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key to be pre validate checkin with.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CheckinRequirements"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingCheckinJourney{journeyKey}RequirementsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/checkin/journey/{journeyKey}/status": {
            "get": {
                "description": "Gets the passengers lift status for a specific journey based on the booking in state.",
                "operationId": "ApiNskV1BookingCheckinJourneyByJourneyKeyStatusGet",
                "summary": "Gets the passengers lift status for a specific journey based on the booking in state.",
                "tags": [
                    "booking/checkin"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey to check lift statuses.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CheckinPassengerLiftStatusArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingCheckinJourney{journeyKey}StatusGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/checkin/segment/{segmentKey}": {
            "delete": {
                "description": "Removes the checkin status of passengers for a specific journey's segment in state.",
                "operationId": "ApiNskV1BookingCheckinSegmentBySegmentKeyDelete",
                "summary": "Removes the checkin status of passengers for a specific journey's segment in state.",
                "tags": [
                    "booking/checkin"
                ],
                "parameters": [
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "checkinPassengersRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CheckinPassengersRequest"
                        },
                        "description": "The checkin passengers request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingCheckinSegment{segmentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/checkin/segment/{segmentKey}/requirements": {
            "get": {
                "description": "Gets the checkin pre-validation requirements for a specific journey's segment.",
                "operationId": "ApiNskV1BookingCheckinSegmentBySegmentKeyRequirementsGet",
                "summary": "Gets the checkin pre-validation requirements for a specific journey's segment.",
                "tags": [
                    "booking/checkin"
                ],
                "parameters": [
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment key to pre validate checkin with.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CheckinRequirements"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingCheckinSegment{segmentKey}RequirementsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/checkin/segment/{segmentKey}/status": {
            "get": {
                "description": "Gets the passenger lift status for a specific segment based on the booking in state.",
                "operationId": "ApiNskV1BookingCheckinSegmentBySegmentKeyStatusGet",
                "summary": "Gets the passenger lift status for a specific segment based on the booking in state.",
                "tags": [
                    "booking/checkin"
                ],
                "parameters": [
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment key in reference.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingCheckinSegment{segmentKey}StatusGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingCheckinSegment{segmentKey}StatusGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/comments": {
            "get": {
                "description": "Gets the list of comments on the in-state booking.",
                "operationId": "ApiNskV1BookingCommentsGet",
                "summary": "Gets the list of comments on the in-state booking.",
                "tags": [
                    "booking"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BookingCommentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingCommentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Adds comments to the booking.",
                "operationId": "ApiNskV1BookingCommentsPost",
                "summary": "Adds comments to the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "bookingCommentsRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingCommentsRequest"
                        },
                        "description": "The booking comments request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingCommentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/comments/{commentKey}": {
            "delete": {
                "description": "Deletes a comment from the booking.",
                "operationId": "ApiNskV2BookingCommentsByCommentKeyDelete",
                "summary": "Deletes a comment from the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "commentKey",
                        "in": "path",
                        "description": "The booking comment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingComments{commentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/contacts": {
            "get": {
                "description": "Gets all the contacts on the booking.",
                "operationId": "ApiNskV1BookingContactsGet",
                "summary": "Gets all the contacts on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new contact on the booking.",
                "operationId": "ApiNskV1BookingContactsPost",
                "summary": "Creates a new contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contact",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        },
                        "description": "The new contact."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/contacts/{contactTypeCode}": {
            "get": {
                "description": "Gets a specific contact on the booking.",
                "operationId": "ApiNskV1BookingContactsByContactTypeCodeGet",
                "summary": "Gets a specific contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique contact type code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific contact on the booking.",
                "operationId": "ApiNskV1BookingContactsByContactTypeCodePut",
                "summary": "Updates a specific contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contactRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ContactRequest"
                        },
                        "description": "The modified contact."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific contact on the booking.",
                "operationId": "ApiNskV1BookingContactsByContactTypeCodeDelete",
                "summary": "Deletes a specific contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique type code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific contact on the booking.",
                "operationId": "ApiNskV1BookingContactsByContactTypeCodePatch",
                "summary": "Patches a specific contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[ContactBase]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[ContactBase]"
                        },
                        "description": "The patched contact request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/contacts/{contactTypeCode}/phoneNumbers": {
            "get": {
                "description": "Gets the collection of phone number for a specific contact on the booking.",
                "operationId": "ApiNskV1BookingContactsByContactTypeCodePhoneNumbersGet",
                "summary": "Gets the collection of phone number for a specific contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique contact type code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PhoneNumberArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}PhoneNumbersGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new phone number on a specific contact on the booking.",
                "operationId": "ApiNskV1BookingContactsByContactTypeCodePhoneNumbersPost",
                "summary": "Creates a new phone number on a specific contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique contact type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumber",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PhoneNumber"
                        },
                        "description": "The new phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}PhoneNumbersPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/contacts/{contactTypeCode}/phoneNumbers/{phoneNumberType}": {
            "get": {
                "description": "Gets the specific phone number from a specific contact on the booking.",
                "operationId": "ApiNskV1BookingContactsByContactTypeCodePhoneNumbersByPhoneNumberTypeGet",
                "summary": "Gets the specific phone number from a specific contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique contact type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumberType",
                        "in": "path",
                        "description": "The phone number type.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Other",
                            "Home",
                            "Work",
                            "Mobile",
                            "Fax"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PhoneNumber"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific phone number on a specific contact on the booking.",
                "operationId": "ApiNskV1BookingContactsByContactTypeCodePhoneNumbersByPhoneNumberTypePut",
                "summary": "Updates a specific phone number on a specific contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique contact type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumberType",
                        "in": "path",
                        "description": "The phone number type.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Other",
                            "Home",
                            "Work",
                            "Mobile",
                            "Fax"
                        ]
                    },
                    {
                        "name": "phoneNumberBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PhoneNumberBase"
                        },
                        "description": "The modified phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific phone number on a specific contact on the booking.",
                "operationId": "ApiNskV1BookingContactsByContactTypeCodePhoneNumbersByPhoneNumberTypeDelete",
                "summary": "Deletes a specific phone number on a specific contact on the booking.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique contact type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumberType",
                        "in": "path",
                        "description": "The phone number type.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Other",
                            "Home",
                            "Work",
                            "Mobile",
                            "Fax"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/contacts/primary": {
            "get": {
                "description": "Gets the primary contact based on configuration.",
                "operationId": "ApiNskV1BookingContactsPrimaryGet",
                "summary": "Gets the primary contact based on configuration.",
                "tags": [
                    "booking/contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsPrimaryGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates the primary contact.",
                "operationId": "ApiNskV1BookingContactsPrimaryPut",
                "summary": "Updates the primary contact.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ContactRequest"
                        },
                        "description": "The modified contact request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsPrimaryPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsPrimaryPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new primary contact based on configuration.",
                "operationId": "ApiNskV1BookingContactsPrimaryPost",
                "summary": "Creates a new primary contact based on configuration.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "contactRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ContactRequest"
                        },
                        "description": "The new contact."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsPrimaryPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Delets the primary contact.",
                "operationId": "ApiNskV1BookingContactsPrimaryDelete",
                "summary": "Delets the primary contact.",
                "tags": [
                    "booking/contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsPrimaryDelete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches the primary contact.",
                "operationId": "ApiNskV1BookingContactsPrimaryPatch",
                "summary": "Patches the primary contact.",
                "tags": [
                    "booking/contacts"
                ],
                "parameters": [
                    {
                        "name": "deltaMapper[ContactBase]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[ContactBase]"
                        },
                        "description": "The patched contact request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsPrimaryPatch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingContactsPrimaryPatch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/fareRules": {
            "get": {
                "description": "Retrieves the collection of all fare rules from the current booking in state.",
                "operationId": "ApiNskV1BookingFareRulesGet",
                "summary": "Retrieves the collection of all fare rules from the current booking in state.",
                "tags": [
                    "booking"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FareRuleArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingFareRulesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/fareRules/fare/{fareKey}": {
            "get": {
                "description": "Retrieves a fare rule from the current booking in state based on\r\nthe specific fare key.",
                "operationId": "ApiNskV1BookingFareRulesFareByFareKeyGet",
                "summary": "Retrieves a fare rule from the current booking in state based on\r\nthe specific fare key.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "fareKey",
                        "in": "path",
                        "description": "The unique fare key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FareRule"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingFareRulesFare{fareKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/fareRules/journey/{journeyKey}": {
            "get": {
                "description": "Retrieves the collection of all fare rules from the current booking in state\r\nfor the specific journey key.",
                "operationId": "ApiNskV1BookingFareRulesJourneyByJourneyKeyGet",
                "summary": "Retrieves the collection of all fare rules from the current booking in state\r\nfor the specific journey key.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The unique journey key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FareRuleArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingFareRulesJourney{journeyKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/fareRules/segment/{segmentKey}": {
            "get": {
                "description": "Retrieves the collection of all fare rules from the current booking in state for the specific segment key.",
                "operationId": "ApiNskV1BookingFareRulesSegmentBySegmentKeyGet",
                "summary": "Retrieves the collection of all fare rules from the current booking in state for the specific segment key.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The unique segment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FareRuleArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingFareRulesSegment{segmentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/fee": {
            "get": {
                "description": "Only service and penalty fee types support a price that is configured by the booking in state.\r\nDepending on the configuration, the passenger key will be needed.\r\nFor other fee types the price amount is manually provided.",
                "operationId": "ApiNskV1BookingFeeGet",
                "summary": "Gets the fee price.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "FeeCode",
                        "in": "query",
                        "description": "The fee code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "PassengerKey",
                        "in": "query",
                        "description": "The passenger key.",
                        "type": "string"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "The origin station code.",
                        "type": "string"
                    },
                    {
                        "name": "CollectedCurrencyCode",
                        "in": "query",
                        "description": "The collected currency code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ServiceChargeArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingFeeGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Penalty fees, spoilage fees, and service fees can be created manually. Other types are automatically created by\r\nthe system.\r\nDepending on the configuration, the passenger key will be needed.",
                "operationId": "ApiNskV1BookingFeePost",
                "summary": "Manually adds a new fee.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "commitPassengerFeeRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CommitPassengerFeeRequest"
                        },
                        "description": "The fee request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingFeePost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/fee/{feeKey}": {
            "put": {
                "description": "Overrides a fee amount.",
                "operationId": "ApiNskV1BookingFeeByFeeKeyPut",
                "summary": "Overrides a fee amount.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "feeKey",
                        "in": "path",
                        "description": "The fee key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "feeRequestBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/FeeRequestBase"
                        },
                        "description": "The fee request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingFee{feeKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingFee{feeKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a fee.",
                "operationId": "ApiNskV1BookingFeeByFeeKeyDelete",
                "summary": "Deletes a fee.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "feeKey",
                        "in": "path",
                        "description": "The fee key request.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingFee{feeKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/history": {
            "get": {
                "description": "Gets the current booking history in state.",
                "operationId": "ApiNskV1BookingHistoryGet",
                "summary": "Gets the current booking history in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "Event",
                        "in": "query",
                        "description": "The event that triggered the history entry.",
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "ConvertedHistory",
                            "FlightTimeChange",
                            "FlightDesignatorChange",
                            "AssignedSeat",
                            "RemoveSeat",
                            "AddedFlight",
                            "DeletedFlight",
                            "DeletedPassenger",
                            "NameChange",
                            "GroupNameChange",
                            "CancelledTicketing",
                            "ScheduleChange",
                            "AddedPayment",
                            "ServiceFee",
                            "QueuedPnr",
                            "UnqueuedPnr",
                            "DeletedComment",
                            "Divided",
                            "CheckedIn",
                            "CheckedOut",
                            "FareOverride",
                            "AddedBaggage",
                            "ChangedBaggageWeight",
                            "CheckedBaggage",
                            "RemovedBaggage",
                            "BoardedPassenger",
                            "UnboardedPassenger",
                            "ManualAuthorization",
                            "ManualDecline",
                            "UndoCancel",
                            "ItinerarySent",
                            "ContactChange",
                            "SsrAdded",
                            "FlightMoved",
                            "VerifiedDocument",
                            "RemovedVerifiedDocument",
                            "Promotion",
                            "BookingComment",
                            "CancelledSchedule",
                            "CancelServiceFee",
                            "OverrideServiceFee",
                            "AddedRecordLocator",
                            "DeletedRecordLocator",
                            "UpgradeClassOfService",
                            "DowngradeClassOfService",
                            "StandbyPriorityChange",
                            "AssignedTicketNumber",
                            "DeletedTicketNumber",
                            "ConfirmSegmentStatusCodeChange",
                            "CodeshareFlightChanged",
                            "PdsCancel",
                            "PdsPending",
                            "PdsConfirm",
                            "PdsFinalized",
                            "PdsDeclined",
                            "PdsException",
                            "PdsCancelRefused",
                            "PdsCancelUnsuccessful",
                            "Apps",
                            "InhibitedOverride",
                            "PrintedBagTag",
                            "SelfPrintedBagTag",
                            "PrintedBoardingPass",
                            "AddCustomerId",
                            "DeleteCustomerId",
                            "HoldCreated",
                            "HoldRemoved",
                            "HoldChanged",
                            "OverrideCoupon",
                            "PdsSynchronized",
                            "PdsItemremoved",
                            "Reprice"
                        ]
                    },
                    {
                        "name": "LastPageKey",
                        "in": "query",
                        "description": "The key of the last booking history item returned.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The page size for the response.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingHistoryGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/history/flightMove": {
            "get": {
                "description": "Gets the current flight move history in state.",
                "operationId": "ApiNskV1BookingHistoryFlightMoveGet",
                "summary": "Gets the current flight move history in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "LastPageKey",
                        "in": "query",
                        "description": "The key of the last booking history item returned.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The page size for the response.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FlightMoveHistoryResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingHistoryFlightMoveGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/history/seatAssignment": {
            "get": {
                "description": "Gets the current seat assignment history in state.",
                "operationId": "ApiNskV1BookingHistorySeatAssignmentGet",
                "summary": "Gets the current seat assignment history in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "Event",
                        "in": "query",
                        "description": "The event that triggered the seat assignment history entry.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "AssignedSeat",
                            "RemoveSeat"
                        ]
                    },
                    {
                        "name": "LastPageKey",
                        "in": "query",
                        "description": "The key of the last booking history item returned.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The page size for the response.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SeatAssignmentHistoryResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingHistorySeatAssignmentGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/history/segmentChange": {
            "get": {
                "description": "Gets the current segment change history in state.",
                "operationId": "ApiNskV1BookingHistorySegmentChangeGet",
                "summary": "Gets the current segment change history in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "Event",
                        "in": "query",
                        "description": "The event that triggered the seat assignment history entry.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "AddedFlight",
                            "DeletedFlight"
                        ]
                    },
                    {
                        "name": "LastPageKey",
                        "in": "query",
                        "description": "The key of the last booking history item returned.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The page size for the response.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SegmentChangeHistoryResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingHistorySegmentChangeGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/hold/available": {
            "get": {
                "description": "Retrieves the recommended hold date if hold is available.",
                "operationId": "ApiNskV2BookingHoldAvailableGet",
                "summary": "Retrieves the recommended hold date if hold is available.",
                "tags": [
                    "booking"
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingHoldAvailableGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingHoldAvailableGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/journeys": {
            "get": {
                "description": "Gets the collection of journeys on the booking in state.",
                "operationId": "ApiNskV1BookingJourneysGet",
                "summary": "Gets the collection of journeys on the booking in state.",
                "tags": [
                    "booking/journeys"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/JourneyArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingJourneysGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Cancels all the journeys on the current booking in state.",
                "operationId": "ApiNskV1BookingJourneysDelete",
                "summary": "Cancels all the journeys on the current booking in state.",
                "tags": [
                    "booking/journeys"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingJourneysDelete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/journeys/{journeyKey}": {
            "get": {
                "description": "Gets a single journey by the key.",
                "operationId": "ApiNskV1BookingJourneysByJourneyKeyGet",
                "summary": "Gets a single journey by the key.",
                "tags": [
                    "booking/journeys"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/Journey"
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingJourneys{journeyKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Cancels the specific journey from the booking in state.",
                "operationId": "ApiNskV1BookingJourneysByJourneyKeyDelete",
                "summary": "Cancels the specific journey from the booking in state.",
                "tags": [
                    "booking/journeys"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key to be canceled.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cancelJourneyRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CancelJourneyRequest"
                        },
                        "description": "The cancel journey request options."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingJourneys{journeyKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/journeys/{journeyKey}/bundles": {
            "post": {
                "description": "Sells a service bundle for one or more passengers on a journey.",
                "operationId": "ApiNskV1BookingJourneysByJourneyKeyBundlesPost",
                "summary": "Sells a service bundle for one or more passengers on a journey.",
                "tags": [
                    "booking/journeys"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bundleSellRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BundleSellRequest"
                        },
                        "description": "The bundle sell request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingJourneys{journeyKey}BundlesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/journeys/{journeyKey}/passengers/{passengerKey}/baggage": {
            "get": {
                "description": "Gets all baggage for a passenger on a specific journey.",
                "operationId": "ApiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageGet",
                "summary": "Gets all baggage for a passenger on a specific journey.",
                "tags": [
                    "booking/journeys"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key for the journey to retrieve from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The passenger key for the passenger to retrieve from.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "schema": {
                            "$ref": "#/definitions/PassengerBagArray"
                        }
                    },
                    "404": {
                        "description": "Baggage was not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}BaggageGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Adds baggage to the booking.",
                "operationId": "ApiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggagePost",
                "summary": "Adds baggage to the booking.",
                "tags": [
                    "booking/journeys"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The unique identifier for the journey to remove from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The specific passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerBagRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PassengerBagRequest"
                        },
                        "description": "A request to add bags to the given passenger."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}BaggagePost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/journeys/{journeyKey}/passengers/{passengerKey}/baggage/{baggageKey}": {
            "get": {
                "description": "Gets a single bag from a passenger on a journey.",
                "operationId": "ApiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageK",
                "summary": "Gets a single bag from a passenger on a journey.",
                "tags": [
                    "booking/journeys"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key for the journey to retrieve from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The passenger key for the passenger to retrieve from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "baggageKey",
                        "in": "path",
                        "description": "The bag key for the bag to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "schema": {
                            "$ref": "#/definitions/PassengerBagArray"
                        }
                    },
                    "404": {
                        "description": "Bag was not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}Baggage{baggageKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Removes baggage from the booking.",
                "operationId": "ApiNskV1BookingJourneysByJourneyKeyPassengersByPassengerKeyBaggageByBaggageK-1",
                "summary": "Removes baggage from the booking.",
                "tags": [
                    "booking/journeys"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The unique identifier for the journey to remove from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The specific passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "baggageKey",
                        "in": "path",
                        "description": "Unique identifier for the bag to remove.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}Baggage{baggageKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers": {
            "get": {
                "description": "Gets the collection of passengers on the booking.",
                "operationId": "ApiNskV1BookingPassengersGet",
                "summary": "Gets the collection of passengers on the booking.",
                "tags": [
                    "booking/passengers"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengersGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengersGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}": {
            "get": {
                "description": "Gets a specific passenger on the booking.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyGet",
                "summary": "Gets a specific passenger on the booking.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Passenger"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/passengers/{passengerKey}": {
            "put": {
                "description": "Updates a specific passenger on the booking.",
                "operationId": "ApiNskV3BookingPassengersByPassengerKeyPut",
                "summary": "Updates a specific passenger on the booking.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "waiveNameChangeFees",
                        "in": "query",
                        "description": "Waive the name change fees.",
                        "type": "boolean"
                    },
                    {
                        "name": "passengerBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PassengerBase"
                        },
                        "description": "The modified passenger request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPassengers{passengerKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPassengers{passengerKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific passenger on the booking.",
                "operationId": "ApiNskV3BookingPassengersByPassengerKeyPatch",
                "summary": "Patches a specific passenger on the booking.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "waiveNameChangeFees",
                        "in": "query",
                        "description": "Waive the name change fee.",
                        "type": "boolean"
                    },
                    {
                        "name": "deltaMapper[PassengerBase]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PassengerBase]"
                        },
                        "description": "The patched passenger request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPassengers{passengerKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPassengers{passengerKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/addresses": {
            "get": {
                "description": "Gets the collection of addresses from a specific passenger.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyAddressesGet",
                "summary": "Gets the collection of addresses from a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerAddressArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}AddressesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/passengers/{passengerKey}/addresses": {
            "post": {
                "description": "Creates a new address for a specific passenger.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyAddressesPost",
                "summary": "Creates a new address for a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerAddressCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PassengerAddressCreateRequest"
                        },
                        "description": "The new address request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}AddressesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/addresses/{addressKey}": {
            "get": {
                "description": "Gets a specific address from a specific passenger.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyAddressesByAddressKeyGet",
                "summary": "Gets a specific address from a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "addressKey",
                        "in": "path",
                        "description": "The unique address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerAddress"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}Addresses{addressKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/passengers/{passengerKey}/addresses/{addressKey}": {
            "put": {
                "description": "Updates a specific address on a specific passenger.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPut",
                "summary": "Updates a specific address on a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "addressKey",
                        "in": "path",
                        "description": "The unique addres key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerAddressEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PassengerAddressEditRequest"
                        },
                        "description": "The modified address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific address on a specific passenger.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyDelete",
                "summary": "Deletes a specific address on a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "addressKey",
                        "in": "path",
                        "description": "The unique addres key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific address on a specific passenger.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyAddressesByAddressKeyPatch",
                "summary": "Patches a specific address on a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "addressKey",
                        "in": "path",
                        "description": "The unique addres key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PassengerAddressEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PassengerAddressEditRequest]"
                        },
                        "description": "The patched address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/baggage": {
            "get": {
                "description": "Gets all the baggage for a specified passenger.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyBaggageGet",
                "summary": "Gets all the baggage for a specified passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique identifier for the passenger to get baggage for.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerBagArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}BaggageGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/baggage/{baggageKey}": {
            "get": {
                "description": "Retrieve a single bag from a specific passenger.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyBaggageByBaggageKeyGet",
                "summary": "Retrieve a single bag from a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The passenger key for the passenger to retrieve from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "baggageKey",
                        "in": "path",
                        "description": "The bag key for the bag to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "schema": {
                            "$ref": "#/definitions/PassengerBag"
                        }
                    },
                    "404": {
                        "description": "Bag was not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}Baggage{baggageKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/breakdown": {
            "get": {
                "description": "Gets a specific passenger price breakdown by passenger key.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyBreakdownGet",
                "summary": "Gets a specific passenger price breakdown by passenger key.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The specific passenger key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerPriceBreakdown"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}BreakdownGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/documents": {
            "get": {
                "description": "Gets a specific passenger's collection of travel documents.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyDocumentsGet",
                "summary": "Gets a specific passenger's collection of travel documents.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerTravelDocumentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}DocumentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/passengers/{passengerKey}/documents": {
            "post": {
                "description": "Create a new travel document for a specific passenger.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyDocumentsPost",
                "summary": "Create a new travel document for a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TravelDocumentCreateRequest"
                        },
                        "description": "The new travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}DocumentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/documents/{travelDocumentKey}": {
            "get": {
                "description": "Gets a specific passenger's specific travel document.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyGet",
                "summary": "Gets a specific passenger's specific travel document.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentKey",
                        "in": "path",
                        "description": "The unique travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerTravelDocument"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}Documents{travelDocumentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/passengers/{passengerKey}/documents/{travelDocumentKey}": {
            "put": {
                "description": "Updates a specific passenger's travel document.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPut",
                "summary": "Updates a specific passenger's travel document.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentKey",
                        "in": "path",
                        "description": "The unique travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TravelDocumentEditRequest"
                        },
                        "description": "The modified travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific passenger's specific travel document.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyDelete",
                "summary": "Deletes a specific passenger's specific travel document.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentKey",
                        "in": "path",
                        "description": "The unique travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific passenger's travel document.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyDocumentsByTravelDocumentKeyPatch",
                "summary": "Patches a specific passenger's travel document.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentKey",
                        "in": "path",
                        "description": "The unique travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[TravelDocumentEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[TravelDocumentEditRequest]"
                        },
                        "description": "The patched travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/infant": {
            "get": {
                "description": "Gets a specific passenger's infant.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyInfantGet",
                "summary": "Gets a specific passenger's infant.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerInfant"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}InfantGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/passengers/{passengerKey}/infant": {
            "delete": {
                "description": "Deletes a infant from a specific passenger.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyInfantDelete",
                "summary": "Deletes a infant from a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantDelete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a infant on a specific passenger.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyInfantPatch",
                "summary": "Patches a infant on a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[Infant]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[Infant]"
                        },
                        "description": "The patched infant."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantPatch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantPatch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "ApiNskV2BookingPassengersByPassengerKeyInfantPut",
                "operationId": "apinskv2bookingpassengersbypassengerkeyinfantput",
                "summary": "ApiNskV2BookingPassengersByPassengerKeyInfantPut",
                "tags": [
                    "/nsk/v2/booking"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerInfant",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PassengerInfant"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "ApiNskV2BookingPassengersByPassengerKeyInfantPost",
                "operationId": "apinskv2bookingpassengersbypassengerkeyinfantpost",
                "summary": "ApiNskV2BookingPassengersByPassengerKeyInfantPost",
                "tags": [
                    "/nsk/v2/booking"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerInfant",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PassengerInfant"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/passengers/{passengerKey}/infant": {
            "put": {
                "description": "Updates an infant on a specific passenger.",
                "operationId": "ApiNskV3BookingPassengersByPassengerKeyInfantPut",
                "summary": "Updates an infant on a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "infant",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Infant"
                        },
                        "description": "The modified infant."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPassengers{passengerKey}InfantPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPassengers{passengerKey}InfantPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates an infant on a specific passenger.",
                "operationId": "ApiNskV3BookingPassengersByPassengerKeyInfantPost",
                "summary": "Creates an infant on a specific passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "passengerInfantCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PassengerInfantCreateRequest"
                        },
                        "description": "The new infant."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPassengers{passengerKey}InfantPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/infant/documents": {
            "get": {
                "description": "Gets a specific passenger infant's collection of travel documents.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyInfantDocumentsGet",
                "summary": "Gets a specific passenger infant's collection of travel documents.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerTravelDocumentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}InfantDocumentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/passengers/{passengerKey}/infant/documents": {
            "post": {
                "description": "Create a new travel document for a specific passenger infant.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyInfantDocumentsPost",
                "summary": "Create a new travel document for a specific passenger infant.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TravelDocumentCreateRequest"
                        },
                        "description": "The new travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantDocumentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/infant/documents/{travelDocumentKey}": {
            "get": {
                "description": "Gets a specific passenger infant's specific travel document.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyGet",
                "summary": "Gets a specific passenger infant's specific travel document.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentKey",
                        "in": "path",
                        "description": "The unique travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerTravelDocument"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/passengers/{passengerKey}/infant/documents/{travelDocumentKey}": {
            "put": {
                "description": "Updates a specific passenger infant travel document.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPut",
                "summary": "Updates a specific passenger infant travel document.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentKey",
                        "in": "path",
                        "description": "The unique travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TravelDocumentEditRequest"
                        },
                        "description": "The modified travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific passenger infant specific travel document.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyDel",
                "summary": "Deletes a specific passenger infant specific travel document.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentKey",
                        "in": "path",
                        "description": "The unique travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific passenger infant travel document.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeyInfantDocumentsByTravelDocumentKeyPat",
                "summary": "Patches a specific passenger infant travel document.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentKey",
                        "in": "path",
                        "description": "The unique travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[TravelDocumentEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[TravelDocumentEditRequest]"
                        },
                        "description": "The patched travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/passengers/{passengerKey}/seats": {
            "get": {
                "description": "Gets all seats associated with a passenger.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeySeatsGet",
                "summary": "Gets all seats associated with a passenger.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "Passengers to get seats for.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/PassengerSeatArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}SeatsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/seats/{unitKey}": {
            "post": {
                "description": "Adds a seat assignment to a specific passenger on the booking in state.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyPost",
                "summary": "Adds a seat assignment to a specific passenger on the booking in state.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "The unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "unitKey",
                        "in": "path",
                        "description": "The unique unit key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "addUnitConfig",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddUnitConfig"
                        },
                        "description": "The add seat request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Seat added.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}Seats{unitKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a seat assignment from a specific passenger on the booking in state.",
                "operationId": "ApiNskV1BookingPassengersByPassengerKeySeatsByUnitKeyDelete",
                "summary": "Deletes a seat assignment from a specific passenger on the booking in state.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "unitKey",
                        "in": "path",
                        "description": "The unique unit key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "WaiveFee",
                        "in": "query",
                        "description": "The flag indicating to waive the seat fees if permissions permit.",
                        "type": "boolean"
                    },
                    {
                        "name": "IgnoreSeatSsrs",
                        "in": "query",
                        "description": "Flag indicating whether to ignore seat SSR's.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}Seats{unitKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/passengers/{passengerKey}/seats/{unitKey}": {
            "get": {
                "description": "Gets passenger seat by key.",
                "operationId": "ApiNskV2BookingPassengersByPassengerKeySeatsByUnitKeyGet",
                "summary": "Gets passenger seat by key.",
                "tags": [
                    "booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "description": "Unique passenger key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "unitKey",
                        "in": "path",
                        "description": "Unique unit key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/PassengerSeat"
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPassengers{passengerKey}Seats{unitKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/breakdown": {
            "get": {
                "description": "Gets all the passenger price breakdowns.",
                "operationId": "ApiNskV1BookingPassengersBreakdownGet",
                "summary": "Gets all the passenger price breakdowns.",
                "tags": [
                    "booking/passengers"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengersBreakdownGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengersBreakdownGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/breakdown/byType": {
            "get": {
                "description": "Gets all the passenger price breakdown by passenger type.",
                "operationId": "ApiNskV1BookingPassengersBreakdownByTypeGet",
                "summary": "Gets all the passenger price breakdown by passenger type.",
                "tags": [
                    "booking/passengers"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengersBreakdownByTypeGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengersBreakdownByTypeGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/payments": {
            "get": {
                "description": "ApiNskV1BookingPaymentsGet",
                "operationId": "ApiNskV1BookingPaymentsGet",
                "summary": "ApiNskV1BookingPaymentsGet",
                "tags": [
                    "/nsk/v1/booking/payments"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PaymentArray"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "ApiNskV1BookingPaymentsPost",
                "operationId": "ApiNskV1BookingPaymentsPost",
                "summary": "ApiNskV1BookingPaymentsPost",
                "tags": [
                    "/nsk/v1/booking/payments"
                ],
                "parameters": [
                    {
                        "name": "paymentMethodRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsPost201TextPlainResponse"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ThreeDSecureResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/payments": {
            "post": {
                "description": "<p>\r\n                    The payment fields are dynamic to the criteria of your payment provider. Here is an example request for a\r\n                    credit card payment that does not require address, zip, etc.\r\n                    { \"amount\": 10, \"currencyCode\": \"USD\", \"paymentFields\": {\"ACCTNO\":\"411111111111\", \"EXPDATE\":\"10/8/2017\",\r\n                    \"CC::AccountHolderName\":\"Bob Smith\", \"CC::VerificationCode\":\"111\"}}\r\n                </p>\r\n<p>\r\n                    A 202 (HTTP status code) response returns alternate data signifying that Three D Secure was enabled for this\r\n                    payment\r\n                    and is required for this payment type. The payment will need to be resent using the 3DS endpoint.\r\n                </p>",
                "operationId": "ApiNskV2BookingPaymentsPost",
                "summary": "Creates a new external payment or prepaid payment on the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "paymentMethodRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodRequest"
                        },
                        "description": "Payment request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsPost201TextPlainResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted for Further Processing.",
                        "schema": {
                            "$ref": "#/definitions/ThreeDSecureResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Voucher not found."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/payments/{paymentKey}": {
            "get": {
                "description": "Gets a specific payment.",
                "operationId": "ApiNskV1BookingPaymentsByPaymentKeyGet",
                "summary": "Gets a specific payment.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "paymentKey",
                        "in": "path",
                        "description": "Payment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPayments{paymentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes the payment.",
                "operationId": "ApiNskV1BookingPaymentsByPaymentKeyDelete",
                "summary": "Deletes the payment.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "paymentKey",
                        "in": "path",
                        "description": "Payment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPayments{paymentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/payments/{paymentMethod}/dcc": {
            "get": {
                "description": "Gets the available direct currency codes offer.",
                "operationId": "ApiNskV3BookingPaymentsByPaymentMethodDccGet",
                "summary": "Gets the available direct currency codes offer.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "Payment method code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Amount",
                        "in": "query",
                        "description": "Format - double. The amount being applied as a payment.",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "name": "AccountNumber",
                        "in": "query",
                        "description": "The account number.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "QuotedCurrencyCode",
                        "in": "query",
                        "description": "The quoted currency code to convert to.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/DirectCurrencyConversionAvailability"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPayments{paymentMethod}DccGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/payments/available": {
            "get": {
                "description": "Requires a booking in state.",
                "operationId": "ApiNskV2BookingPaymentsAvailableGet",
                "summary": "Retrieves the booking payment methods available for the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsAvailableGet200TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsAvailableGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/payments/bookingCredit": {
            "get": {
                "description": "See booking retrieve. This method uses the same validation rules.",
                "operationId": "ApiNskV1BookingPaymentsBookingCreditGet",
                "summary": "Gets credit available from a past booking.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "RecordLocator",
                        "in": "query",
                        "description": "Record locator being requested.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Document.DocumentNumber",
                        "in": "query",
                        "description": "One of the passengers applied travel document number.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Document.DocumentTypeCode",
                        "in": "query",
                        "description": "One of the passengers applied travel document type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "CurrencyCode",
                        "in": "query",
                        "description": "The currency code of the account.",
                        "type": "string"
                    },
                    {
                        "name": "EmailAddress",
                        "in": "query",
                        "description": "The email address of a contact.",
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "The destination station code.",
                        "type": "string"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "The origin station code.",
                        "type": "string"
                    },
                    {
                        "name": "FirstName",
                        "in": "query",
                        "description": "The first name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "LastName",
                        "in": "query",
                        "description": "The last name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "AgentName",
                        "in": "query",
                        "description": "The agent name that created the booking.",
                        "type": "string"
                    },
                    {
                        "name": "ContactCustomerNumber",
                        "in": "query",
                        "description": "One of the contacts customer number applied.",
                        "type": "string"
                    },
                    {
                        "name": "CreditCardNumber",
                        "in": "query",
                        "description": "The last 4 digits of one of the credit card number applied.",
                        "type": "string"
                    },
                    {
                        "name": "CustomerNumber",
                        "in": "query",
                        "description": "One of the passengers customer numbers applied.",
                        "type": "string"
                    },
                    {
                        "name": "FlightNumber",
                        "in": "query",
                        "description": "One of the journeys flight number.",
                        "type": "string"
                    },
                    {
                        "name": "OsTag",
                        "in": "query",
                        "description": "One of the OS tag number.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneNumber",
                        "in": "query",
                        "description": "One of the applied phone numbers to a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "OsTagEndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The OS tag end date.",
                        "type": "string"
                    },
                    {
                        "name": "OsTagStartDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The OS tag start date.",
                        "type": "string"
                    },
                    {
                        "name": "DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CreditAccount"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsBookingCreditGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Applies credit from a past booking.",
                "operationId": "ApiNskV1BookingPaymentsBookingCreditPost",
                "summary": "Applies credit from a past booking.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "applyBookingCreditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ApplyBookingCreditRequest"
                        },
                        "description": "Apply booking credit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsBookingCreditPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/payments/credit": {
            "get": {
                "description": "This endpoint is for agents and can get credit available for any user or type.",
                "operationId": "ApiNskV2BookingPaymentsCreditGet",
                "summary": "Gets credit available by reference number and type.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "ReferenceNumber",
                        "in": "query",
                        "description": "The account reference. This will be the record locator, customer account number, or organization code depending on\r\nthe type.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "Defines the type of credit being applied.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Customer",
                            "Booking",
                            "Organization"
                        ]
                    },
                    {
                        "name": "CurrencyCode",
                        "in": "query",
                        "description": "The currency code of the account.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CreditAccount"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsCreditGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "This endpoint is for agents and can apply credit for any user or type.",
                "operationId": "ApiNskV2BookingPaymentsCreditPost",
                "summary": "Applies credit by reference number and type.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "applyCreditAccountRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ApplyCreditAccountRequest"
                        },
                        "description": "Apply credit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsCreditPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/payments/customerCredit": {
            "get": {
                "description": "Depending on configuration, credit may be validated by the contacts and passengers on the booking.",
                "operationId": "ApiNskV2BookingPaymentsCustomerCreditGet",
                "summary": "Gets credit available for the logged in user on the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "CurrencyCode",
                        "in": "query",
                        "description": "The currency code of the account.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CreditAccount"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsCustomerCreditGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Applies credit from the logged in customer to the booking in state.",
                "operationId": "ApiNskV2BookingPaymentsCustomerCreditPost",
                "summary": "Applies credit from the logged in customer to the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "applyCreditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ApplyCreditRequest"
                        },
                        "description": "Apply credit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsCustomerCreditPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v4/booking/payments/dcc/{dccKey}": {
            "post": {
                "description": "Creates a new external payment with direct currency conversion.",
                "operationId": "ApiNskV4BookingPaymentsDccByDccKeyPost",
                "summary": "Creates a new external payment with direct currency conversion.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "dccKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dccRequestBasev2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DccRequestBasev2"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV4BookingPaymentsDcc{dccKey}Post201TextPlainResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/ThreeDSecureResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/payments/fees/{feeCode}": {
            "get": {
                "description": "Retrieves the payment fee for the fee code.",
                "operationId": "ApiNskV3BookingPaymentsFeesByFeeCodeGet",
                "summary": "Retrieves the payment fee for the fee code.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "feeCode",
                        "in": "path",
                        "description": "The unique fee code identifier.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Amount",
                        "in": "query",
                        "description": "Format - double. The amount being payed.",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "name": "CurrencyCode",
                        "in": "query",
                        "description": "The currency code. This will default to the bookings currency code.",
                        "type": "string"
                    },
                    {
                        "name": "CollectedCurrencyCode",
                        "in": "query",
                        "description": "The optional collected currency code. This will be needed for MCC requests.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PaymentFeeResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPaymentsFees{feeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/payments/mcc": {
            "get": {
                "description": "This is affected by the booking currency code.",
                "operationId": "ApiNskV3BookingPaymentsMccGet",
                "summary": "Gets the available multi-currency codes available.",
                "tags": [
                    "booking/payments"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPaymentsMccGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPaymentsMccGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/payments/mcc/{currencyCode}": {
            "post": {
                "description": "This is affected by the booking currency code.",
                "operationId": "ApiNskV3BookingPaymentsMccByCurrencyCodePost",
                "summary": "Creates a new MCC payment.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "currencyCode",
                        "in": "path",
                        "description": "The collected currency code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentMethodRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodRequest"
                        },
                        "description": "The payment method request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPaymentsMcc{currencyCode}Post201TextPlainResponse"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ThreeDSecureResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/payments/mcc/{currencyCode}/storedPayment/{storedPaymentKey}": {
            "post": {
                "description": "This is affected by the booking currency code.",
                "operationId": "ApiNskV3BookingPaymentsMccByCurrencyCodeStoredPaymentByStoredPaymentKeyPost",
                "summary": "Creates a new MCC payment from a stored payment.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "currencyCode",
                        "in": "path",
                        "description": "The collected currency code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "storedPaymentKey",
                        "in": "path",
                        "description": "Stored payment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaymentRequest"
                        },
                        "description": "The payment method request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPaymentsMcc{currencyCode}StoredPayment{storedPaymentKey}Post201TextPlainResponse"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ThreeDSecureResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/payments/organizationCredit": {
            "get": {
                "description": "Depending on configuration, credit may be validated by the contacts and passengers on the booking.",
                "operationId": "ApiNskV2BookingPaymentsOrganizationCreditGet",
                "summary": "Gets credit available for the logged in users organization.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "CurrencyCode",
                        "in": "query",
                        "description": "The currency code of the account.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CreditAccount"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsOrganizationCreditGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Applies credit to the logged in user's organization.",
                "operationId": "ApiNskV2BookingPaymentsOrganizationCreditPost",
                "summary": "Applies credit to the logged in user's organization.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "applyCreditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ApplyCreditRequest"
                        },
                        "description": "Apply credit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsOrganizationCreditPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/payments/refunds": {
            "get": {
                "description": "Requires a booking in state.",
                "operationId": "ApiNskV1BookingPaymentsRefundsGet",
                "summary": "Retrieves the booking payment methods available for a refund on the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsRefundsGet200TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsRefundsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/payments/refunds": {
            "post": {
                "description": "Requires a booking in state. Credit shell payment types will default to a customer credit if logged in. If not\r\nlogged in a booking credit will be applied.",
                "operationId": "ApiNskV3BookingPaymentsRefundsPost",
                "summary": "Creates a refund for the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "paymentRefundRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaymentRefundRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPaymentsRefundsPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not found."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/payments/refunds/customerCredit": {
            "post": {
                "description": "Requires a booking in state and an agent token. Agents should use /refunds endpoint for booking credits.",
                "operationId": "ApiNskV2BookingPaymentsRefundsCustomerCreditPost",
                "summary": "Creates a customer credit for a specified customer.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "customerCreditRefundRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CustomerCreditRefundRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsRefundsCustomerCreditPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/payments/refunds/organizationCredit": {
            "post": {
                "description": "Creates an organization account refund for a payment from\r\nthe booking in state.",
                "operationId": "ApiNskV1BookingPaymentsRefundsOrganizationCreditPost",
                "summary": "Creates an organization account refund for a payment from\r\nthe booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "organizationRefundRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/OrganizationRefundRequest"
                        },
                        "description": "The organization refund request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsRefundsOrganizationCreditPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsRefundsOrganizationCreditPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/payments/storedPayment/{storedPaymentKey}": {
            "post": {
                "description": "Account Number and Expiration Date are stored.\r\nWith stored payments, payment fields may still be required to complete the transaction.\r\nFor example, a credit card that requires address information, this information is not stored with the stored\r\npayment.",
                "operationId": "ApiNskV3BookingPaymentsStoredPaymentByStoredPaymentKeyPost",
                "summary": "Creates a payment using the stored payment information for the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "storedPaymentKey",
                        "in": "path",
                        "description": "Stored payment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaymentRequest"
                        },
                        "description": "Payment request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPaymentsStoredPayment{storedPaymentKey}Post201TextPlainResponse"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ThreeDSecureResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not found."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/payments/threeDSecure": {
            "post": {
                "description": "<p>\r\n                    A call to payments post should be made first and processed to verify a 3DS payment is required.\r\n                </p>",
                "operationId": "ApiNskV2BookingPaymentsThreeDSecurePost",
                "summary": "Creates a new ThreeDSecure external payment or prepaid payment on the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "threeDSecurePaymentMethodRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ThreeDSecurePaymentMethodRequest"
                        },
                        "description": "Payment request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsThreeDSecurePost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/payments/voucher": {
            "get": {
                "description": "Gets information regarding a specific voucher code.",
                "operationId": "ApiNskV1BookingPaymentsVoucherGet",
                "summary": "Gets information regarding a specific voucher code.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "ReferenceCode",
                        "in": "query",
                        "description": "The voucher reference code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "OverrideRestrictions",
                        "in": "query",
                        "description": "Override restrictions. Defaults to false.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VoucherInformation"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsVoucherGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/payments/voucher": {
            "post": {
                "description": "Creates a new voucher payment on the booking in state.",
                "operationId": "ApiNskV3BookingPaymentsVoucherPost",
                "summary": "Creates a new voucher payment on the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "voucherPaymentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/VoucherPaymentRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingPaymentsVoucherPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Voucher not found."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/payments/voucher/{voucherPaymentReference}": {
            "delete": {
                "description": "Deletes a voucher payment on the booking in state.",
                "operationId": "ApiNskV1BookingPaymentsVoucherByVoucherPaymentReferenceDelete",
                "summary": "Deletes a voucher payment on the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "voucherPaymentReference",
                        "in": "path",
                        "description": "Voucher payment reference.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsVoucher{voucherPaymentReference}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/payments/voucher/{voucherPaymentReference}": {
            "delete": {
                "description": "Deletes a voucher payment on the booking in state.",
                "operationId": "ApiNskV2BookingPaymentsVoucherByVoucherPaymentReferenceDelete",
                "summary": "Deletes a voucher payment on the booking in state.",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "voucherPaymentReference",
                        "in": "path",
                        "description": "Voucher payment reference.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingPaymentsVoucher{voucherPaymentReference}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/pointOfSale": {
            "put": {
                "description": "Updates the booking point of sale.",
                "operationId": "ApiNskV1BookingPointOfSalePut",
                "summary": "Updates the booking point of sale.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "bookingPointOfSale",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingPointOfSale"
                        },
                        "description": "Details to update the point of sale."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPointOfSalePut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPointOfSalePut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Updates the booking point of sale.",
                "operationId": "ApiNskV1BookingPointOfSalePatch",
                "summary": "Updates the booking point of sale.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "deltaMapper[BookingPointOfSale]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[BookingPointOfSale]"
                        },
                        "description": "Details to update the point of sale."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPointOfSalePatch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPointOfSalePatch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/promotion": {
            "put": {
                "description": "Updates a promotion code to a booking in state.",
                "operationId": "ApiNskV1BookingPromotionPut",
                "summary": "Updates a promotion code to a booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "promotionRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PromotionRequest"
                        },
                        "description": "Promotion request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPromotionPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPromotionPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Sets a promotion code to a booking in state.",
                "operationId": "ApiNskV1BookingPromotionPost",
                "summary": "Sets a promotion code to a booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "promotionRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PromotionRequest"
                        },
                        "description": "Promotion request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok."
                    },
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPromotionPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes the promotion code on the booking in state.",
                "operationId": "ApiNskV1BookingPromotionDelete",
                "summary": "Deletes the promotion code on the booking in state.",
                "tags": [
                    "booking"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPromotionDelete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/queue": {
            "post": {
                "description": "Adds the booking from state to a booking queue.",
                "operationId": "ApiNskV1BookingQueuePost",
                "summary": "Adds the booking from state to a booking queue.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "bookingQueueRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingQueueRequest"
                        },
                        "description": "The booking request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingQueuePost200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingQueuePost500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Removes the booking in state from a booking queue.",
                "operationId": "ApiNskV1BookingQueueDelete",
                "summary": "Removes the booking in state from a booking queue.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "bookingQueueRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingQueueRequest"
                        },
                        "description": "The booking request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingQueueDelete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/reset": {
            "delete": {
                "description": "Clears the current booking state.",
                "operationId": "ApiNskV1BookingResetDelete",
                "summary": "Clears the current booking state.",
                "tags": [
                    "booking"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingResetDelete200TextPlainResponse"
                        }
                    },
                    "204": {
                        "description": "Successfully reset."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/retrieve": {
            "get": {
                "description": "<p>The booking retrieve validation can be customized per implementation via the booking validation service.</p>\r\n<p>For this implementation please provide at least:</p>\r\n<ul>\r\n  <li>\r\n                        The record locator and email address or\r\n                    </li>\r\n  <li>\r\n                        The record locator and first name and last name or\r\n                    </li>\r\n  <li>\r\n                        The record locator and flight origin and flight date\r\n                    </li>\r\n</ul>\r\n<p>This action requires a session token.</p>",
                "operationId": "ApiNskV1BookingRetrieveGet",
                "summary": "Retrieves the booking from the New Skies server based on the retrieve booking query string parameters. If the\r\nbooking exists and validation passes based on the criteria the booking will be loaded into web session\r\nand returned.",
                "tags": [
                    "booking/retrieve"
                ],
                "parameters": [
                    {
                        "name": "RecordLocator",
                        "in": "query",
                        "description": "Record locator being requested.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "EmailAddress",
                        "in": "query",
                        "description": "The email address of a contact.",
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "The destination station code.",
                        "type": "string"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "The origin station code.",
                        "type": "string"
                    },
                    {
                        "name": "FirstName",
                        "in": "query",
                        "description": "The first name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "LastName",
                        "in": "query",
                        "description": "The last name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "AgentName",
                        "in": "query",
                        "description": "The agent name that created the booking.",
                        "type": "string"
                    },
                    {
                        "name": "ContactCustomerNumber",
                        "in": "query",
                        "description": "One of the contacts customer number applied.",
                        "type": "string"
                    },
                    {
                        "name": "CreditCardNumber",
                        "in": "query",
                        "description": "The last 4 digits of one of the credit card number applied.",
                        "type": "string"
                    },
                    {
                        "name": "CustomerNumber",
                        "in": "query",
                        "description": "One of the passengers customer numbers applied.",
                        "type": "string"
                    },
                    {
                        "name": "Document.DocumentNumber",
                        "in": "query",
                        "description": "One of the passengers applied travel document number.",
                        "type": "string"
                    },
                    {
                        "name": "Document.DocumentTypeCode",
                        "in": "query",
                        "description": "One of the passengers applied travel document type code.",
                        "type": "string"
                    },
                    {
                        "name": "FlightNumber",
                        "in": "query",
                        "description": "One of the journeys flight number.",
                        "type": "string"
                    },
                    {
                        "name": "OsTag",
                        "in": "query",
                        "description": "One of the OS tag number.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneNumber",
                        "in": "query",
                        "description": "One of the applied phone numbers to a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "OsTagEndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The OS tag end date.",
                        "type": "string"
                    },
                    {
                        "name": "OsTagStartDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The OS tag start date.",
                        "type": "string"
                    },
                    {
                        "name": "DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    },
                    "400": {
                        "description": "Query string parameters are not valid."
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "403": {
                        "description": "A web session is required, Invalid Search criteria."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingRetrieveGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/retrieve/{bookingKey}": {
            "get": {
                "description": "This action requires a session token and the user logged in.",
                "operationId": "ApiNskV1BookingRetrieveByBookingKeyGet",
                "summary": "Gets a specific booking by key and stores it in state.",
                "tags": [
                    "booking/retrieve"
                ],
                "parameters": [
                    {
                        "name": "bookingKey",
                        "in": "path",
                        "description": "The booking key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingRetrieve{bookingKey}Get404TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "No default anonymous user."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/retrieve/byRecordLocator/{recordLocator}": {
            "get": {
                "description": "This action requires a session token and the user logged in.",
                "operationId": "ApiNskV1BookingRetrieveByRecordLocatorByRecordLocatorGet",
                "summary": "Gets a specific booking by record locator and stores it in state.",
                "tags": [
                    "booking/retrieve"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The booking record locator.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingRetrieveByRecordLocator{recordLocator}Get404TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "No default anonymous user."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/seatmaps": {
            "get": {
                "description": "Gets the list of seat maps for all the journeys for the booking in state.",
                "operationId": "ApiNskV2BookingSeatmapsGet",
                "summary": "Gets the list of seat maps for all the journeys for the booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "IncludePropertyLookup",
                        "in": "query",
                        "description": "Flag indicating to include seat property lookup on the response.",
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SeatMapAvailabilityArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingSeatmapsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/booking/seatmaps/journey/{journeyKey}": {
            "get": {
                "description": "Gets the list of seat maps for an entire journey.",
                "operationId": "ApiNskV3BookingSeatmapsJourneyByJourneyKeyGet",
                "summary": "Gets the list of seat maps for an entire journey.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The unique journey key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "IncludePropertyLookup",
                        "in": "query",
                        "description": "Flag indicating to include seat property lookup on the response.",
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SeatMapAvailabilityArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3BookingSeatmapsJourney{journeyKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/seatmaps/segment/{segmentKey}": {
            "get": {
                "description": "Gets the list of seat maps for a specific journey's segment.",
                "operationId": "ApiNskV2BookingSeatmapsSegmentBySegmentKeyGet",
                "summary": "Gets the list of seat maps for a specific journey's segment.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "IncludePropertyLookup",
                        "in": "query",
                        "description": "Flag indicating to include seat property lookup on the response.",
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SeatMapAvailabilityArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingSeatmapsSegment{segmentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/seats/auto/{primaryPassengerKey}": {
            "post": {
                "description": "Auto assigns seats to all selected passengers that do not have them for every journey on the booking.",
                "operationId": "ApiNskV1BookingSeatsAutoByPrimaryPassengerKeyPost",
                "summary": "Auto assigns seats to all selected passengers that do not have them for every journey on the booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "primaryPassengerKey",
                        "in": "path",
                        "description": "The key for the primary passenger.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "autoAssignRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AutoAssignRequest"
                        },
                        "description": "The auto assign seat request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Seats auto-assigned.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSeatsAuto{primaryPassengerKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/seats/auto/{primaryPassengerKey}/journey/{journeyKey}": {
            "post": {
                "description": "Auto assigns seats to all passengers that do not have them for a specific journey.",
                "operationId": "ApiNskV1BookingSeatsAutoByPrimaryPassengerKeyJourneyByJourneyKeyPost",
                "summary": "Auto assigns seats to all passengers that do not have them for a specific journey.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "primaryPassengerKey",
                        "in": "path",
                        "description": "The key for the primary passenger.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The specific journey key to auto assign.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "autoAssignRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AutoAssignRequest"
                        },
                        "description": "The auto assign seat request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Seats auto-assigned.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSeatsAuto{primaryPassengerKey}Journey{journeyKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/seats/auto/{primaryPassengerKey}/segment/{segmentKey}": {
            "post": {
                "description": "Auto assigns seats to all passengers that do not have them for a specific journey's segment.",
                "operationId": "ApiNskV1BookingSeatsAutoByPrimaryPassengerKeySegmentBySegmentKeyPost",
                "summary": "Auto assigns seats to all passengers that do not have them for a specific journey's segment.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "primaryPassengerKey",
                        "in": "path",
                        "description": "The key for the primary passenger.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The specific segment key to auto assign.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "autoAssignRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AutoAssignRequest"
                        },
                        "description": "The auto assign seat request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Seats auto-assigned.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSeatsAuto{primaryPassengerKey}Segment{segmentKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/segments/{segmentKey}": {
            "delete": {
                "description": "Calling this method will alter the existing journeyKey. If you are cancelling the only segment in a journey,\r\nthis method will behave the same as calling DELETE on /api/nsk/v1/booking/journeys/{journeyKey}. \r\nIf there are segments remaining after the delete, the Location response header will be set with \r\nthe location of the modified journey with its new key.",
                "operationId": "ApiNskV1BookingSegmentsBySegmentKeyDelete",
                "summary": "Cancels the specific segment from the booking in state.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The key of the specific segment to be canceled.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSegments{segmentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/ssrs": {
            "get": {
                "description": "Requires a booking in state.",
                "operationId": "ApiNskV1BookingSsrsGet",
                "summary": "Retrieves the current SSRs added to the booking in state.",
                "tags": [
                    "booking/ssrs"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PassengerSsrArray"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSsrsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Adding an SSR by journey automatically adds the SSR to every segment.\r\nRequires a booking in state.",
                "operationId": "ApiNskV1BookingSsrsPost",
                "summary": "Adds SSRs to the booking in state.",
                "tags": [
                    "booking/ssrs"
                ],
                "parameters": [
                    {
                        "name": "ssrByKeysRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SsrByKeysRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSsrsPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/ssrs/{ssrKey}": {
            "get": {
                "description": "Requires a booking in state.",
                "operationId": "ApiNskV1BookingSsrsBySsrKeyGet",
                "summary": "Retrieves the current SSR by key.",
                "tags": [
                    "booking/ssrs"
                ],
                "parameters": [
                    {
                        "name": "ssrKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PassengerSsr"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSsrs{ssrKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Requires a booking in state.",
                "operationId": "ApiNskV1BookingSsrsBySsrKeyPut",
                "summary": "Modify the ssr note.",
                "tags": [
                    "booking/ssrs"
                ],
                "parameters": [
                    {
                        "name": "ssrKey",
                        "in": "path",
                        "description": "Unique Ssr key identifier.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "note",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Note"
                        },
                        "description": "The updated note."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSsrs{ssrKey}Put200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Adding an SSR by journey automatically adds the SSR to every segment.\r\nRequires a booking in state.",
                "operationId": "ApiNskV1BookingSsrsBySsrKeyPost",
                "summary": "Add an SSR to the booking in state.",
                "tags": [
                    "booking/ssrs"
                ],
                "parameters": [
                    {
                        "name": "ssrKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "singleSsrByKeyRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SingleSsrByKeyRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSsrs{ssrKey}Post201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Requires a booking in state.",
                "operationId": "ApiNskV1BookingSsrsBySsrKeyDelete",
                "summary": "Deletes by the SSR passenger key provided by metadata.",
                "tags": [
                    "booking/ssrs"
                ],
                "parameters": [
                    {
                        "name": "ssrKey",
                        "in": "path",
                        "description": "Unique Ssr passenger identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSsrs{ssrKey}Delete200TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not found."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/ssrs/availability": {
            "post": {
                "description": "Requires a booking in state.\r\nBy default, all SSR availability for the booking is returned.",
                "operationId": "ApiNskV1BookingSsrsAvailabilityPost",
                "summary": "Get the SSRs available to add to the booking in state.",
                "tags": [
                    "booking/ssrs"
                ],
                "parameters": [
                    {
                        "name": "ssrAvailabilityRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SsrAvailabilityRequest"
                        },
                        "description": "Optional request filter."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SsrAvailability"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSsrsAvailabilityPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/ssrs/manual": {
            "post": {
                "description": "Adding an SSR by journey automatically adds the SSR to every segment.\r\nRequires a booking in state.\r\nThis is an alternate way of creating an SSR. Creating by ID is recommended (see /api/booking/ssrs).\r\nThis method is useful if the UI is not querying availability and not using dynamic SSR information.",
                "operationId": "ApiNskV1BookingSsrsManualPost",
                "summary": "Adds SSRs to the booking in state.",
                "tags": [
                    "booking/ssrs"
                ],
                "parameters": [
                    {
                        "name": "ssrsRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SsrsRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSsrsManualPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Requires a booking in state. \r\nThis is an alternate way of deleting an SSR. Deleting by ID is recommended (see /api/booking/ssrs).\r\nThis method is useful if the UI is not querying availability and not using dynamic SSR information.",
                "operationId": "ApiNskV1BookingSsrsManualDelete",
                "summary": "Deletes the SSR by the request criteria.",
                "tags": [
                    "booking/ssrs"
                ],
                "parameters": [
                    {
                        "name": "passengerSsrKey",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PassengerSsrKey"
                        },
                        "description": "Unique Ssr passenger information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSsrsManualDelete200TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "No booking found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not found."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/status": {
            "get": {
                "description": "There are certain booking data that are not saved to state, such as payment \r\nattachments. This endpoint will return the booking data so that non persisted \r\ninformation is returned when and only when the status code is 200. This is the \r\nonly time the data will be available.",
                "operationId": "ApiNskV2BookingStatusGet",
                "summary": "Gets the status of the booking commit and returns the booking.",
                "tags": [
                    "booking"
                ],
                "responses": {
                    "200": {
                        "description": "Ok, booking has processed.",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    },
                    "202": {
                        "description": "Accepted, booking is still processing.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingStatusGet202TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{bookingKey}/history": {
            "get": {
                "description": "Gets a itinerary history stateless.",
                "operationId": "ApiNskV1BookingsByBookingKeyHistoryGet",
                "summary": "Gets a itinerary history stateless.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "bookingKey",
                        "in": "path",
                        "description": "The booking key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Event",
                        "in": "query",
                        "description": "The event that triggered the history entry.",
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "ConvertedHistory",
                            "FlightTimeChange",
                            "FlightDesignatorChange",
                            "AssignedSeat",
                            "RemoveSeat",
                            "AddedFlight",
                            "DeletedFlight",
                            "DeletedPassenger",
                            "NameChange",
                            "GroupNameChange",
                            "CancelledTicketing",
                            "ScheduleChange",
                            "AddedPayment",
                            "ServiceFee",
                            "QueuedPnr",
                            "UnqueuedPnr",
                            "DeletedComment",
                            "Divided",
                            "CheckedIn",
                            "CheckedOut",
                            "FareOverride",
                            "AddedBaggage",
                            "ChangedBaggageWeight",
                            "CheckedBaggage",
                            "RemovedBaggage",
                            "BoardedPassenger",
                            "UnboardedPassenger",
                            "ManualAuthorization",
                            "ManualDecline",
                            "UndoCancel",
                            "ItinerarySent",
                            "ContactChange",
                            "SsrAdded",
                            "FlightMoved",
                            "VerifiedDocument",
                            "RemovedVerifiedDocument",
                            "Promotion",
                            "BookingComment",
                            "CancelledSchedule",
                            "CancelServiceFee",
                            "OverrideServiceFee",
                            "AddedRecordLocator",
                            "DeletedRecordLocator",
                            "UpgradeClassOfService",
                            "DowngradeClassOfService",
                            "StandbyPriorityChange",
                            "AssignedTicketNumber",
                            "DeletedTicketNumber",
                            "ConfirmSegmentStatusCodeChange",
                            "CodeshareFlightChanged",
                            "PdsCancel",
                            "PdsPending",
                            "PdsConfirm",
                            "PdsFinalized",
                            "PdsDeclined",
                            "PdsException",
                            "PdsCancelRefused",
                            "PdsCancelUnsuccessful",
                            "Apps",
                            "InhibitedOverride",
                            "PrintedBagTag",
                            "SelfPrintedBagTag",
                            "PrintedBoardingPass",
                            "AddCustomerId",
                            "DeleteCustomerId",
                            "HoldCreated",
                            "HoldRemoved",
                            "HoldChanged",
                            "OverrideCoupon",
                            "PdsSynchronized",
                            "PdsItemremoved",
                            "Reprice"
                        ]
                    },
                    {
                        "name": "LastPageKey",
                        "in": "query",
                        "description": "The key of the last booking history item returned.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The page size for the response.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/HistoryResponse"
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{bookingKey}HistoryGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{bookingKey}/history/flightMove": {
            "get": {
                "description": "Gets a flight move history stateless.",
                "operationId": "ApiNskV1BookingsByBookingKeyHistoryFlightMoveGet",
                "summary": "Gets a flight move history stateless.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "bookingKey",
                        "in": "path",
                        "description": "The booking key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "LastPageKey",
                        "in": "query",
                        "description": "The key of the last booking history item returned.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The page size for the response.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/SeatAssignmentHistoryResponse"
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{bookingKey}HistoryFlightMoveGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{bookingKey}/history/seatAssignment": {
            "get": {
                "description": "Gets a seat assignment history stateless.",
                "operationId": "ApiNskV1BookingsByBookingKeyHistorySeatAssignmentGet",
                "summary": "Gets a seat assignment history stateless.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "bookingKey",
                        "in": "path",
                        "description": "The booking key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Event",
                        "in": "query",
                        "description": "The event that triggered the seat assignment history entry.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "AssignedSeat",
                            "RemoveSeat"
                        ]
                    },
                    {
                        "name": "LastPageKey",
                        "in": "query",
                        "description": "The key of the last booking history item returned.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The page size for the response.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/SeatAssignmentHistoryResponse"
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{bookingKey}HistorySeatAssignmentGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{bookingKey}/history/segmentChange": {
            "get": {
                "description": "Gets a segment change history stateless.",
                "operationId": "ApiNskV1BookingsByBookingKeyHistorySegmentChangeGet",
                "summary": "Gets a segment change history stateless.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "bookingKey",
                        "in": "path",
                        "description": "The booking key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Event",
                        "in": "query",
                        "description": "The event that triggered the seat assignment history entry.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "AddedFlight",
                            "DeletedFlight"
                        ]
                    },
                    {
                        "name": "LastPageKey",
                        "in": "query",
                        "description": "The key of the last booking history item returned.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The page size for the response.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/SegmentChangeHistoryResponse"
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{bookingKey}HistorySegmentChangeGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{bookingKey}/queue": {
            "post": {
                "description": "Adds a booking to a booking queue.",
                "operationId": "ApiNskV1BookingsByBookingKeyQueuePost",
                "summary": "Adds a booking to a booking queue.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "bookingKey",
                        "in": "path",
                        "description": "The booking key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bookingQueueRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingQueueRequest"
                        },
                        "description": "The booking request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{bookingKey}QueuePost200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{bookingKey}QueuePost500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Removes a booking from a booking queue.",
                "operationId": "ApiNskV1BookingsByBookingKeyQueueDelete",
                "summary": "Removes a booking from a booking queue.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "bookingKey",
                        "in": "path",
                        "description": "The booking key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bookingQueueRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingQueueRequest"
                        },
                        "description": "The booking request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{bookingKey}QueueDelete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{bookingKey}/queue/history": {
            "post": {
                "description": "Gets the booking queue history for a specific booking.",
                "operationId": "ApiNskV1BookingsByBookingKeyQueueHistoryPost",
                "summary": "Gets the booking queue history for a specific booking.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "bookingKey",
                        "in": "path",
                        "description": "The booking key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bookingQueueHistoryRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingQueueHistoryRequest"
                        },
                        "description": "The booking queue history request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BookingQueueHistoryArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{bookingKey}QueueHistoryPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{recordLocator}": {
            "get": {
                "description": "Retrieves a booking itinerary stateless.",
                "operationId": "ApiNskV1BookingsByRecordLocatorGet",
                "summary": "Retrieves a booking itinerary stateless.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{recordLocator}/account": {
            "get": {
                "description": "Retrieves the booking account and collections based on the record locator.",
                "operationId": "ApiNskV1BookingsByRecordLocatorAccountGet",
                "summary": "Retrieves the booking account and collections based on the record locator.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates the booking account based on the record locator and\r\ndata in the request.",
                "operationId": "ApiNskV1BookingsByRecordLocatorAccountPost",
                "summary": "Creates the booking account based on the record locator and\r\ndata in the request.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "createAccountRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CreateAccountRequest"
                        },
                        "description": "The create account request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{recordLocator}/account/collection": {
            "post": {
                "description": "This endpoint will create a new account collection and a transaction if no collection exists or \r\nno matching collection is found.  An account collection is unique based on the transaction code\r\nand the expiration date.  If a matching collection is found, a transaction for that collection\r\nis generated and the account collection will be updated.\r\nSee /api/nsk/v1/resources/accountTransactionCodes for a list of available account transaction codes.",
                "operationId": "ApiNskV1BookingsByRecordLocatorAccountCollectionPost",
                "summary": "Creates a booking account collection and transaction based on the record\r\nlocator and data in the request.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "accountCollectionRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AccountCollectionRequest"
                        },
                        "description": "The create account collection request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountCollectionPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountCollectionPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{recordLocator}/account/collection/{accountCollectionKey}/transactions": {
            "get": {
                "description": "Retrieves the booking account collection transactions based on the record\r\nlocator, the account collection key, and the request data.",
                "operationId": "ApiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransa",
                "summary": "Retrieves the booking account collection transactions based on the record\r\nlocator, the account collection key, and the request data.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "accountCollectionKey",
                        "in": "path",
                        "description": "The account collection key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "This endpoint will add a transaction to an existing account collection.\r\nIf there are no account collections, or the account collection key does\r\nnot match an existing collection, the request will fail.\r\n            \r\nTo add a new credit, see /api/nsk/v1/bookings/{recordLocator}/account/collection.",
                "operationId": "ApiNskV1BookingsByRecordLocatorAccountCollectionByAccountCollectionKeyTransa-1",
                "summary": "Creates a booking account collection transaction based on the record locator,\r\nthe account collection key, and data in the request.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "accountCollectionKey",
                        "in": "path",
                        "description": "The account collection key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transactionRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TransactionRequest"
                        },
                        "description": "The create transaction requests."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{recordLocator}/account/status": {
            "put": {
                "description": "Updates the booking account status.",
                "operationId": "ApiNskV1BookingsByRecordLocatorAccountStatusPut",
                "summary": "Updates the booking account status.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The allowed account status.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Open",
                            "Closed",
                            "AgencyInactive",
                            "Unknown"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountStatusPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountStatusPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{recordLocator}/account/transactions": {
            "get": {
                "description": "Retrieves all of the transactions for all of the collections for the booking.",
                "operationId": "ApiNskV1BookingsByRecordLocatorAccountTransactionsGet",
                "summary": "Retrieves all of the transactions for all of the collections for the booking.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}AccountTransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{recordLocator}/comments": {
            "post": {
                "description": "Adds a comment to a booking not in state.",
                "operationId": "ApiNskV1BookingsByRecordLocatorCommentsPost",
                "summary": "Adds a comment to a booking not in state.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bookingCommentRequestArray",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingCommentRequestArray"
                        },
                        "description": "The comments to add."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}CommentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/{recordLocator}/email": {
            "post": {
                "description": "This method will always send itinerary notifications via email, \r\nregardless of the chosen distributionOption on the contact.",
                "operationId": "ApiNskV1BookingsByRecordLocatorEmailPost",
                "summary": "Sends itinerary notification via email.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Bookings{recordLocator}EmailPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/bookings/{recordLocator}/notification": {
            "post": {
                "description": "Itinerary will be sent using the method set on the contact's distributionOption field.",
                "operationId": "ApiNskV2BookingsByRecordLocatorNotificationPost",
                "summary": "Sends itinerary notification.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator of the booking.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Bookings{recordLocator}NotificationPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/checkin/{recordLocator}/journey/{journeyKey}": {
            "delete": {
                "description": "Removes the checkin status of passengers for a specific journey stateless.",
                "operationId": "ApiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyDelete",
                "summary": "Removes the checkin status of passengers for a specific journey stateless.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The booking record locator to look up the journey.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "checkinPassengersRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CheckinPassengersRequest"
                        },
                        "description": "The checkin passengers request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/checkin/{recordLocator}/journey/{journeyKey}/requirements": {
            "get": {
                "description": "Gets the checkin pre-validation requirements for a specific journey.",
                "operationId": "ApiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyRequirementsGet",
                "summary": "Gets the checkin pre-validation requirements for a specific journey.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator of the booking.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key to be pre validate checkin with.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CheckinRequirements"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}RequirementsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/checkin/{recordLocator}/journey/{journeyKey}/status": {
            "get": {
                "description": "Gets the passengers lift status stateless for a specific journey based on the record locator.",
                "operationId": "ApiNskV1BookingsCheckinByRecordLocatorJourneyByJourneyKeyStatusGet",
                "summary": "Gets the passengers lift status stateless for a specific journey based on the record locator.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator in reference to the journey.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key in reference.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}StatusGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}StatusGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/checkin/{recordLocator}/segment/{segmentKey}": {
            "delete": {
                "description": "Removes the checkin status of passengers for a specific journey's segment stateless.",
                "operationId": "ApiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyDelete",
                "summary": "Removes the checkin status of passengers for a specific journey's segment stateless.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The booking record locator to look up the journeys segment.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "checkinPassengersRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CheckinPassengersRequest"
                        },
                        "description": "The checkin passengers request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/checkin/{recordLocator}/segment/{segmentKey}/requirements": {
            "get": {
                "description": "Gets the checkin pre-validation requirements for a specific bookings journeys segment.",
                "operationId": "ApiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyRequirementsGet",
                "summary": "Gets the checkin pre-validation requirements for a specific bookings journeys segment.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator of the booking.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment key to pre validate checkin with.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CheckinRequirements"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}RequirementsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/checkin/{recordLocator}/segment/{segmentKey}/status": {
            "get": {
                "description": "Gets the passengers lift status stateless for a specific segment based on the record locator.",
                "operationId": "ApiNskV1BookingsCheckinByRecordLocatorSegmentBySegmentKeyStatusGet",
                "summary": "Gets the passengers lift status stateless for a specific segment based on the record locator.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The record locator in reference to the journey.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment key in reference.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}StatusGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}StatusGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/bookings/quote": {
            "post": {
                "description": "Although this endpoint behaves like a GET, POST is used to reduce the limitations resulting from URL length issues.\r\nItinerary is a stateless booking and not tied to the logged in user.",
                "operationId": "ApiNskV2BookingsQuotePost",
                "summary": "Retrieves a itinerary quote based on the request.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "itineraryQuoteRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ItineraryQuoteRequest"
                        },
                        "description": "The itinerary quote request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Itinerary returned OK",
                        "schema": {
                            "$ref": "#/definitions/ItineraryQuote"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingsQuotePost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByAgency": {
            "get": {
                "description": "Find booking by agency.",
                "operationId": "ApiNskV1BookingsSearchByAgencyGet",
                "summary": "Find booking by agency.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "OrganizationCode represents the organization associated with the agent who created\r\nthe booking.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "FirstName",
                        "in": "query",
                        "description": "The first name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "LastName",
                        "in": "query",
                        "description": "The last name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneticSearch",
                        "in": "query",
                        "description": "Whether or not to do a phonetic search of the last name.",
                        "type": "boolean"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByAgencyGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByAgent": {
            "get": {
                "description": "Find booking by agent.",
                "operationId": "ApiNskV1BookingsSearchByAgentGet",
                "summary": "Find booking by agent.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "AgentId",
                        "in": "query",
                        "description": "Format - int64. The agent identifier.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "FirstName",
                        "in": "query",
                        "description": "The first name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "LastName",
                        "in": "query",
                        "description": "The last name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneticSearch",
                        "in": "query",
                        "description": "Whether or not to do a phonetic search.",
                        "type": "boolean"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByAgentGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByAgentCode": {
            "get": {
                "description": "Find booking by the agent code.",
                "operationId": "ApiNskV1BookingsSearchByAgentCodeGet",
                "summary": "Find booking by the agent code.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "AgentCode",
                        "in": "query",
                        "description": "The agent code (name) that created the booking.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "DomainCode",
                        "in": "query",
                        "description": "The domain code to find.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "FirstName",
                        "in": "query",
                        "description": "The first name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "LastName",
                        "in": "query",
                        "description": "The last name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneticSearch",
                        "in": "query",
                        "description": "Whether or not to do a phonetic search.",
                        "type": "boolean"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByAgentCodeGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByBagTag": {
            "get": {
                "description": "Find booking by baggage tag.",
                "operationId": "ApiNskV1BookingsSearchByBagTagGet",
                "summary": "Find booking by baggage tag.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "BagTag",
                        "in": "query",
                        "description": "One of the OS tag number.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartUtc",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The OS tag end date.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "EndUtc",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The OS tag start date.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByBagTagGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByContact": {
            "get": {
                "description": "Find booking by contact.",
                "operationId": "ApiNskV1BookingsSearchByContactGet",
                "summary": "Find booking by contact.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "FirstName",
                        "in": "query",
                        "description": "The first name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "LastName",
                        "in": "query",
                        "description": "The last name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "RecordLocator",
                        "in": "query",
                        "description": "Record locator being requested.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneNumber",
                        "in": "query",
                        "description": "One of the applied phone numbers to a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "EmailAddress",
                        "in": "query",
                        "description": "The email address of a contact.",
                        "type": "string"
                    },
                    {
                        "name": "SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "OrganizationCode represents the organization associated with the agent who created\r\nthe booking.",
                        "type": "string"
                    },
                    {
                        "name": "OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByContactGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByContactCustomerNumber": {
            "get": {
                "description": "Find booking by contact customer number.",
                "operationId": "ApiNskV1BookingsSearchByContactCustomerNumberGet",
                "summary": "Find booking by contact customer number.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "ContactCustomerNumber",
                        "in": "query",
                        "description": "One of the contacts customer number applied.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "AgentId",
                        "in": "query",
                        "description": "Format - int64. The agent identifier.",
                        "type": "integer"
                    },
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "OrganizationCode represents the organization associated with the agent who created\r\nthe booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByContactCustomerNumberGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByCreditCard": {
            "get": {
                "description": "Find booking by credit card number.",
                "operationId": "ApiNskV1BookingsSearchByCreditCardGet",
                "summary": "Find booking by credit card number.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "CreditCardNumber",
                        "in": "query",
                        "description": "The digits of one of the credit card number applied.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "AgentId",
                        "in": "query",
                        "description": "Format - int64. The agent identifier.",
                        "type": "integer"
                    },
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "OrganizationCode represents the organization associated with the agent who created\r\nthe booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByCreditCardGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByCustomerNumber": {
            "get": {
                "description": "Find booking by customer number.",
                "operationId": "ApiNskV1BookingsSearchByCustomerNumberGet",
                "summary": "Find booking by customer number.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "CustomerNumber",
                        "in": "query",
                        "description": "One of the contacts customer number applied.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "AgentId",
                        "in": "query",
                        "description": "Format - int64. The agent identifier.",
                        "type": "integer"
                    },
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "OrganizationCode represents the organization associated with the agent who created\r\nthe booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByCustomerNumberGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByDate": {
            "get": {
                "description": "Find booking by date.",
                "operationId": "ApiNskV1BookingsSearchByDateGet",
                "summary": "Find booking by date.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "StartDateUtc",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The booking date start search.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "EndDateUtc",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The booking date end search.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByDateGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByDocument": {
            "get": {
                "description": "Find booking by document.",
                "operationId": "ApiNskV1BookingsSearchByDocumentGet",
                "summary": "Find booking by document.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "Document.DocumentNumber",
                        "in": "query",
                        "description": "One of the passengers applied travel document number.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Document.DocumentTypeCode",
                        "in": "query",
                        "description": "One of the passengers applied travel document type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByDocumentGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByEmail": {
            "get": {
                "description": "Find booking by email.",
                "operationId": "ApiNskV1BookingsSearchByEmailGet",
                "summary": "Find booking by email.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "EmailAddress",
                        "in": "query",
                        "description": "The email address of a contact.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "AgentId",
                        "in": "query",
                        "description": "Format - int64. The agent identifier.",
                        "type": "integer"
                    },
                    {
                        "name": "PhoneticSearch",
                        "in": "query",
                        "description": "Whether or not to do a phonetic search.",
                        "type": "boolean"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByEmailGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByLastName": {
            "get": {
                "description": "Find booking by last name.",
                "operationId": "ApiNskV1BookingsSearchByLastNameGet",
                "summary": "Find booking by last name.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "LastName",
                        "in": "query",
                        "description": "The last name of a passenger or contact.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "FirstName",
                        "in": "query",
                        "description": "The first name of a passenger or contact.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneticSearch",
                        "in": "query",
                        "description": "Whether or not to do a phonetic search.",
                        "type": "boolean"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByLastNameGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByPhone": {
            "get": {
                "description": "Find booking by phone.",
                "operationId": "ApiNskV1BookingsSearchByPhoneGet",
                "summary": "Find booking by phone.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "PhoneNumber",
                        "in": "query",
                        "description": "One of the applied phone numbers to a passenger or contact.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "AgentId",
                        "in": "query",
                        "description": "Format - int64. The agent identifier.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "OrganizationCode represents the organization associated with the agent who created\r\nthe booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "Filters.FlightNumber",
                        "in": "query",
                        "description": "Filter by the flight number.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The first journeys departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Destination",
                        "in": "query",
                        "description": "Filter by the destination code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.Origin",
                        "in": "query",
                        "description": "Filter by the departure code.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "Filters.SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByPhoneGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByRecordLocator": {
            "get": {
                "description": "Find booking by record locator.",
                "operationId": "ApiNskV1BookingsSearchByRecordLocatorGet",
                "summary": "Find booking by record locator.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "RecordLocator",
                        "in": "query",
                        "description": "Record locator being requested.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByRecordLocatorGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bookings/searchByThirdPartyRecordLocator": {
            "get": {
                "description": "Find booking by a third party record locator.",
                "operationId": "ApiNskV1BookingsSearchByThirdPartyRecordLocatorGet",
                "summary": "Find booking by a third party record locator.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "SystemCode",
                        "in": "query",
                        "description": "The system code to find.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "RecordLocator",
                        "in": "query",
                        "description": "Record locator being requested.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "AgentId",
                        "in": "query",
                        "description": "Format - int64. The agent identifier.",
                        "type": "integer"
                    },
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "OrganizationCode represents the organization associated with the agent who created\r\nthe booking.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return for the request.",
                        "type": "integer"
                    },
                    {
                        "name": "SourceOrganization",
                        "in": "query",
                        "description": "Filter by the organization associated with the booking. For example the\r\ntravel agency associated with this booking.",
                        "type": "string"
                    },
                    {
                        "name": "OrganizationGroupCode",
                        "in": "query",
                        "description": "Filter by the organization group code to find.",
                        "type": "string"
                    },
                    {
                        "name": "SearchArchive",
                        "in": "query",
                        "description": "Whether or not to search the booking archive.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "401": {
                        "description": "Authorization Not Allowed."
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingsSearchByThirdPartyRecordLocatorGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bundles/applications/{bundleApplicationKey}/details": {
            "get": {
                "description": "See api/nsk/v1/resources/bundles/applications to retrieve the collection of\r\nbundle application resources.",
                "operationId": "ApiNskV1BundlesApplicationsByBundleApplicationKeyDetailsGet",
                "summary": "Retrieves a specific bundle application's details.",
                "tags": [
                    "bundles"
                ],
                "parameters": [
                    {
                        "name": "bundleApplicationKey",
                        "in": "path",
                        "description": "The bundle application key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleApplicationDetails"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BundlesApplications{bundleApplicationKey}DetailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bundles/rules/{bundleRuleCode}/details": {
            "get": {
                "description": "See api/nsk/v1/resources/bundles/rules to retrieve the collection of\r\nbundle rule resources.",
                "operationId": "ApiNskV1BundlesRulesByBundleRuleCodeDetailsGet",
                "summary": "Retrieves the list of bundle applications associated with\r\nthe bundle rule.",
                "tags": [
                    "bundles"
                ],
                "parameters": [
                    {
                        "name": "bundleRuleCode",
                        "in": "path",
                        "description": "The bundle rule code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleApplicationArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BundlesRules{bundleRuleCode}DetailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/bundles/sets/{bundleSetCode}/details": {
            "get": {
                "description": "See api/nsk/v1/resources/bundles/sets to retrieve the collection of\r\nbundle set resources.",
                "operationId": "ApiNskV1BundlesSetsByBundleSetCodeDetailsGet",
                "summary": "Retrieves the list of bundle codes associated with the bundle set.",
                "tags": [
                    "bundles"
                ],
                "parameters": [
                    {
                        "name": "bundleSetCode",
                        "in": "path",
                        "description": "The bundle set code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleSetDetails"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BundlesSets{bundleSetCode}DetailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/collection/{accountCollectionKey}/transactions": {
            "get": {
                "description": "Retrieves the credit transactions based on the account collection key and\r\nthe request data.",
                "operationId": "ApiNskV1CollectionByAccountCollectionKeyTransactionsGet",
                "summary": "Retrieves the credit transactions based on the account collection key and\r\nthe request data.",
                "tags": [
                    "collection"
                ],
                "parameters": [
                    {
                        "name": "accountCollectionKey",
                        "in": "path",
                        "description": "The account collection key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Collection{accountCollectionKey}TransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/currency/converter": {
            "get": {
                "description": "Calculates currency conversions.",
                "operationId": "ApiNskV1CurrencyConverterGet",
                "summary": "Calculates currency conversions.",
                "tags": [
                    "currency"
                ],
                "parameters": [
                    {
                        "name": "FromCurrencyCode",
                        "in": "query",
                        "description": "The currency code that the amount is currently in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ToCurrencyCode",
                        "in": "query",
                        "description": "The currency code we want the amount converted to.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Amount",
                        "in": "query",
                        "description": "Format - double. The amount to be converted. This will be in the FromCurrencyCode currency.",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CurrencyConversion"
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1CurrencyConverterGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/fareRules/{fareKey}": {
            "get": {
                "description": "Gets the fare rules from the server based on a fare key.",
                "operationId": "ApiNskV1FareRulesByFareKeyGet",
                "summary": "Gets the fare rules from the server based on a fare key.",
                "tags": [
                    "fareRules"
                ],
                "parameters": [
                    {
                        "name": "fareKey",
                        "in": "path",
                        "description": "The unique fare key to get rule for.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FareRule"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1FareRules{fareKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/v1/graph": {
            "post": {
                "description": "Invokes a graph query and returns the response.",
                "operationId": "ApiV1GraphPost",
                "summary": "Invokes a graph query and returns the response.",
                "tags": [
                    "graph"
                ],
                "parameters": [
                    {
                        "name": "graphQlQuery",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/GraphQlQuery"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/nsk/v1/graph/{queryName}": {
            "post": {
                "description": "When a graph query is configured on the server under Resource Management it allows your payload sizes to be even smaller.",
                "operationId": "ApiNskV1GraphByQueryNamePost",
                "summary": "Invokes a graph query configured in utilities.",
                "tags": [
                    "graph"
                ],
                "parameters": [
                    {
                        "name": "queryName",
                        "in": "path",
                        "description": "The query name matching your resource management configuration.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cachedResults",
                        "in": "query",
                        "description": "True to return cached results.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "variables",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Variables"
                        },
                        "description": "The json matching your json variables in your graph query."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/nsk/v1/manifest": {
            "get": {
                "description": "Gets the manifest trip information response list for the specified \r\nmanifest trip information search request.",
                "operationId": "ApiNskV1ManifestGet",
                "summary": "Gets the manifest trip information response list for the specified \r\nmanifest trip information search request.",
                "tags": [
                    "manifest"
                ],
                "parameters": [
                    {
                        "name": "BeginDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date of the trip information search.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "The departure station.",
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "The arrival station.",
                        "type": "string"
                    },
                    {
                        "name": "Identifier",
                        "in": "query",
                        "description": "The transportation identifier, such as a flight number.",
                        "type": "string"
                    },
                    {
                        "name": "CarrierCode",
                        "in": "query",
                        "description": "The carrier code.",
                        "type": "string"
                    },
                    {
                        "name": "FlightType",
                        "in": "query",
                        "description": "The flight type.",
                        "type": "string",
                        "enum": [
                            "All",
                            "NonStop",
                            "Through",
                            "Direct",
                            "Connect"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TripInformationResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ManifestGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/manifest/{legKey}": {
            "post": {
                "description": "Gets the manifest for the specified leg.",
                "operationId": "ApiNskV1ManifestByLegKeyPost",
                "summary": "Gets the manifest for the specified leg.",
                "tags": [
                    "manifest"
                ],
                "parameters": [
                    {
                        "name": "legKey",
                        "in": "path",
                        "description": "The manifest leg key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "manifestRequestBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ManifestRequestBase"
                        },
                        "description": "The manifest request"
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Manifest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Manifest{legKey}Post404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/manifest/{legKey}/passengerDetails": {
            "get": {
                "description": "Gets the passenger details for the specified leg.",
                "operationId": "ApiNskV1ManifestByLegKeyPassengerDetailsGet",
                "summary": "Gets the passenger details for the specified leg.",
                "tags": [
                    "manifest"
                ],
                "parameters": [
                    {
                        "name": "legKey",
                        "in": "path",
                        "description": "The leg key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerDetails"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Manifest{legKey}PassengerDetailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/manifest/{legKey}/passengerSeatAssignments": {
            "get": {
                "description": "Gets a list of seat assignment reports for the specified leg.",
                "operationId": "ApiNskV1ManifestByLegKeyPassengerSeatAssignmentsGet",
                "summary": "Gets a list of seat assignment reports for the specified leg.",
                "tags": [
                    "manifest"
                ],
                "parameters": [
                    {
                        "name": "legKey",
                        "in": "path",
                        "description": "The leg key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerSeatAssignmentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Manifest{legKey}PassengerSeatAssignmentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations/groups": {
            "get": {
                "description": "Retrieves the organization groups.",
                "operationId": "ApiNskV1OrganizationsGroupsGet",
                "summary": "Retrieves the organization groups.",
                "tags": [
                    "organizations"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/OrganizationGroupArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1OrganizationsGroupsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations/groups/{organizationGroupCode}": {
            "get": {
                "description": "Retrieves the details of an organization group.",
                "operationId": "ApiNskV1OrganizationsGroupsByOrganizationGroupCodeGet",
                "summary": "Retrieves the details of an organization group.",
                "tags": [
                    "organizations"
                ],
                "parameters": [
                    {
                        "name": "organizationGroupCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/OrganizationGroupDetails"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1OrganizationsGroups{organizationGroupCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2": {
            "post": {
                "description": "Requires agent permissions.\r\nThe organization code is a generic code for all of the organization types. Each individual type has its own code and validation.\r\nIf the organization status is not pending the organization code should follow these validation rules based on type:\r\n<ul><li>Third Party: 3 to 10 characters in length with alphanumeric values.</li><li>Travel Agency: 7 to 10 characters in length with numeric values.</li><li>Carrier: 2 to 3 characters in length with alphanumeric values.</li></ul>",
                "operationId": "ApiNskV1Organizations2Post",
                "summary": "Create a new organization.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/OrganizationCreateRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Organizationv2"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/organizations2": {
            "get": {
                "description": "Searches for organizations.",
                "operationId": "ApiNskV2Organizations2Get",
                "summary": "Searches for organizations.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "Organization type.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Default",
                            "Master",
                            "Carrier",
                            "TravelAgency",
                            "ThirdParty"
                        ]
                    },
                    {
                        "name": "Status",
                        "in": "query",
                        "description": "The organization status.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Default",
                            "Active",
                            "Cancelled",
                            "Pending"
                        ]
                    },
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "The organization code.",
                        "type": "string"
                    },
                    {
                        "name": "ParentOrganizationCode",
                        "in": "query",
                        "description": "The parent organization code.",
                        "type": "string"
                    },
                    {
                        "name": "CompanyName",
                        "in": "query",
                        "description": "The organization company name.",
                        "type": "string"
                    },
                    {
                        "name": "City",
                        "in": "query",
                        "description": "The organization company city.",
                        "type": "string"
                    },
                    {
                        "name": "PostalCode",
                        "in": "query",
                        "description": "The organization company postal code.",
                        "type": "string"
                    },
                    {
                        "name": "PagedItemIndex",
                        "in": "query",
                        "description": "Format - int64. Used to specify the index for skipping values when paging.",
                        "type": "integer"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the maximum results to return.",
                        "type": "integer"
                    },
                    {
                        "name": "MatchCriteria.OrganizationCode",
                        "in": "query",
                        "description": "The type of string search for organization code.",
                        "type": "string",
                        "enum": [
                            "StartsWith",
                            "EndsWith",
                            "Contains",
                            "ExactMatch"
                        ]
                    },
                    {
                        "name": "MatchCriteria.ParentOrganizationCode",
                        "in": "query",
                        "description": "The  type of string search for parent organization code.",
                        "type": "string",
                        "enum": [
                            "StartsWith",
                            "EndsWith",
                            "Contains",
                            "ExactMatch"
                        ]
                    },
                    {
                        "name": "MatchCriteria.CompanyName",
                        "in": "query",
                        "description": "The  type of string search for organization company name.",
                        "type": "string",
                        "enum": [
                            "StartsWith",
                            "EndsWith",
                            "Contains",
                            "ExactMatch"
                        ]
                    },
                    {
                        "name": "MatchCriteria.City",
                        "in": "query",
                        "description": "The  type of string search for organization company city.",
                        "type": "string",
                        "enum": [
                            "StartsWith",
                            "EndsWith",
                            "Contains",
                            "ExactMatch"
                        ]
                    },
                    {
                        "name": "MatchCriteria.PostalCode",
                        "in": "query",
                        "description": "The  type of string search for organization company postal code.",
                        "type": "string",
                        "enum": [
                            "StartsWith",
                            "EndsWith",
                            "Contains",
                            "ExactMatch"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/OrganizationRecordArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Organizations2Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}": {
            "get": {
                "description": "Retrieves the organization.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeGet",
                "summary": "Retrieves the organization.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Organizationv2"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Requires agent permissions.\r\nThe organization code is a generic code for all of the organization types. Each individual type has its own code and validation.\r\nIf the organization status is not pending the organization code should follow these validation rules based on type:\r\n<ul><li>Third Party: 3 to 10 characters in length with alphanumeric values.</li><li>Travel Agency: 7 to 10 characters in length with numeric values.</li><li>Carrier: 2 to 3 characters in length with alphanumeric values.</li></ul>",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodePut",
                "summary": "Updates an organization.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "organizationEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/OrganizationEditRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Organizationv2"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Requires agent permissions.\r\nThe organization code is a generic code for all of the organization types. Each individual type has its own code and validation.\r\nIf the organization status is not pending the organization code should follow these validation rules based on type:\r\n<ul><li>Third Party: 3 to 10 characters in length with alphanumeric values.</li><li>Travel Agency: 7 to 10 characters in length with numeric values.</li><li>Carrier: 2 to 3 characters in length with alphanumeric values.</li></ul>",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodePatch",
                "summary": "Updates an organization.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[OrganizationEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[OrganizationEditRequest]"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Organizationv2"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/account": {
            "get": {
                "description": "Retrieves the organization account and collections based on the organization code.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeAccountGet",
                "summary": "Retrieves the organization account and collections based on the organization code.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "description": "The organization code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/OrganizationAccount"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}AccountGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates an organization account based on the organization code.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeAccountPost",
                "summary": "Creates an organization account based on the organization code.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "description": "The organization code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "createOrganizationAccountRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationAccountRequest"
                        },
                        "description": "The create organization account request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}AccountPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}AccountPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/account/status": {
            "put": {
                "description": "Updates the organization account status.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeAccountStatusPut",
                "summary": "Updates the organization account status.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "description": "The organization code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The allowed account status.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Open",
                            "Closed",
                            "AgencyInactive",
                            "Unknown"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}AccountStatusPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}AccountStatusPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/account/transactions": {
            "get": {
                "description": "Retrieves the organization account transactions based on the organization code\r\nand data in the request.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeAccountTransactionsGet",
                "summary": "Retrieves the organization account transactions based on the organization code\r\nand data in the request.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "description": "The organization code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}AccountTransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates account transactions based on data in the request and the\r\norganization code.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeAccountTransactionsPost",
                "summary": "Creates account transactions based on data in the request and the\r\norganization code.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "description": "The organization code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "organizationTransactionRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/OrganizationTransactionRequest"
                        },
                        "description": "The transaction request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}AccountTransactionsPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}AccountTransactionsPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/commissionRates": {
            "post": {
                "description": "Create a commission rate.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeCommissionRatesPost",
                "summary": "Create a commission rate.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "organizationCommissionRate",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/OrganizationCommissionRate"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}CommissionRatesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/commissionRates/{commissionRateCode}": {
            "get": {
                "description": "Get a commission rate.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeG",
                "summary": "Get a commission rate.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "commissionRateCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/OrganizationCommissionRate"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Delete a commission rate.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeCommissionRatesByCommissionRateCodeD",
                "summary": "Delete a commission rate.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "commissionRateCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}CommissionRates{commissionRateCode}Delete201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/company/phoneNumbers": {
            "post": {
                "description": "Create a company phone number.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersPost",
                "summary": "Create a company phone number.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumber",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PhoneNumber"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbersPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/company/phoneNumbers/{phoneNumberType}": {
            "put": {
                "description": "Updates a company phone number.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberType",
                "summary": "Updates a company phone number.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumberType",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Other",
                            "Home",
                            "Work",
                            "Mobile",
                            "Fax"
                        ]
                    },
                    {
                        "name": "phoneNumberBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PhoneNumberBase"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbers{phoneNumberType}Put200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a company phone number.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeCompanyPhoneNumbersByPhoneNumberType-1",
                "summary": "Deletes a company phone number.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumberType",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Other",
                            "Home",
                            "Work",
                            "Mobile",
                            "Fax"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbers{phoneNumberType}Delete204TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/contact/phoneNumbers": {
            "post": {
                "description": "Create a contact phone number.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersPost",
                "summary": "Create a contact phone number.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumber",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PhoneNumber"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}ContactPhoneNumbersPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/contact/phoneNumbers/{phoneNumberType}": {
            "put": {
                "description": "Updates a contact phone number.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberType",
                "summary": "Updates a contact phone number.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumberType",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Other",
                            "Home",
                            "Work",
                            "Mobile",
                            "Fax"
                        ]
                    },
                    {
                        "name": "phoneNumberBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PhoneNumberBase"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}ContactPhoneNumbers{phoneNumberType}Put200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a contact phone number.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeContactPhoneNumbersByPhoneNumberType-1",
                "summary": "Deletes a contact phone number.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "phoneNumberType",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Other",
                            "Home",
                            "Work",
                            "Mobile",
                            "Fax"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}ContactPhoneNumbers{phoneNumberType}Delete204TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/externalAccounts": {
            "post": {
                "description": "Create an external account.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeExternalAccountsPost",
                "summary": "Create an external account.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "organizationExternalAccountRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/OrganizationExternalAccountRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}ExternalAccountsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/organizations2/{organizationCode}/externalAccounts/{externalAccountKey}": {
            "get": {
                "description": "Get an external account.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKey",
                "summary": "Get an external account.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "externalAccountKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/OrganizationExternalAccountv2"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Delete an external account.",
                "operationId": "ApiNskV1Organizations2ByOrganizationCodeExternalAccountsByExternalAccountKey-1",
                "summary": "Delete an external account.",
                "tags": [
                    "organizations2"
                ],
                "parameters": [
                    {
                        "name": "organizationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "externalAccountKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Organizations2{organizationCode}ExternalAccounts{externalAccountKey}Delete201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons": {
            "get": {
                "description": "Search person records.",
                "operationId": "ApiNskV1PersonsGet",
                "summary": "Search person records.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Include active person records only.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "FirstName",
                        "in": "query",
                        "description": "The person's first name to seach by.",
                        "type": "string"
                    },
                    {
                        "name": "LastName",
                        "in": "query",
                        "description": "The person's last name to search by.",
                        "type": "string"
                    },
                    {
                        "name": "FirstNameMatching",
                        "in": "query",
                        "description": "The matching criteria for the person's first name.",
                        "type": "string",
                        "enum": [
                            "StartsWith",
                            "EndsWith",
                            "Contains",
                            "ExactMatch"
                        ]
                    },
                    {
                        "name": "CustomerNumber",
                        "in": "query",
                        "description": "The person's customer number.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneNumber",
                        "in": "query",
                        "description": "The phone number to search by.",
                        "type": "string"
                    },
                    {
                        "name": "EmailAddress",
                        "in": "query",
                        "description": "The email address to search by.",
                        "type": "string"
                    },
                    {
                        "name": "ProgramNumber",
                        "in": "query",
                        "description": "The program number to seach by.",
                        "type": "string"
                    },
                    {
                        "name": "ProgramCode",
                        "in": "query",
                        "description": "The program code to search by.",
                        "type": "string"
                    },
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "The person type to search by.",
                        "type": "string",
                        "enum": [
                            "None",
                            "Customer",
                            "Agent"
                        ]
                    },
                    {
                        "name": "NationalIdNumber",
                        "in": "query",
                        "description": "The national ID number to search by.",
                        "type": "string"
                    },
                    {
                        "name": "NationalIdNumberMatching",
                        "in": "query",
                        "description": "The matching criteria for the national ID number.",
                        "type": "string",
                        "enum": [
                            "StartsWith",
                            "EndsWith",
                            "Contains",
                            "ExactMatch"
                        ]
                    },
                    {
                        "name": "ReturnCount",
                        "in": "query",
                        "description": "Format - int32. The number of results to return.",
                        "type": "integer"
                    },
                    {
                        "name": "LastPersonKey",
                        "in": "query",
                        "description": "The last person key (used for paging).",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonRecordArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1PersonsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new person record.",
                "operationId": "ApiNskV1PersonsPost",
                "summary": "Creates a new person record.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCreateRequest"
                        },
                        "description": "The person create request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1PersonsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}": {
            "get": {
                "description": "Retrieves a specific person by key.",
                "operationId": "ApiNskV1PersonsByPersonKeyGet",
                "summary": "Retrieves a specific person by key.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates the person record basic information.",
                "operationId": "ApiNskV1PersonsByPersonKeyPut",
                "summary": "Updates the person record basic information.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonEditRequest"
                        },
                        "description": "The person edit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a person by setting the record to terminated.",
                "operationId": "ApiNskV1PersonsByPersonKeyDelete",
                "summary": "Deletes a person by setting the record to terminated.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Only need to send in the data that is being requested to be updated.",
                "operationId": "ApiNskV1PersonsByPersonKeyPatch",
                "summary": "Patches the person records basic information.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonEditRequest]"
                        },
                        "description": "The person patch request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/account": {
            "get": {
                "description": "Retrieves the person account and credits based on the person key.",
                "operationId": "ApiNskV1PersonsByPersonKeyAccountGet",
                "summary": "Retrieves the person account and credits based on the person key.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates the person account based on the person key and\r\ndata in the request.",
                "operationId": "ApiNskV1PersonsByPersonKeyAccountPost",
                "summary": "Creates the person account based on the person key and\r\ndata in the request.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "createAccountRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CreateAccountRequest"
                        },
                        "description": "The create account request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/account/collection": {
            "post": {
                "description": "This endpoint will create a new account collection and a transaction if no account\r\ntransaction exists or no matching collection is found.  An account collection is unique\r\nbased on the transaction code and the expiration date.  If a matching account collection\r\nis found, a transaction for that collection is generated and the account collection will\r\nbe updated.\r\nSee /api/nsk/v1/resources/accountTransactionCodes for a list of available account transaction\r\ncodes.",
                "operationId": "ApiNskV1PersonsByPersonKeyAccountCollectionPost",
                "summary": "Creates an account collection based on the person key and data in the request.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "accountCollectionRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AccountCollectionRequest"
                        },
                        "description": "The create account collection request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountCollectionPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountCollectionPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/account/collection/{accountCollectionKey}/transactions": {
            "get": {
                "description": "Retrieves the person account collection transactions based on the person key,\r\nthe account collection key, and data in the request.",
                "operationId": "ApiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransaction",
                "summary": "Retrieves the person account collection transactions based on the person key,\r\nthe account collection key, and data in the request.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "accountCollectionKey",
                        "in": "path",
                        "description": "The account collection key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "This endpoint will add a transaction to an existing account collection.\r\nIf there are no account collections, or the account collection key does\r\nnot match an existing collection, the request will fail.\r\nTo add a new account collection, see /api/nsk/v1/persons/{personKey}/account/collection.",
                "operationId": "ApiNskV1PersonsByPersonKeyAccountCollectionByAccountCollectionKeyTransaction-1",
                "summary": "Creates an account collection transaction based on the person key, the\r\naccount collection key, and data in the request.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "accountCollectionKey",
                        "in": "path",
                        "description": "The account collection key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transactionRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TransactionRequest"
                        },
                        "description": "The create transaction request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsPost201TextPlainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/account/status": {
            "put": {
                "description": "Updates the person account status.",
                "operationId": "ApiNskV1PersonsByPersonKeyAccountStatusPut",
                "summary": "Updates the person account status.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The new account status.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Open",
                            "Closed",
                            "AgencyInactive",
                            "Unknown"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountStatusPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountStatusPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/account/transactions": {
            "get": {
                "description": "Retrieves all transactions for every collection.",
                "operationId": "ApiNskV1PersonsByPersonKeyAccountTransactionsGet",
                "summary": "Retrieves all transactions for every collection.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AccountTransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/addresses": {
            "get": {
                "description": "Gets the collection of addresses for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAddressesGet",
                "summary": "Gets the collection of addresses for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAddressArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AddressesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAddressesPost",
                "summary": "Creates a new address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAddressCreateRequest"
                        },
                        "description": "The new address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AddressesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/addresses/{personAddressKey}": {
            "get": {
                "description": "Gets a specific address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyGet",
                "summary": "Gets a specific address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAddress"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Addresses{personAddressKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPut",
                "summary": "Updates a specific address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAddressEditRequest"
                        },
                        "description": "The modified address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Addresses{personAddressKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Addresses{personAddressKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyDelete",
                "summary": "Deletes a specific address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Addresses{personAddressKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAddressesByPersonAddressKeyPatch",
                "summary": "Patches a specific address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonAddressEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonAddressEditRequest]"
                        },
                        "description": "The patched address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Addresses{personAddressKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Addresses{personAddressKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/aliases": {
            "get": {
                "description": "Gets the collection of aliases for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAliasesGet",
                "summary": "Gets the collection of aliases for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAliasArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AliasesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new alias for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAliasesPost",
                "summary": "Creates a new alias for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAliasRequest"
                        },
                        "description": "The new alias."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}AliasesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/aliases/{personAliasKey}": {
            "get": {
                "description": "Gets a specific alias for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyGet",
                "summary": "Gets a specific alias for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAlias"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Aliases{personAliasKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific alias for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPut",
                "summary": "Updates a specific alias for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAliasRequest"
                        },
                        "description": "The modified alias."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Aliases{personAliasKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Aliases{personAliasKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific alias for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyDelete",
                "summary": "Deletes a specific alias for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Aliases{personAliasKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific alias for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyAliasesByPersonAliasKeyPatch",
                "summary": "Patches a specific alias for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonAliasRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonAliasRequest]"
                        },
                        "description": "The patched alias."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Aliases{personAliasKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Aliases{personAliasKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/comments": {
            "get": {
                "description": "Gets the collection of comments for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyCommentsGet",
                "summary": "Gets the collection of comments for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonCommentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}CommentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new comment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyCommentsPost",
                "summary": "Creates a new comment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCommentRequest"
                        },
                        "description": "The new comment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}CommentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/comments/{personCommentKey}": {
            "get": {
                "description": "Gets a specific comment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyGet",
                "summary": "Gets a specific comment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique comment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonComment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Comments{personCommentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific comment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPut",
                "summary": "Updates a specific comment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCommentRequest"
                        },
                        "description": "The modified comment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Comments{personCommentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Comments{personCommentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific comment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyDelete",
                "summary": "Deletes a specific comment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Comments{personCommentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific comment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyCommentsByPersonCommentKeyPatch",
                "summary": "Patches a specific comment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonCommentRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonCommentRequest]"
                        },
                        "description": "The patched comment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Comments{personCommentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Comments{personCommentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/emails": {
            "get": {
                "description": "Gets the collection of email addresses for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyEmailsGet",
                "summary": "Gets the collection of email addresses for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonEmailArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}EmailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new email address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyEmailsPost",
                "summary": "Creates a new email address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonEmailCreateRequest"
                        },
                        "description": "The new email address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}EmailsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/emails/{personEmailAddressKey}": {
            "get": {
                "description": "Gets a specific email address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyGet",
                "summary": "Gets a specific email address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique email address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonEmail"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific email address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPut",
                "summary": "Updates a specific email address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonEmailEditRequest"
                        },
                        "description": "The modified email address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific email address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyDelete",
                "summary": "Deletes a specific email address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific email address for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyEmailsByPersonEmailAddressKeyPatch",
                "summary": "Patches a specific email address for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonEmailEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonEmailEditRequest]"
                        },
                        "description": "The patched email address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/information": {
            "get": {
                "description": "Gets all information from the logged in user's person.",
                "operationId": "ApiNskV1PersonsByPersonKeyInformationGet",
                "summary": "Gets all information from the logged in user's person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}InformationGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new information on the logged in user's person.",
                "operationId": "ApiNskV1PersonsByPersonKeyInformationPost",
                "summary": "Creates a new information on the logged in user's person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationCreateRequest"
                        },
                        "description": "The new information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}InformationPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/information/{personInformationKey}": {
            "get": {
                "description": "Gets a specific information from the logged in user's person.",
                "operationId": "ApiNskV1PersonsByPersonKeyInformationByPersonInformationKeyGet",
                "summary": "Gets a specific information from the logged in user's person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonInformation"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Information{personInformationKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific information on the logged in user's person.",
                "operationId": "ApiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPut",
                "summary": "Updates a specific information on the logged in user's person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationEditRequest"
                        },
                        "description": "The modified information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Information{personInformationKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Information{personInformationKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific information on the logged in user's person.",
                "operationId": "ApiNskV1PersonsByPersonKeyInformationByPersonInformationKeyDelete",
                "summary": "Deletes a specific information on the logged in user's person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Information{personInformationKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific information on the logged in user's person.",
                "operationId": "ApiNskV1PersonsByPersonKeyInformationByPersonInformationKeyPatch",
                "summary": "Patches a specific information on the logged in user's person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonInformationEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonInformationEditRequest]"
                        },
                        "description": "The patched information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Information{personInformationKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Information{personInformationKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/phoneNumbers": {
            "get": {
                "description": "Gets the collection of phone numbers for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPhoneNumbersGet",
                "summary": "Gets the collection of phone numbers for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumberArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PhoneNumbersGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new phone number for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPhoneNumbersPost",
                "summary": "Creates a new phone number for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumberRequest"
                        },
                        "description": "The new phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PhoneNumbersPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/phoneNumbers/{personPhoneNumberKey}": {
            "get": {
                "description": "Gets a specific phone number for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyGet",
                "summary": "Gets a specific phone number for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique phone number key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumber"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific phone number for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPut",
                "summary": "Updates a specific phone number for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumberRequest"
                        },
                        "description": "The modified phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific phone number for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyDelete",
                "summary": "Deletes a specific phone number for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific phone number for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPhoneNumbersByPersonPhoneNumberKeyPatch",
                "summary": "Patches a specific phone number for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonPhoneNumberRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonPhoneNumberRequest]"
                        },
                        "description": "The patched phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/preferences": {
            "get": {
                "description": "Gets all preferences for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPreferencesGet",
                "summary": "Gets all preferences for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPreferenceArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PreferencesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new preference for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPreferencesPost",
                "summary": "Creates a new preference for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPreferenceCreateRequest"
                        },
                        "description": "The new preference."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}PreferencesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/preferences/{personPreferenceKey}": {
            "get": {
                "description": "Gets a specific preference for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyGet",
                "summary": "Gets a specific preference for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPreference"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific preference for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPut",
                "summary": "Updates a specific preference for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPreferenceEditRequest"
                        },
                        "description": "The modified preference."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific preference for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyDelete",
                "summary": "Deletes a specific preference for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific preference for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyPreferencesByPersonPreferenceKeyPatch",
                "summary": "Patches a specific preference for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonPreferenceEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonPreferenceEditRequest]"
                        },
                        "description": "The patched preference."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/programs": {
            "get": {
                "description": "Gets the collection of programs for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyProgramsGet",
                "summary": "Gets the collection of programs for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgramArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}ProgramsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new program for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyProgramsPost",
                "summary": "Creates a new program for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCustomerProgramCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgramCreateRequest"
                        },
                        "description": "The new program."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}ProgramsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/programs/{personProgramKey}": {
            "get": {
                "description": "Gets a specific program for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyGet",
                "summary": "Gets a specific program for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique program key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgram"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Programs{personProgramKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific program for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPut",
                "summary": "Updates a specific program for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person program key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCustomerProgramEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgramEditRequest"
                        },
                        "description": "The modified program."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Programs{personProgramKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Programs{personProgramKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific program for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyDelete",
                "summary": "Deletes a specific program for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person program key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Programs{personProgramKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific program for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyProgramsByPersonProgramKeyPatch",
                "summary": "Patches a specific program for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person program key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonCustomerProgramEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonCustomerProgramEditRequest]"
                        },
                        "description": "The patched program."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Programs{personProgramKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}Programs{personProgramKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/storedPayments": {
            "get": {
                "description": "Gets the collection of stored payments for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyStoredPaymentsGet",
                "summary": "Gets the collection of stored payments for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPaymentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}StoredPaymentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new stored payment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyStoredPaymentsPost",
                "summary": "Creates a new stored payment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPaymentRequest"
                        },
                        "description": "The new stored payment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}StoredPaymentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/storedPayments/{personStoredPaymentKey}": {
            "get": {
                "description": "Gets a specific stored payment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyGet",
                "summary": "Gets a specific stored payment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique stored payment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPayment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific stored payment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPut",
                "summary": "Updates a specific stored payment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPaymentRequest"
                        },
                        "description": "The modified stored payment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific stored payment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyDelete",
                "summary": "Deletes a specific stored payment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific stored payment for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyStoredPaymentsByPersonStoredPaymentKeyPatch",
                "summary": "Patches a specific stored payment for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonStoredPaymentUpdateRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonStoredPaymentUpdateRequest]"
                        },
                        "description": "The patched stored payment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/travelDocuments": {
            "get": {
                "description": "Gets the collection of travel documents for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyTravelDocumentsGet",
                "summary": "Gets the collection of travel documents for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonTravelDocumentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}TravelDocumentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new travel document for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyTravelDocumentsPost",
                "summary": "Creates a new travel document for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonTravelDocumentRequest"
                        },
                        "description": "The new travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}TravelDocumentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/persons/{personKey}/travelDocuments/{personTravelDocumentKey}": {
            "get": {
                "description": "Gets a specific travel document for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyGet",
                "summary": "Gets a specific travel document for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonTravelDocument"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}TravelDocuments{personTravelDocumentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific travel document for a specific person.",
                "operationId": "ApiNskV1PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyDelete",
                "summary": "Deletes a specific travel document for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Persons{personKey}TravelDocuments{personTravelDocumentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/persons/{personKey}/travelDocuments/{personTravelDocumentKey}": {
            "put": {
                "description": "Updates a specific travel document for a specific person.",
                "operationId": "ApiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPut",
                "summary": "Updates a specific travel document for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentEditRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TravelDocumentEditRequestv2"
                        },
                        "description": "The modified travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific travel document for a specific person.",
                "operationId": "ApiNskV2PersonsByPersonKeyTravelDocumentsByPersonTravelDocumentKeyPatch",
                "summary": "Patches a specific travel document for a specific person.",
                "tags": [
                    "persons"
                ],
                "parameters": [
                    {
                        "name": "personKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[TravelDocumentEditRequestv2]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[TravelDocumentEditRequestv2]"
                        },
                        "description": "The patched travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/promotions": {
            "get": {
                "description": "Gets promotions based on data in the request.",
                "operationId": "ApiNskV1PromotionsGet",
                "summary": "Gets promotions based on data in the request.",
                "tags": [
                    "promotions"
                ],
                "parameters": [
                    {
                        "name": "PromotionCode",
                        "in": "query",
                        "description": "The promotion code.",
                        "type": "string"
                    },
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "The organization code.",
                        "type": "string"
                    },
                    {
                        "name": "EffectiveDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The effective date of the promotion.",
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The requested culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PromotionBaseArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1PromotionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/promotions/{promotionCode}": {
            "get": {
                "description": "Gets a promotion based on the promotion code.",
                "operationId": "ApiNskV1PromotionsByPromotionCodeGet",
                "summary": "Gets a promotion based on the promotion code.",
                "tags": [
                    "promotions"
                ],
                "parameters": [
                    {
                        "name": "promotionCode",
                        "in": "path",
                        "description": "The promotion code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Promotion"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Promotions{promotionCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/promotions/{promotionCode}/validate": {
            "get": {
                "description": "This validates the promotion code based on the logged-in user if the \r\norganization code is not provided.",
                "operationId": "ApiNskV1PromotionsByPromotionCodeValidateGet",
                "summary": "Evaluates a promotion code and optional organization code to determine if \r\nthe associated promotion is valid or not.",
                "tags": [
                    "promotions"
                ],
                "parameters": [
                    {
                        "name": "promotionCode",
                        "in": "path",
                        "description": "The promotion code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "organizationCode",
                        "in": "query",
                        "description": "The optional organization code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Promotions{promotionCode}ValidateGet200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/queues/bookings": {
            "get": {
                "description": "This action requires a session token.",
                "operationId": "ApiNskV2QueuesBookingsGet",
                "summary": "Gets the list of queues available.",
                "tags": [
                    "queues"
                ],
                "parameters": [
                    {
                        "name": "QueueName",
                        "in": "query",
                        "description": "Queue name.",
                        "type": "string"
                    },
                    {
                        "name": "QueueCode",
                        "in": "query",
                        "description": "Queue code.",
                        "type": "string"
                    },
                    {
                        "name": "QueueCategoryCode",
                        "in": "query",
                        "description": "Queue category code.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The default page size.",
                        "type": "integer"
                    },
                    {
                        "name": "LastPageIndex",
                        "in": "query",
                        "description": "Format - int32. Used to specify the index of the last set of records retrieved\r\nwhen paging is performed. This is optional.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned successfully.",
                        "schema": {
                            "$ref": "#/definitions/QueueResults"
                        }
                    },
                    "400": {
                        "description": "No user found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2QueuesBookingsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/queues/bookings/{bookingQueueCode}/items/{bookingQueueItemKey}": {
            "put": {
                "description": "The booking queue proxy and service model do not currently support getting the queue code\r\nthe item was moved to. Therefore, it is not possible at this time to provide a link to \r\naccess the item on a different queue or a configurable response containing the queue object.   \r\nAdditionally, the proxy and service model do not allow for getting a particular item within a \r\nqueue.",
                "operationId": "ApiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyPut",
                "summary": "Moves to a different queue.",
                "tags": [
                    "queues"
                ],
                "parameters": [
                    {
                        "name": "bookingQueueCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bookingQueueItemKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moveBookingQueueItemBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MoveBookingQueueItemBase"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1QueuesBookings{bookingQueueCode}Items{bookingQueueItemKey}Put200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Removes booking queue items from the specified queue.",
                "operationId": "ApiNskV1QueuesBookingsByBookingQueueCodeItemsByBookingQueueItemKeyDelete",
                "summary": "Removes booking queue items from the specified queue.",
                "tags": [
                    "queues"
                ],
                "parameters": [
                    {
                        "name": "bookingQueueCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "bookingQueueItemKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deleteBookingQueueItemBaseRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeleteBookingQueueItemBaseRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1QueuesBookings{bookingQueueCode}Items{bookingQueueItemKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/queues/bookings/{bookingQueueCode}/next": {
            "get": {
                "description": "This will not delete the item from the queue.\r\nThis action requires a session token.",
                "operationId": "ApiNskV1QueuesBookingsByBookingQueueCodeNextGet",
                "summary": "Gets the next item in the booking queue.",
                "tags": [
                    "queues"
                ],
                "parameters": [
                    {
                        "name": "bookingQueueCode",
                        "in": "path",
                        "description": "booking queue code to get next item from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SubQueueCode",
                        "in": "query",
                        "description": "The optional sub queue code.",
                        "type": "string"
                    },
                    {
                        "name": "StartDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Begin priority date.",
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). End priority date.",
                        "type": "string"
                    },
                    {
                        "name": "Password",
                        "in": "query",
                        "description": "The Password needed to access the queue.  Required if queue\r\nis set to password-protected in Sky Manager.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned successfully.",
                        "schema": {
                            "$ref": "#/definitions/BookingQueueItemArray"
                        }
                    },
                    "400": {
                        "description": "No user found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1QueuesBookings{bookingQueueCode}NextGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/queues/travel": {
            "post": {
                "description": "This action requires a session token.",
                "operationId": "ApiNskV1QueuesTravelPost",
                "summary": "Creates a new travel queue entry.",
                "tags": [
                    "queues"
                ],
                "parameters": [
                    {
                        "name": "travelQueueItemRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TravelQueueItemRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1QueuesTravelPost201TextPlainResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, an agent login is required."
                    },
                    "403": {
                        "description": "A session is required."
                    },
                    "404": {
                        "description": "No user found in state."
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/queues/travel/{travelQueueCode}/next": {
            "get": {
                "description": "This will delete the item from the queue.\r\nThis action requires a session token.",
                "operationId": "ApiNskV1QueuesTravelByTravelQueueCodeNextGet",
                "summary": "Pops the next item in the travel queue.",
                "tags": [
                    "queues"
                ],
                "parameters": [
                    {
                        "name": "travelQueueCode",
                        "in": "path",
                        "description": "Travel queue code to get next item from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subQueueCode",
                        "in": "query",
                        "description": "Sub queue code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned successfully.",
                        "schema": {
                            "$ref": "#/definitions/DequeueTravelSummary"
                        }
                    },
                    "400": {
                        "description": "No user found in web session."
                    },
                    "403": {
                        "description": "A web session is required."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1QueuesTravel{travelQueueCode}NextGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/v1/redirect": {
            "get": {
                "description": "Creates redirect based on the defined parameters passed in.",
                "operationId": "ApiV1RedirectGet",
                "summary": "Creates redirect based on the defined parameters passed in.",
                "tags": [
                    "redirect"
                ],
                "parameters": [
                    {
                        "name": "domain",
                        "in": "query",
                        "description": "The desired domain. E.g. www.google.com.",
                        "type": "string"
                    },
                    {
                        "name": "scheme",
                        "in": "query",
                        "description": "The desired scheme (protocol). Valie schemes are http, https, fiel, ftp, gopher, mailto, and news.",
                        "type": "string"
                    },
                    {
                        "name": "port",
                        "in": "query",
                        "description": "Format - int32. The desired port number. E.g. 80.",
                        "type": "integer"
                    },
                    {
                        "name": "path",
                        "in": "query",
                        "description": "The path of the url including leading forward slash (/). E.g. mail.",
                        "type": "string"
                    },
                    {
                        "name": "param1",
                        "in": "query",
                        "description": "The first parameter name.",
                        "type": "string"
                    },
                    {
                        "name": "value1",
                        "in": "query",
                        "description": "The first parameter value.",
                        "type": "string"
                    },
                    {
                        "name": "param2",
                        "in": "query",
                        "description": "The second parameter name.",
                        "type": "string"
                    },
                    {
                        "name": "value2",
                        "in": "query",
                        "description": "The second parameter value.",
                        "type": "string"
                    },
                    {
                        "name": "param3",
                        "in": "query",
                        "description": "The third parameter name.",
                        "type": "string"
                    },
                    {
                        "name": "value3",
                        "in": "query",
                        "description": "The third parameter value.",
                        "type": "string"
                    },
                    {
                        "name": "param4",
                        "in": "query",
                        "description": "The fourth parameter name.",
                        "type": "string"
                    },
                    {
                        "name": "value4",
                        "in": "query",
                        "description": "The fourth parameter value.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/RedirectResult"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/AccountTransactionCodes": {
            "get": {
                "description": "Retrieves the collection of account transaction code resources.",
                "operationId": "ApiNskV1ResourcesAccountTransactionCodesGet",
                "summary": "Retrieves the collection of account transaction code resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AccountTransactionCodeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAccountTransactionCodesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAccountTransactionCodesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/AccountTransactionCodes/{transactionCode}": {
            "get": {
                "description": "Retrieves the specific account transaction code resource.",
                "operationId": "ApiNskV1ResourcesAccountTransactionCodesByTransactionCodeGet",
                "summary": "Retrieves the specific account transaction code resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "transactionCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AccountTransactionCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAccountTransactionCodes{transactionCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/addOns/locations": {
            "get": {
                "description": "Gets the commerce locations.",
                "operationId": "ApiNskV1ResourcesAddOnsLocationsGet",
                "summary": "Gets the commerce locations.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "The type of search performed (Default = 0, Insurance = 1, Activity = 2, Hotel = 3, Auto = 4).",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Default",
                            "Insurance",
                            "Activity",
                            "Hotel",
                            "Car"
                        ]
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "VendorCode",
                        "in": "query",
                        "description": "The specific vendor code.",
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CommerceLocationArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/addOns/parameters": {
            "get": {
                "description": "Gets the parameters.",
                "operationId": "ApiNskV1ResourcesAddOnsParametersGet",
                "summary": "Gets the parameters.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "The type of search performed (Default = 0, Insurance = 1, Activity = 2, Hotel = 3, Auto = 4).",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Default",
                            "Insurance",
                            "Activity",
                            "Hotel",
                            "Car"
                        ]
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "VendorCode",
                        "in": "query",
                        "description": "The specific vendor code.",
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DynamicParameterArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/addOns/participanttypes": {
            "get": {
                "description": "Gets the participant types.",
                "operationId": "ApiNskV1ResourcesAddOnsParticipanttypesGet",
                "summary": "Gets the participant types.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "The type of search performed (Default = 0, Insurance = 1, Activity = 2, Hotel = 3, Auto = 4).",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Default",
                            "Insurance",
                            "Activity",
                            "Hotel",
                            "Car"
                        ]
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "VendorCode",
                        "in": "query",
                        "description": "The specific vendor code.",
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ParticipantTypeArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/addOns/sources": {
            "get": {
                "description": "Gets the sources.",
                "operationId": "ApiNskV1ResourcesAddOnsSourcesGet",
                "summary": "Gets the sources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SourceArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/addOns/sources/{sourceCode}": {
            "get": {
                "description": "Gets the sources by code.",
                "operationId": "ApiNskV1ResourcesAddOnsSourcesBySourceCodeGet",
                "summary": "Gets the sources by code.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "sourceCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Source"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/resources/addOns/vendors": {
            "get": {
                "description": "Gets the travel commerce vendors.",
                "operationId": "ApiNskV2ResourcesAddOnsVendorsGet",
                "summary": "Gets the travel commerce vendors.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "The type of search performed (Default = 0, Insurance = 1, Activity = 2, Hotel = 3, Auto = 4).",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Default",
                            "Insurance",
                            "Activity",
                            "Hotel",
                            "Car"
                        ]
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Vendorv2Array"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/AddressTypes": {
            "get": {
                "description": "Retrieves the collection of address type resources.",
                "operationId": "ApiNskV1ResourcesAddressTypesGet",
                "summary": "Retrieves the collection of address type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AddressTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAddressTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAddressTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/AddressTypes/{addressTypeCode}": {
            "get": {
                "description": "Retrieves the specific address type resource.",
                "operationId": "ApiNskV1ResourcesAddressTypesByAddressTypeCodeGet",
                "summary": "Retrieves the specific address type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "addressTypeCode",
                        "in": "path",
                        "description": "The unique type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AddressType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAddressTypes{addressTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/AgentSettingTypes": {
            "get": {
                "description": "Retrieves the collection of agent setting type resources.",
                "operationId": "ApiNskV1ResourcesAgentSettingTypesGet",
                "summary": "Retrieves the collection of agent setting type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AgentSettingTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAgentSettingTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAgentSettingTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/AgentSettingTypes/{agentSettingTypeCode}": {
            "get": {
                "description": "Retrieves the specific agent setting type resource.",
                "operationId": "ApiNskV1ResourcesAgentSettingTypesByAgentSettingTypeCodeGet",
                "summary": "Retrieves the specific agent setting type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "agentSettingTypeCode",
                        "in": "path",
                        "description": "The unique agent setting type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AgentSettingType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAgentSettingTypes{agentSettingTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Areas": {
            "get": {
                "description": "Retrieves the collection of area resources.",
                "operationId": "ApiNskV1ResourcesAreasGet",
                "summary": "Retrieves the collection of area resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AreaArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAreasGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAreasGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Areas/{areaCode}": {
            "get": {
                "description": "Retrieves the resource.",
                "operationId": "ApiNskV1ResourcesAreasByAreaCodeGet",
                "summary": "Retrieves the resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "areaCode",
                        "in": "path",
                        "description": "The unique area code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The unique culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Area"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesAreas{areaCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/BaggageTypes": {
            "get": {
                "description": "Retrieves the collection of baggage type resources.",
                "operationId": "ApiNskV1ResourcesBaggageTypesGet",
                "summary": "Retrieves the collection of baggage type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BaggageTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBaggageTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBaggageTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/BaggageTypes/{baggageTypeCode}": {
            "get": {
                "description": "Retrieves the specific baggage type resource.",
                "operationId": "ApiNskV1ResourcesBaggageTypesByBaggageTypeCodeGet",
                "summary": "Retrieves the specific baggage type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "baggageTypeCode",
                        "in": "path",
                        "description": "The unique baggage type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BaggageType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBaggageTypes{baggageTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/bundles": {
            "get": {
                "description": "Retrieves the collection of bundle configuration resources.",
                "operationId": "ApiNskV1ResourcesBundlesGet",
                "summary": "Retrieves the collection of bundle configuration resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleConfigurationArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/bundles/{bundleCode}": {
            "get": {
                "description": "Retrieves a specific bundle configuration based on the bundle code.",
                "operationId": "ApiNskV1ResourcesBundlesByBundleCodeGet",
                "summary": "Retrieves a specific bundle configuration based on the bundle code.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "bundleCode",
                        "in": "path",
                        "description": "The bundle code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleConfiguration"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundles{bundleCode}Get304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundles{bundleCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/bundles/applications": {
            "get": {
                "description": "See api/nsk/v1/bundles/application/{bundleApplicationKey}/details to retrieve additional\r\nbundle application details.  The application details consist of three lists: carrier codes,\r\nproduct classes, and classes of service.",
                "operationId": "ApiNskV1ResourcesBundlesApplicationsGet",
                "summary": "Retrieves the collection of bundle application resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "BundleRuleCode",
                        "in": "query",
                        "description": "The bundle rule code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleApplicationArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesApplicationsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesApplicationsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/bundles/rules": {
            "get": {
                "description": "See api/nsk/v1/bundles/rule/{bundleRuleCode}/details to retrieve a list of bundle \r\napplications associated with a specific bundle rule.\r\nBundle rules are used to control where and how bundle applications are used.",
                "operationId": "ApiNskV1ResourcesBundlesRulesGet",
                "summary": "Retrieves the collection of bundle rule resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "The unique etag ID.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleRuleArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesRulesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesRulesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/bundles/sets": {
            "get": {
                "description": "See api/nsk/v1/bundles/set/{bundleSetCode}/details to retrieve a list of bundle \r\ncodes associated with a specific bundle set.",
                "operationId": "ApiNskV1ResourcesBundlesSetsGet",
                "summary": "Retrieves the collection of bundle set resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleSetArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesSetsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesSetsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/bundles/ssrs": {
            "get": {
                "description": "Retrieves the collection of bundle ssr configurations associated with\r\nthe bundle code.",
                "operationId": "ApiNskV1ResourcesBundlesSsrsGet",
                "summary": "Retrieves the collection of bundle ssr configurations associated with\r\nthe bundle code.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "BundleCode",
                        "in": "query",
                        "description": "The bundle code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BundleSsrConfigurationArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesSsrsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesBundlesSsrsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/carriers": {
            "get": {
                "description": "Retrieves the collection of carrier resources.",
                "operationId": "ApiNskV1ResourcesCarriersGet",
                "summary": "Retrieves the collection of carrier resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CarrierArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCarriersGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCarriersGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/carriers/{carrierCode}": {
            "get": {
                "description": "Retrieves a single carrier.",
                "operationId": "ApiNskV1ResourcesCarriersByCarrierCodeGet",
                "summary": "Retrieves a single carrier.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "carrierCode",
                        "in": "path",
                        "description": "The unique carrier code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Carrier"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCarriers{carrierCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Cities": {
            "get": {
                "description": "Retrieves the collection of city resources.",
                "operationId": "ApiNskV1ResourcesCitiesGet",
                "summary": "Retrieves the collection of city resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CityArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCitiesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCitiesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Cities/{cityCode}": {
            "get": {
                "description": "Retrieves the specific city resource.",
                "operationId": "ApiNskV1ResourcesCitiesByCityCodeGet",
                "summary": "Retrieves the specific city resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "cityCode",
                        "in": "path",
                        "description": "The unique city code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCities{cityCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ClassOfServices": {
            "get": {
                "description": "Retrieves the collection of class of service resources.",
                "operationId": "ApiNskV1ResourcesClassOfServicesGet",
                "summary": "Retrieves the collection of class of service resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ClassOfServiceArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesClassOfServicesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesClassOfServicesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ClassOfServices/{classOfServiceCode}": {
            "get": {
                "description": "Retrieves the resource.",
                "operationId": "ApiNskV1ResourcesClassOfServicesByClassOfServiceCodeGet",
                "summary": "Retrieves the resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "classOfServiceCode",
                        "in": "path",
                        "description": "The unique class of service code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ClassOfService"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesClassOfServices{classOfServiceCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/CommissionRates": {
            "get": {
                "description": "Retrieves the collection of commission rate resources.",
                "operationId": "ApiNskV1ResourcesCommissionRatesGet",
                "summary": "Retrieves the collection of commission rate resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CommissionRateArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCommissionRatesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCommissionRatesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/CommissionRates/{commissionRateCode}": {
            "get": {
                "description": "Retrieves the specific commission rate resource.",
                "operationId": "ApiNskV1ResourcesCommissionRatesByCommissionRateCodeGet",
                "summary": "Retrieves the specific commission rate resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "commissionRateCode",
                        "in": "path",
                        "description": "The unique commission rate code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CommissionRate"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCommissionRates{commissionRateCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ContactTypes": {
            "get": {
                "description": "Retrieves the collection of contact type resources.",
                "operationId": "ApiNskV1ResourcesContactTypesGet",
                "summary": "Retrieves the collection of contact type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ContactTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesContactTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesContactTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ContactTypes/{contactTypeCode}": {
            "get": {
                "description": "Retrieves the specific contact type resource.",
                "operationId": "ApiNskV1ResourcesContactTypesByContactTypeCodeGet",
                "summary": "Retrieves the specific contact type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "contactTypeCode",
                        "in": "path",
                        "description": "The unique contact type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ContactType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesContactTypes{contactTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/contents": {
            "get": {
                "description": "Searches the contents based on the search criteria provided.",
                "operationId": "ApiNskV1ResourcesContentsGet",
                "summary": "Searches the contents based on the search criteria provided.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "Specific content type.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "GeneralReference",
                            "News",
                            "ConsoleHelp",
                            "FareRuleReference",
                            "ReviewWithCustomer",
                            "Notices",
                            "Literature",
                            "Links",
                            "Image",
                            "PromotionReference",
                            "SubscriptionReference"
                        ]
                    },
                    {
                        "name": "Name",
                        "in": "query",
                        "description": "Name of the content.",
                        "type": "string"
                    },
                    {
                        "name": "ContainerId",
                        "in": "query",
                        "description": "Format - int64. Unique id of the container.",
                        "type": "integer"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The default page size.",
                        "type": "integer"
                    },
                    {
                        "name": "LastContentId",
                        "in": "query",
                        "description": "Format - int64. Used to specify the last item of the page of the last set of records retrieved\r\nwhen paging was performed. This is optional.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search content succeeded.",
                        "schema": {
                            "$ref": "#/definitions/ResourceContentResultArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/contents/{contentId}": {
            "get": {
                "description": "This is a post to easily allow special path characters.\r\nSee /resources/settings/data to avoid manually parsing the data.",
                "operationId": "ApiNskV1ResourcesContentsByContentIdGet",
                "summary": "Retrieves a resource setting and its related information.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "contentId",
                        "in": "path",
                        "description": "Format - int64. The content id.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "ETag for caching.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceContentItem"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesContents{contentId}Get304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesContents{contentId}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/contents/{contentId}/data": {
            "get": {
                "description": "This is a post to easily allow special path characters.",
                "operationId": "ApiNskV1ResourcesContentsByContentIdDataGet",
                "summary": "Retrieves resource setting data based on the accept content type.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "contentId",
                        "in": "path",
                        "description": "Format - int64. The content id.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "ETag for caching.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesContents{contentId}DataGet200TextPlainResponse"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesContents{contentId}DataGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesContents{contentId}DataGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/resources/countries": {
            "get": {
                "description": "Retrieves the collection of country resources.",
                "operationId": "ApiNskV2ResourcesCountriesGet",
                "summary": "Retrieves the collection of country resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Countryv2Array"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesCountriesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesCountriesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/resources/countries/{countryCode}": {
            "get": {
                "description": "Retrieves a specific country resource.",
                "operationId": "ApiNskV2ResourcesCountriesByCountryCodeGet",
                "summary": "Retrieves a specific country resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "countryCode",
                        "in": "path",
                        "description": "The unique country code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Countryv2"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesCountries{countryCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/cultures": {
            "get": {
                "description": "Retrieves the resources.",
                "operationId": "ApiNskV1ResourcesCulturesGet",
                "summary": "Retrieves the resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CultureArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCulturesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCulturesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/cultures/{cultureCode}": {
            "get": {
                "description": "Retrieves the resource.",
                "operationId": "ApiNskV1ResourcesCulturesByCultureCodeGet",
                "summary": "Retrieves the resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "cultureCode",
                        "in": "path",
                        "description": "The unique culure code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "forCultureCode",
                        "in": "query",
                        "description": "The for culture.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Culture"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCultures{cultureCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/resources/CurrenciesControllerv2": {
            "get": {
                "description": "Retrieves the collection of currency resources.",
                "operationId": "ApiNskV2ResourcesCurrenciesControllerv2Get",
                "summary": "Retrieves the collection of currency resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceEntries[Currencyv2]"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesCurrenciesControllerv2Get304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesCurrenciesControllerv2Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/resources/CurrenciesControllerv2/{currencyCode}": {
            "get": {
                "description": "Retrieves the specific currency resource.",
                "operationId": "ApiNskV2ResourcesCurrenciesControllerv2ByCurrencyCodeGet",
                "summary": "Retrieves the specific currency resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "currencyCode",
                        "in": "path",
                        "description": "The unique currency code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Currency"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesCurrenciesControllerv2{currencyCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/CustomerPrograms": {
            "get": {
                "description": "Retrieves the collection of customer program resources.",
                "operationId": "ApiNskV1ResourcesCustomerProgramsGet",
                "summary": "Retrieves the collection of customer program resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomerProgramArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCustomerProgramsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCustomerProgramsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/CustomerPrograms/{programCode}": {
            "get": {
                "description": "Retrieves the specific customer program resource.",
                "operationId": "ApiNskV1ResourcesCustomerProgramsByProgramCodeGet",
                "summary": "Retrieves the specific customer program resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "programCode",
                        "in": "path",
                        "description": "The unique program code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomerProgram"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCustomerPrograms{programCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/CustomerPrograms/{programCode}/levels/{programLevelCode}": {
            "get": {
                "description": "Retrieves the specific program level.",
                "operationId": "ApiNskV1ResourcesCustomerProgramsByProgramCodeLevelsByProgramLevelCodeGet",
                "summary": "Retrieves the specific program level.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "programCode",
                        "in": "path",
                        "description": "The unique program code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "programLevelCode",
                        "in": "path",
                        "description": "The unique program level code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomerProgramLevel"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCustomerPrograms{programCode}Levels{programLevelCode}Get304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesCustomerPrograms{programCode}Levels{programLevelCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Delays": {
            "get": {
                "description": "Retrieves the collection of delay resources.",
                "operationId": "ApiNskV1ResourcesDelaysGet",
                "summary": "Retrieves the collection of delay resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DelayArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDelaysGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDelaysGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Delays/{delayCode}": {
            "get": {
                "description": "Retrieves the specific delay resource.",
                "operationId": "ApiNskV1ResourcesDelaysByDelayCodeGet",
                "summary": "Retrieves the specific delay resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "delayCode",
                        "in": "path",
                        "description": "The unique delay code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Delay"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDelays{delayCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Departments": {
            "get": {
                "description": "Retrieves the collection of department resources.",
                "operationId": "ApiNskV1ResourcesDepartmentsGet",
                "summary": "Retrieves the collection of department resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DepartmentArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDepartmentsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDepartmentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Departments/{departmentCode}": {
            "get": {
                "description": "Retrieves the specific department resource.",
                "operationId": "ApiNskV1ResourcesDepartmentsByDepartmentCodeGet",
                "summary": "Retrieves the specific department resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "departmentCode",
                        "in": "path",
                        "description": "The unique department code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDepartments{departmentCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/distributionOptions": {
            "get": {
                "description": "Retrieves the localizations.",
                "operationId": "ApiNskV1ResourcesDistributionOptionsGet",
                "summary": "Retrieves the localizations.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EnumResourceArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDistributionOptionsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDistributionOptionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/DocumentTypes": {
            "get": {
                "description": "Retrieves the collection of document type resources.",
                "operationId": "ApiNskV1ResourcesDocumentTypesGet",
                "summary": "Retrieves the collection of document type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DocumentTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDocumentTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDocumentTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/DocumentTypes/{documentTypeCode}": {
            "get": {
                "description": "Retrieves the specific document type resource.",
                "operationId": "ApiNskV1ResourcesDocumentTypesByDocumentTypeCodeGet",
                "summary": "Retrieves the specific document type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "documentTypeCode",
                        "in": "path",
                        "description": "The unique document type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DocumentType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDocumentTypes{documentTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Domains": {
            "get": {
                "description": "Retrieves the collection of domain resources.",
                "operationId": "ApiNskV1ResourcesDomainsGet",
                "summary": "Retrieves the collection of domain resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "The unique etag ID.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DomainArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDomainsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDomainsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Domains/{domainCode}": {
            "get": {
                "description": "Retrieves the specific domain resource.",
                "operationId": "ApiNskV1ResourcesDomainsByDomainCodeGet",
                "summary": "Retrieves the specific domain resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "domainCode",
                        "in": "path",
                        "description": "The unique domain code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Domain"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesDomains{domainCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/EmailTypes": {
            "get": {
                "description": "Retrieves the collection of email type resources.",
                "operationId": "ApiNskV1ResourcesEmailTypesGet",
                "summary": "Retrieves the collection of email type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EmailTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesEmailTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesEmailTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/EmailTypes/{emailTypeCode}": {
            "get": {
                "description": "Retrieves the specific email type resource.",
                "operationId": "ApiNskV1ResourcesEmailTypesByEmailTypeCodeGet",
                "summary": "Retrieves the specific email type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "emailTypeCode",
                        "in": "path",
                        "description": "The unique email type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EmailType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesEmailTypes{emailTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ExternalRates": {
            "get": {
                "description": "Retrieves the collection of external rate resources.",
                "operationId": "ApiNskV1ResourcesExternalRatesGet",
                "summary": "Retrieves the collection of external rate resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ExternalRateArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesExternalRatesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesExternalRatesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ExternalRates/{rateId}": {
            "get": {
                "description": "Retrieves the specific external rate resource.",
                "operationId": "ApiNskV1ResourcesExternalRatesByRateIdGet",
                "summary": "Retrieves the specific external rate resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "rateId",
                        "in": "path",
                        "description": "The unique rate ID.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ExternalRate"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesExternalRates{rateId}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/FareTypes": {
            "get": {
                "description": "Retrieves the collection of fare type resources.",
                "operationId": "ApiNskV1ResourcesFareTypesGet",
                "summary": "Retrieves the collection of fare type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FareTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesFareTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesFareTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/FareTypes/{fareTypeCode}": {
            "get": {
                "description": "Retrieves the specific fare type resource.",
                "operationId": "ApiNskV1ResourcesFareTypesByFareTypeCodeGet",
                "summary": "Retrieves the specific fare type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "fareTypeCode",
                        "in": "path",
                        "description": "The unique fare type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FareType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesFareTypes{fareTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Fees": {
            "get": {
                "description": "Retrieves the collection of fee resources.",
                "operationId": "ApiNskV1ResourcesFeesGet",
                "summary": "Retrieves the collection of fee resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FeeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesFeesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesFeesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Fees/{feeCode}": {
            "get": {
                "description": "Retrieves the specific fee resource.",
                "operationId": "ApiNskV1ResourcesFeesByFeeCodeGet",
                "summary": "Retrieves the specific fee resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "feeCode",
                        "in": "path",
                        "description": "The unique fee code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Fee"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesFees{feeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/fees/{feeCode}/details": {
            "get": {
                "description": "Note, this endpoint is not cached like other resource endpoints.",
                "operationId": "ApiNskV1ResourcesFeesByFeeCodeDetailsGet",
                "summary": "Gets the fee options.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "feeCode",
                        "in": "path",
                        "description": "The unique fee code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FeeDetailArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesFees{feeCode}DetailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/genders": {
            "get": {
                "description": "Retrieves the localizations.",
                "operationId": "ApiNskV1ResourcesGendersGet",
                "summary": "Retrieves the localizations.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EnumResourceArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesGendersGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesGendersGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/HotCardReasons": {
            "get": {
                "description": "Retrieves the collection of hot card reason resources.",
                "operationId": "ApiNskV1ResourcesHotCardReasonsGet",
                "summary": "Retrieves the collection of hot card reason resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HotCardReasonArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesHotCardReasonsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesHotCardReasonsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/HotCardReasons/{hotCardReasonCode}": {
            "get": {
                "description": "Retrieves the specific hot card reason resource.",
                "operationId": "ApiNskV1ResourcesHotCardReasonsByHotCardReasonCodeGet",
                "summary": "Retrieves the specific hot card reason resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "hotCardReasonCode",
                        "in": "path",
                        "description": "The unique hot card reason.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HotCardReason"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesHotCardReasons{hotCardReasonCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/IssuanceReasons": {
            "get": {
                "description": "Retrieves the collection of issuance reason resources.",
                "operationId": "ApiNskV1ResourcesIssuanceReasonsGet",
                "summary": "Retrieves the collection of issuance reason resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IssuanceReasonArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesIssuanceReasonsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesIssuanceReasonsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/IssuanceReasons/{issuanceReasonCode}": {
            "get": {
                "description": "Retrieves the specific issuance reason resource.",
                "operationId": "ApiNskV1ResourcesIssuanceReasonsByIssuanceReasonCodeGet",
                "summary": "Retrieves the specific issuance reason resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "issuanceReasonCode",
                        "in": "path",
                        "description": "The unique issuance reason code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IssuanceReason"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesIssuanceReasons{issuanceReasonCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Locations": {
            "get": {
                "description": "Retrieves the collection of location resources.",
                "operationId": "ApiNskV1ResourcesLocationsGet",
                "summary": "Retrieves the collection of location resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LocationArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesLocationsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesLocationsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Locations/{locationCode}": {
            "get": {
                "description": "Retrieves the specific location resource.",
                "operationId": "ApiNskV1ResourcesLocationsByLocationCodeGet",
                "summary": "Retrieves the specific location resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "locationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesLocations{locationCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Macs": {
            "get": {
                "description": "Retrieves the collection of mac resources.",
                "operationId": "ApiNskV1ResourcesMacsGet",
                "summary": "Retrieves the collection of mac resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "The unique etag ID.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MacArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesMacsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesMacsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Macs/{macCode}": {
            "get": {
                "description": "Retrieves the specific mac resource.",
                "operationId": "ApiNskV1ResourcesMacsByMacCodeGet",
                "summary": "Retrieves the specific mac resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "macCode",
                        "in": "path",
                        "description": "The unique mac code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Mac"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesMacs{macCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/resources/markets": {
            "get": {
                "description": "Retrieves the collection of market resources.",
                "operationId": "ApiNskV2ResourcesMarketsGet",
                "summary": "Retrieves the collection of market resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Marketv2Array"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesMarketsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesMarketsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/resources/markets/{locationCode}": {
            "get": {
                "description": "Retrieves a specific market resource.",
                "operationId": "ApiNskV2ResourcesMarketsByLocationCodeGet",
                "summary": "Retrieves a specific market resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "locationCode",
                        "in": "path",
                        "description": "The unique location code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MarketArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesMarkets{locationCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/resources/markets/{locationCode}/{travelLocationCode}": {
            "get": {
                "description": "Retrieves the resource.",
                "operationId": "ApiNskV2ResourcesMarketsByLocationCodeByTravelLocationCodeGet",
                "summary": "Retrieves the resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "locationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelLocationCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Market"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2ResourcesMarkets{locationCode}{travelLocationCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/MessageTypes": {
            "get": {
                "description": "Retrieves the collection of message type resources.",
                "operationId": "ApiNskV1ResourcesMessageTypesGet",
                "summary": "Retrieves the collection of message type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MessageTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesMessageTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesMessageTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/MessageTypes/{messageTypeCode}": {
            "get": {
                "description": "Retrieves the specific message type resource.",
                "operationId": "ApiNskV1ResourcesMessageTypesByMessageTypeCodeGet",
                "summary": "Retrieves the specific message type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "messageTypeCode",
                        "in": "path",
                        "description": "The unique message type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MessageType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesMessageTypes{messageTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/organizationStatuses": {
            "get": {
                "description": "Retrieves the localizations.",
                "operationId": "ApiNskV1ResourcesOrganizationStatusesGet",
                "summary": "Retrieves the localizations.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EnumResourceArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesOrganizationStatusesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesOrganizationStatusesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PassengerDiscounts": {
            "get": {
                "description": "Retrieves the collection of passenger discount resources.",
                "operationId": "ApiNskV1ResourcesPassengerDiscountsGet",
                "summary": "Retrieves the collection of passenger discount resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerDiscountArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPassengerDiscountsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPassengerDiscountsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PassengerDiscounts/{passengerDiscountCode}": {
            "get": {
                "description": "Retrieves the specific passenger discount resource.",
                "operationId": "ApiNskV1ResourcesPassengerDiscountsByPassengerDiscountCodeGet",
                "summary": "Retrieves the specific passenger discount resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "passengerDiscountCode",
                        "in": "path",
                        "description": "The unique passenger discount code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerDiscount"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPassengerDiscounts{passengerDiscountCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PassengerTypes": {
            "get": {
                "description": "Retrieves the collection of passenger type resources.",
                "operationId": "ApiNskV1ResourcesPassengerTypesGet",
                "summary": "Retrieves the collection of passenger type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPassengerTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPassengerTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PassengerTypes/{passengerTypeCode}": {
            "get": {
                "description": "Retrieves the specific passenger type resource.",
                "operationId": "ApiNskV1ResourcesPassengerTypesByPassengerTypeCodeGet",
                "summary": "Retrieves the specific passenger type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "passengerTypeCode",
                        "in": "path",
                        "description": "The unique passenger type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPassengerTypes{passengerTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PaymentMethods": {
            "get": {
                "description": "Retrieves the collection of payment method resources.",
                "operationId": "ApiNskV1ResourcesPaymentMethodsGet",
                "summary": "Retrieves the collection of payment method resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPaymentMethodsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPaymentMethodsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PaymentMethods/{paymentMethodCode}": {
            "get": {
                "description": "Retrieves the specific payment method resource.",
                "operationId": "ApiNskV1ResourcesPaymentMethodsByPaymentMethodCodeGet",
                "summary": "Retrieves the specific payment method resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "paymentMethodCode",
                        "in": "path",
                        "description": "The unique payment method code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethod"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPaymentMethods{paymentMethodCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PersonAttachmentTypes": {
            "get": {
                "description": "Retrieves the collection of person attachment type resources.",
                "operationId": "ApiNskV1ResourcesPersonAttachmentTypesGet",
                "summary": "Retrieves the collection of person attachment type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAttachmentTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPersonAttachmentTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPersonAttachmentTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PersonAttachmentTypes/{personAttachmentTypeCode}": {
            "get": {
                "description": "Retrieves the specific person attachment resource.",
                "operationId": "ApiNskV1ResourcesPersonAttachmentTypesByPersonAttachmentTypeCodeGet",
                "summary": "Retrieves the specific person attachment resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "personAttachmentTypeCode",
                        "in": "path",
                        "description": "The unique person attachment type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAttachmentType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPersonAttachmentTypes{personAttachmentTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PersonInformationTypes": {
            "get": {
                "description": "Retrieves the collection of person information type resources.",
                "operationId": "ApiNskV1ResourcesPersonInformationTypesGet",
                "summary": "Retrieves the collection of person information type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPersonInformationTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPersonInformationTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PersonInformationTypes/{personInformationTypeCode}": {
            "get": {
                "description": "Retrieves the specific person information type resource.",
                "operationId": "ApiNskV1ResourcesPersonInformationTypesByPersonInformationTypeCodeGet",
                "summary": "Retrieves the specific person information type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "personInformationTypeCode",
                        "in": "path",
                        "description": "The unique person information type code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPersonInformationTypes{personInformationTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PhoneTypes": {
            "get": {
                "description": "Retrieves the collection of phone number type resources.",
                "operationId": "ApiNskV1ResourcesPhoneTypesGet",
                "summary": "Retrieves the collection of phone number type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PhoneTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPhoneTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPhoneTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PhoneTypes/{phoneTypeCode}": {
            "get": {
                "description": "Retrieves the specific phone number type resource.",
                "operationId": "ApiNskV1ResourcesPhoneTypesByPhoneTypeCodeGet",
                "summary": "Retrieves the specific phone number type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "phoneTypeCode",
                        "in": "path",
                        "description": "The unique phone type.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PhoneType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPhoneTypes{phoneTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ProductClasses": {
            "get": {
                "description": "Retrieves the collection of product class resources.",
                "operationId": "ApiNskV1ResourcesProductClassesGet",
                "summary": "Retrieves the collection of product class resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ProductClassArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesProductClassesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesProductClassesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ProductClasses/{productClassCode}": {
            "get": {
                "description": "Retrieves the specific product class resource.",
                "operationId": "ApiNskV1ResourcesProductClassesByProductClassCodeGet",
                "summary": "Retrieves the specific product class resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "productClassCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ProductClass"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesProductClasses{productClassCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PromotionSettingTypes": {
            "get": {
                "description": "Retrieves the collection of promotion setting type resources.",
                "operationId": "ApiNskV1ResourcesPromotionSettingTypesGet",
                "summary": "Retrieves the collection of promotion setting type resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PromotionSettingTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPromotionSettingTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPromotionSettingTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/PromotionSettingTypes/{promotionSettingsTypeCode}": {
            "get": {
                "description": "Retrieves the specific promotion setting type resource.",
                "operationId": "ApiNskV1ResourcesPromotionSettingTypesByPromotionSettingsTypeCodeGet",
                "summary": "Retrieves the specific promotion setting type resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "promotionSettingsTypeCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PromotionSettingType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesPromotionSettingTypes{promotionSettingsTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ProvinceStates": {
            "get": {
                "description": "Retrieves the collection of province state resources.",
                "operationId": "ApiNskV1ResourcesProvinceStatesGet",
                "summary": "Retrieves the collection of province state resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ProvinceStateArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesProvinceStatesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesProvinceStatesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ProvinceStates/{provinceStateCode}": {
            "get": {
                "description": "Retrieves the specific province state resource.",
                "operationId": "ApiNskV1ResourcesProvinceStatesByProvinceStateCodeGet",
                "summary": "Retrieves the specific province state resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "provinceStateCode",
                        "in": "path",
                        "description": "The unique province state code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ProvinceState"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesProvinceStates{provinceStateCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/queue/categories": {
            "get": {
                "description": "Gets a response with a list of QueueCategories that match the given parameters.",
                "operationId": "ApiNskV1ResourcesQueueCategoriesGet",
                "summary": "Gets a response with a list of QueueCategories that match the given parameters.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/QueueCategoryArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesQueueCategoriesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesQueueCategoriesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/queue/categories/{queueCategoryCode}": {
            "get": {
                "description": "Gets a response with a single QueueCategory that match the given parameters.",
                "operationId": "ApiNskV1ResourcesQueueCategoriesByQueueCategoryCodeGet",
                "summary": "Gets a response with a single QueueCategory that match the given parameters.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "queueCategoryCode",
                        "in": "path",
                        "description": "Queue Category Code being requested.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "[Optional] The culture code for the resources.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/QueueCategory"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesQueueCategories{queueCategoryCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/roles": {
            "get": {
                "description": "Retrieves the resources.",
                "operationId": "ApiNskV1ResourcesRolesGet",
                "summary": "Retrieves the resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "The unique etag ID.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/RoleArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesRolesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesRolesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/roles/{roleCode}": {
            "get": {
                "description": "Retrieves the resource.",
                "operationId": "ApiNskV1ResourcesRolesByRoleCodeGet",
                "summary": "Retrieves the resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "roleCode",
                        "in": "path",
                        "description": "The unique role code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesRoles{roleCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/RoleSettingTypes": {
            "get": {
                "description": "Retrieves the collection of role setting resources.",
                "operationId": "ApiNskV1ResourcesRoleSettingTypesGet",
                "summary": "Retrieves the collection of role setting resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/RoleSettingTypeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesRoleSettingTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesRoleSettingTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/RoleSettingTypes/{roleSettingTypeCode}": {
            "get": {
                "description": "Retrieves the specific role setting resource.",
                "operationId": "ApiNskV1ResourcesRoleSettingTypesByRoleSettingTypeCodeGet",
                "summary": "Retrieves the specific role setting resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "roleSettingTypeCode",
                        "in": "path",
                        "description": "The unique role setting type code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/RoleSettingType"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesRoleSettingTypes{roleSettingTypeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/searchTypes": {
            "get": {
                "description": "Retrieves the localizations.",
                "operationId": "ApiNskV1ResourcesSearchTypesGet",
                "summary": "Retrieves the localizations.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EnumResourceArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSearchTypesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSearchTypesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/settings": {
            "post": {
                "description": "This is a post to easily allow special path characters.\r\nSee /resources/settings/data to avoid manually parsing the data.",
                "operationId": "ApiNskV1ResourcesSettingsPost",
                "summary": "Retrieves a resource setting and its related information.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "ETag for caching.",
                        "type": "string"
                    },
                    {
                        "name": "settingsCategoryRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SettingsCategoryRequest"
                        },
                        "description": "The resource settings request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategoryItem"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSettingsPost304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSettingsPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/settings/data": {
            "post": {
                "description": "This is a post to easily allow special path characters.",
                "operationId": "ApiNskV1ResourcesSettingsDataPost",
                "summary": "Retrieves resource setting data based on the accept content type.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "ETag for caching.",
                        "type": "string"
                    },
                    {
                        "name": "settingsCategoryRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SettingsCategoryRequest"
                        },
                        "description": "The resource settings request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSettingsDataPost200TextPlainResponse"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSettingsDataPost304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSettingsDataPost404TextPlainResponse"
                        }
                    },
                    "415": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSettingsDataPost415TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ShoppingAttributeGroups": {
            "get": {
                "description": "Retrieves the collection of shopping attribute group resources.",
                "operationId": "ApiNskV1ResourcesShoppingAttributeGroupsGet",
                "summary": "Retrieves the collection of shopping attribute group resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ShoppingAttributeGroupArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesShoppingAttributeGroupsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesShoppingAttributeGroupsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ShoppingAttributeGroups/{shoppingAttributeGroupCode}": {
            "get": {
                "description": "Retrieves the specific shopping attribute group resource.",
                "operationId": "ApiNskV1ResourcesShoppingAttributeGroupsByShoppingAttributeGroupCodeGet",
                "summary": "Retrieves the specific shopping attribute group resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "shoppingAttributeGroupCode",
                        "in": "path",
                        "description": "The unique shopping attribute group code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ShoppingAttributeGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesShoppingAttributeGroups{shoppingAttributeGroupCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ShoppingAttributes": {
            "get": {
                "description": "Retrieves the collection of shopping attribute resources.",
                "operationId": "ApiNskV1ResourcesShoppingAttributesGet",
                "summary": "Retrieves the collection of shopping attribute resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ShoppingAttributeArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesShoppingAttributesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesShoppingAttributesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/ShoppingAttributes/{shoppingAttributeCode}": {
            "get": {
                "description": "Retrieves the specific shopping attribute resource.",
                "operationId": "ApiNskV1ResourcesShoppingAttributesByShoppingAttributeCodeGet",
                "summary": "Retrieves the specific shopping attribute resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "shoppingAttributeCode",
                        "in": "path",
                        "description": "The unique shopping attribute code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ShoppingAttribute"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesShoppingAttributes{shoppingAttributeCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/singleSignOnProvider": {
            "get": {
                "description": "Retrieves a list of available single sign on providers.",
                "operationId": "ApiNskV1ResourcesSingleSignOnProviderGet",
                "summary": "Retrieves a list of available single sign on providers.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SingleSignOnProviderArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSingleSignOnProviderGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSingleSignOnProviderGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/singleSignOnProvider/{providerName}": {
            "get": {
                "description": "Retrieves a specific single sign on provider.",
                "operationId": "ApiNskV1ResourcesSingleSignOnProviderByProviderNameGet",
                "summary": "Retrieves a specific single sign on provider.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "providerName",
                        "in": "path",
                        "description": "The single sign on provider name.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SingleSignOnProvider"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSingleSignOnProvider{providerName}Get304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSingleSignOnProvider{providerName}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/SsrGroups": {
            "get": {
                "description": "Retrieves the collection of ssr group resources.",
                "operationId": "ApiNskV1ResourcesSsrGroupsGet",
                "summary": "Retrieves the collection of ssr group resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SsrGroupArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrGroupsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrGroupsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/SsrGroups/{ssrGroupCode}": {
            "get": {
                "description": "Retrieves the specific ssr group resource.",
                "operationId": "ApiNskV1ResourcesSsrGroupsBySsrGroupCodeGet",
                "summary": "Retrieves the specific ssr group resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ssrGroupCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SsrGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrGroups{ssrGroupCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/SsrNests": {
            "get": {
                "description": "Retrieves the collection of ssr nest resources.",
                "operationId": "ApiNskV1ResourcesSsrNestsGet",
                "summary": "Retrieves the collection of ssr nest resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SsrNestArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrNestsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrNestsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/SsrNests/{ssrNestCode}": {
            "get": {
                "description": "Retrieves the specific ssr nest resource.",
                "operationId": "ApiNskV1ResourcesSsrNestsBySsrNestCodeGet",
                "summary": "Retrieves the specific ssr nest resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ssrNestCode",
                        "in": "path",
                        "description": "The unique ssr nest code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SsrNest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrNests{ssrNestCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/SsrRestrictionResults": {
            "get": {
                "description": "Retrieves the collection of ssr restriction result resources.",
                "operationId": "ApiNskV1ResourcesSsrRestrictionResultsGet",
                "summary": "Retrieves the collection of ssr restriction result resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SsrRestrictionResultArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrRestrictionResultsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrRestrictionResultsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/SsrRestrictionResults/{ssrRestrictionResultCode}": {
            "get": {
                "description": "Retrieves the specific ssr restriction result. resource.",
                "operationId": "ApiNskV1ResourcesSsrRestrictionResultsBySsrRestrictionResultCodeGet",
                "summary": "Retrieves the specific ssr restriction result. resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ssrRestrictionResultCode",
                        "in": "path",
                        "description": "The unique ssr restriction result code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The unique culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SsrRestrictionResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrRestrictionResults{ssrRestrictionResultCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Ssrs": {
            "get": {
                "description": "Retrieves the collection of ssr resources.",
                "operationId": "ApiNskV1ResourcesSsrsGet",
                "summary": "Retrieves the collection of ssr resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SsrArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Ssrs/{ssrCode}": {
            "get": {
                "description": "Retrieves the specific ssr resource.",
                "operationId": "ApiNskV1ResourcesSsrsBySsrCodeGet",
                "summary": "Retrieves the specific ssr resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ssrCode",
                        "in": "path",
                        "description": "The unique ssr code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Ssr"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSsrs{ssrCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/StandByPriorities": {
            "get": {
                "description": "Retrieves the collection of standby priority resources.",
                "operationId": "ApiNskV1ResourcesStandByPrioritiesGet",
                "summary": "Retrieves the collection of standby priority resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StandByPriorityArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStandByPrioritiesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStandByPrioritiesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/StandByPriorities/{standByPriorityCode}": {
            "get": {
                "description": "Retrieves the specific standby priority resource.",
                "operationId": "ApiNskV1ResourcesStandByPrioritiesByStandByPriorityCodeGet",
                "summary": "Retrieves the specific standby priority resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "standByPriorityCode",
                        "in": "path",
                        "description": "The unique standby priority code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StandByPriority"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStandByPriorities{standByPriorityCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/StationCategories": {
            "get": {
                "description": "Retrieves the collection of station category resources.",
                "operationId": "ApiNskV1ResourcesStationCategoriesGet",
                "summary": "Retrieves the collection of station category resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StationCategoryArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStationCategoriesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStationCategoriesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/StationCategories/{stationCategoryCode}": {
            "get": {
                "description": "Retrieves the specific station category resource.",
                "operationId": "ApiNskV1ResourcesStationCategoriesByStationCategoryCodeGet",
                "summary": "Retrieves the specific station category resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "stationCategoryCode",
                        "in": "path",
                        "description": "The unique station category code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StationCategory"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStationCategories{stationCategoryCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Stations": {
            "get": {
                "description": "Retrieves the collection of station resources.",
                "operationId": "ApiNskV1ResourcesStationsGet",
                "summary": "Retrieves the collection of station resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StationArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStationsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStationsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Stations/{stationCode}": {
            "get": {
                "description": "Retrieves the specific station resource.",
                "operationId": "ApiNskV1ResourcesStationsByStationCodeGet",
                "summary": "Retrieves the specific station resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "stationCode",
                        "in": "path",
                        "description": "The unique station code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Station"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStations{stationCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/stations/{stationCode}/details": {
            "get": {
                "description": "Note this endpoint is not cached like other resource endpoints.",
                "operationId": "ApiNskV1ResourcesStationsByStationCodeDetailsGet",
                "summary": "Get the station details.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "stationCode",
                        "in": "path",
                        "description": "The station code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceEntries[StationDetail]"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStations{stationCode}DetailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/stations/category/{stationCategoryCode}": {
            "get": {
                "description": "This endpoint is resource intensive until cached.",
                "operationId": "ApiNskV1ResourcesStationsCategoryByStationCategoryCodeGet",
                "summary": "Gets a response with stations filtered by category.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "stationCategoryCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StationArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStationsCategory{stationCategoryCode}Get304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesStationsCategory{stationCategoryCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/SubZones": {
            "get": {
                "description": "Retrieves the collection of sub zone resources.",
                "operationId": "ApiNskV1ResourcesSubZonesGet",
                "summary": "Retrieves the collection of sub zone resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SubZoneArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSubZonesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSubZonesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/SubZones/{subZoneCode}": {
            "get": {
                "description": "Retrieves the specific sub zone resource.",
                "operationId": "ApiNskV1ResourcesSubZonesBySubZoneCodeGet",
                "summary": "Retrieves the specific sub zone resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "subZoneCode",
                        "in": "path",
                        "description": "The unique sub zone code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SubZone"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSubZones{subZoneCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Suffixes": {
            "get": {
                "description": "Retrieves the collection of suffix resources.",
                "operationId": "ApiNskV1ResourcesSuffixesGet",
                "summary": "Retrieves the collection of suffix resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SuffixArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSuffixesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSuffixesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Suffixes/{suffixCode}": {
            "get": {
                "description": "Retrieves the specific suffix resource.",
                "operationId": "ApiNskV1ResourcesSuffixesBySuffixCodeGet",
                "summary": "Retrieves the specific suffix resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "suffixCode",
                        "in": "path",
                        "description": "The unique suffix code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Suffix"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesSuffixes{suffixCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/TimeZones": {
            "get": {
                "description": "Retrieves the collection of time zone resources.",
                "operationId": "ApiNskV1ResourcesTimeZonesGet",
                "summary": "Retrieves the collection of time zone resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TimeZoneArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesTimeZonesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesTimeZonesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/TimeZones/{timeZoneCode}": {
            "get": {
                "description": "Retrieves the specific time zone resource.",
                "operationId": "ApiNskV1ResourcesTimeZonesByTimeZoneCodeGet",
                "summary": "Retrieves the specific time zone resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "timeZoneCode",
                        "in": "path",
                        "description": "The unique time zone code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TimeZone"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesTimeZones{timeZoneCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Titles": {
            "get": {
                "description": "Retrieves the collection of title resources.",
                "operationId": "ApiNskV1ResourcesTitlesGet",
                "summary": "Retrieves the collection of title resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TitleArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesTitlesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesTitlesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Titles/{titleKey}": {
            "get": {
                "description": "Retrieves the specific title resource.",
                "operationId": "ApiNskV1ResourcesTitlesByTitleKeyGet",
                "summary": "Retrieves the specific title resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "titleKey",
                        "in": "path",
                        "description": "The unique title key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Title"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesTitles{titleKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/TravelClasses": {
            "get": {
                "description": "Retrieves the collection of travel class resources.",
                "operationId": "ApiNskV1ResourcesTravelClassesGet",
                "summary": "Retrieves the collection of travel class resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TravelClassArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesTravelClassesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesTravelClassesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/TravelClasses/{travelClassCode}": {
            "get": {
                "description": "Retrieves the specific travel class resource.",
                "operationId": "ApiNskV1ResourcesTravelClassesByTravelClassCodeGet",
                "summary": "Retrieves the specific travel class resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "travelClassCode",
                        "in": "path",
                        "description": "The unique travel class code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TravelClass"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesTravelClasses{travelClassCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Zones": {
            "get": {
                "description": "Retrieves the collection of zone resources.",
                "operationId": "ApiNskV1ResourcesZonesGet",
                "summary": "Retrieves the collection of zone resources.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "Flag indicating to return just active only or all.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code to be returned.",
                        "type": "string"
                    },
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache token for this request. Data will not be returned if etag still matches.",
                        "type": "string"
                    },
                    {
                        "name": "StartIndex",
                        "in": "query",
                        "description": "Format - int32. The start index value for this request.",
                        "type": "integer"
                    },
                    {
                        "name": "ItemCount",
                        "in": "query",
                        "description": "Format - int32. The item count value for this request.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ZoneArray"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesZonesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesZonesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/resources/Zones/{zoneCode}": {
            "get": {
                "description": "Retrieves the specific zone resource.",
                "operationId": "ApiNskV1ResourcesZonesByZoneCodeGet",
                "summary": "Retrieves the specific zone resource.",
                "tags": [
                    "resources"
                ],
                "parameters": [
                    {
                        "name": "zoneCode",
                        "in": "path",
                        "description": "The unique zone code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cultureCode",
                        "in": "query",
                        "description": "The specific culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1ResourcesZones{zoneCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/seatmaps/{journeyKey}": {
            "get": {
                "description": "Gets the list of seat maps for all the journeys stateless.",
                "operationId": "ApiNskV3SeatmapsByJourneyKeyGet",
                "summary": "Gets the list of seat maps for all the journeys stateless.",
                "tags": [
                    "seatmaps"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The Journey Key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "IncludePropertyLookup",
                        "in": "query",
                        "description": "Flag indicating to include seat property lookup on the response.",
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The desired culture code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SeatMapAvailabilityArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3Seatmaps{journeyKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/booking": {
            "get": {
                "description": "Get the general settings.",
                "operationId": "ApiNskV1SettingsBookingGet",
                "summary": "Get the general settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GeneralSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/booking/checkin": {
            "get": {
                "description": "Get the checkin settings.",
                "operationId": "ApiNskV1SettingsBookingCheckinGet",
                "summary": "Get the checkin settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CheckInSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingCheckinGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingCheckinGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/booking/contact": {
            "get": {
                "description": "Get the contact settings.",
                "operationId": "ApiNskV1SettingsBookingContactGet",
                "summary": "Get the contact settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ContactSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingContactGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingContactGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/booking/customerAccount": {
            "get": {
                "description": "Get the custom account settings.",
                "operationId": "ApiNskV1SettingsBookingCustomerAccountGet",
                "summary": "Get the custom account settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomerAccountSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingCustomerAccountGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingCustomerAccountGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/booking/fee": {
            "get": {
                "description": "Get the fee settings.",
                "operationId": "ApiNskV1SettingsBookingFeeGet",
                "summary": "Get the fee settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FeeSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingFeeGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingFeeGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/booking/flightSearch": {
            "get": {
                "description": "Get the flight search settings.",
                "operationId": "ApiNskV1SettingsBookingFlightSearchGet",
                "summary": "Get the flight search settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FlightSearchSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingFlightSearchGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingFlightSearchGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/booking/passenger": {
            "get": {
                "description": "Get the passenger settings.",
                "operationId": "ApiNskV1SettingsBookingPassengerGet",
                "summary": "Get the passenger settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingPassengerGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingPassengerGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/settings/booking/payment": {
            "get": {
                "description": "Get the role based booking payment settings.",
                "operationId": "ApiNskV2SettingsBookingPaymentGet",
                "summary": "Get the role based booking payment settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BookingPaymentSettingsv2"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2SettingsBookingPaymentGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2SettingsBookingPaymentGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/booking/reserveFlights": {
            "get": {
                "description": "Get the reserve flight settings.",
                "operationId": "ApiNskV1SettingsBookingReserveFlightsGet",
                "summary": "Get the reserve flight settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ReserveFlightsSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingReserveFlightsGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsBookingReserveFlightsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/general/applicationLogon": {
            "get": {
                "description": "Retrieves the logon settings.",
                "operationId": "ApiNskV1SettingsGeneralApplicationLogonGet",
                "summary": "Retrieves the logon settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LogonSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsGeneralApplicationLogonGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsGeneralApplicationLogonGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/general/codes": {
            "get": {
                "description": "Retrieves the codes settings.",
                "operationId": "ApiNskV1SettingsGeneralCodesGet",
                "summary": "Retrieves the codes settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CodesSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsGeneralCodesGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsGeneralCodesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/general/session": {
            "get": {
                "description": "Retrieves the session settings.",
                "operationId": "ApiNskV1SettingsGeneralSessionGet",
                "summary": "Retrieves the session settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "ETag",
                        "in": "query",
                        "description": "The cache eTag for this request.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "Gets or sets the role code for this request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SessionSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsGeneralSessionGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsGeneralSessionGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/payment": {
            "get": {
                "description": "Get the non role based payment settings.",
                "operationId": "ApiNskV1SettingsPaymentGet",
                "summary": "Get the non role based payment settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "eTag",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PaymentSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsPaymentGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsPaymentGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/user/agencyCreation": {
            "get": {
                "description": "Retrieves the agency creation settings.",
                "operationId": "ApiNskV1SettingsUserAgencyCreationGet",
                "summary": "Retrieves the agency creation settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "The unique etag ID.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AgencyCreationSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsUserAgencyCreationGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsUserAgencyCreationGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/settings/user/customerCreation": {
            "get": {
                "description": "Retrieves the customer creation settings.",
                "operationId": "ApiNskV1SettingsUserCustomerCreationGet",
                "summary": "Retrieves the customer creation settings.",
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "eTag",
                        "in": "query",
                        "description": "The unique etag ID.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomerCreationSettings"
                        }
                    },
                    "304": {
                        "description": "Redirect",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsUserCustomerCreationGet304TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1SettingsUserCustomerCreationGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/token": {
            "get": {
                "description": "Get the information about the current token.",
                "operationId": "ApiNskV1TokenGet",
                "summary": "Get the information about the current token.",
                "tags": [
                    "token"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/NskSessionContext"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Given a non-null request, upgrades the current session's logged in user.\r\nOtherwise, keeps the active token alive.",
                "operationId": "ApiNskV1TokenPut",
                "summary": "Given a non-null request, upgrades the current session's logged in user.\r\nOtherwise, keeps the active token alive.",
                "tags": [
                    "token"
                ],
                "parameters": [
                    {
                        "name": "credentials",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Credentials"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TokenPut200TextPlainResponse"
                        }
                    },
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TokenPut201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates the general access token that will grant access to the API.",
                "operationId": "ApiNskV1TokenPost",
                "summary": "Creates the general access token that will grant access to the API.",
                "tags": [
                    "token"
                ],
                "parameters": [
                    {
                        "name": "nskTokenRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/NskTokenRequest"
                        },
                        "description": "The nsk token request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TokenResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Abandons the active token.",
                "operationId": "ApiNskV1TokenDelete",
                "summary": "Abandons the active token.",
                "tags": [
                    "token"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TokenDelete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/v1/token": {
            "put": {
                "description": "Keeps the active token alive.",
                "operationId": "ApiV1TokenPut",
                "summary": "Keeps the active token alive.",
                "tags": [
                    "token"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiV1TokenPut200TextPlainResponse"
                        }
                    },
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiV1TokenPut201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates the general access token that will grant access to the API.",
                "operationId": "ApiV1TokenPost",
                "summary": "Creates the general access token that will grant access to the API.",
                "tags": [
                    "token"
                ],
                "parameters": [
                    {
                        "name": "tokenRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TokenRequest"
                        },
                        "description": "The token request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TokenResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Abandons the active token.",
                "operationId": "ApiV1TokenDelete",
                "summary": "Abandons the active token.",
                "tags": [
                    "token"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiV1TokenDelete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/token/culture": {
            "post": {
                "description": "Note there is middleware that looks for \"Culture\" on every request in the headers or query string parameters.\r\nThese can be used if you want to set the culture for a single request only.",
                "operationId": "ApiNskV1TokenCulturePost",
                "summary": "Sets the culture code for the lifetime of the token.",
                "tags": [
                    "token"
                ],
                "parameters": [
                    {
                        "name": "defaultCultureCode",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TokenCulturePost200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/token/serverTransfer": {
            "post": {
                "description": "This endpoint returns a new token.  The new token must be applied in the\r\nauthorization header to access the transferred server context.",
                "operationId": "ApiNskV1TokenServerTransferPost",
                "summary": "Transfers the server context from NewSkies and returns a new token.",
                "tags": [
                    "token"
                ],
                "parameters": [
                    {
                        "name": "serverTransferRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ServerTransferRequest"
                        },
                        "description": "The server transfer request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TokenResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/token/singleSignOn": {
            "put": {
                "description": "In order to use single sign on, a single sign on token must first be\r\nassociated with a user.  Refer to the \"user/singleSignOnToken\" endpoints.",
                "operationId": "ApiNskV1TokenSingleSignOnPut",
                "summary": "Given a non-null request, upgrades the current session's logged in user.\r\nOtherwise, keeps the active token alive.",
                "tags": [
                    "token"
                ],
                "parameters": [
                    {
                        "name": "singleSignOnCredentials",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SingleSignOnCredentials"
                        },
                        "description": "The single sign on credentials."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TokenSingleSignOnPut200TextPlainResponse"
                        }
                    },
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TokenSingleSignOnPut201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "In order to use single sign on, a single sign on token must first be\r\nassociated with a user.  Refer to the \"user/singleSignOnToken\" endpoints.",
                "operationId": "ApiNskV1TokenSingleSignOnPost",
                "summary": "Creates the general access token that will grant access to the API.",
                "tags": [
                    "token"
                ],
                "parameters": [
                    {
                        "name": "singleSignOnCredentials",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SingleSignOnCredentials"
                        },
                        "description": "The single sign on credentials."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TokenResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v4/trip": {
            "post": {
                "description": "Creates a new booking with the provided journeys, contacts, passengers, and SSRs.",
                "operationId": "ApiNskV4TripPost",
                "summary": "Creates a new booking with the provided journeys, contacts, passengers, and SSRs.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "bookingSellRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingSellRequest"
                        },
                        "description": "The booking sell request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Created.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV4TripPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/downgrade": {
            "post": {
                "description": "Downgrades the current booking in state segments.",
                "operationId": "ApiNskV1TripDowngradePost",
                "summary": "Downgrades the current booking in state segments.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "tripDowngradeRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TripDowngradeRequest"
                        },
                        "description": "The trip downgrade request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Booking successfully downgraded.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripDowngradePost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/flyAhead/availability": {
            "post": {
                "description": "This request allows for total control over\r\nthe configuration. If a property is not set, the default settings (AvailabilitySettings) is used in its place.\r\nNote, this is a post request even though it is only getting information. This is due to the complicated data needed\r\nin the post data.",
                "operationId": "ApiNskV1TripFlyAheadAvailabilityPost",
                "summary": "Full fly ahead availability search request.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "availabilityFlyAheadRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AvailabilityFlyAheadRequest"
                        },
                        "description": "The availability move request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Trip"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripFlyAheadAvailabilityPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/flyAhead/availability/{journeyKey}": {
            "get": {
                "description": "Simple fly ahead search request covers the bare minimum search\r\nby journey. AvailabilitySettings configure the rest.",
                "operationId": "ApiNskV1TripFlyAheadAvailabilityByJourneyKeyGet",
                "summary": "Simple fly ahead search request covers the bare minimum search\r\nby journey. AvailabilitySettings configure the rest.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Trip"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripFlyAheadAvailability{journeyKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/info": {
            "post": {
                "description": "Gets the search results for the trip information, based on the search criteria.",
                "operationId": "ApiNskV1TripInfoPost",
                "summary": "Gets the search results for the trip information, based on the search criteria.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "tripInformationQuery",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TripInformationQuery"
                        },
                        "description": "The trip information request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TripInformationResponseArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripInfoPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/info/{legKey}/details": {
            "get": {
                "description": "The additional trip details include the leg cross references, \r\nthe cabin details (nest counts), and the checkin-lid.",
                "operationId": "ApiNskV1TripInfoByLegKeyDetailsGet",
                "summary": "Retrieves cabin and various details for the specified leg key.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "legKey",
                        "in": "path",
                        "description": "The encoded leg key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TripDetails"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripInfo{legKey}DetailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/trip/info/{legKey}/status": {
            "get": {
                "description": "Retrieves the trip status data for the specified leg key.",
                "operationId": "ApiNskV2TripInfoByLegKeyStatusGet",
                "summary": "Retrieves the trip status data for the specified leg key.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "legKey",
                        "in": "path",
                        "description": "The encoded leg key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TripStatusv2"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2TripInfo{legKey}StatusGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/info/simple": {
            "get": {
                "description": "Performs a simplified search for trip information based upon minimal, required data for\r\nthe search criteria.",
                "operationId": "ApiNskV1TripInfoSimpleGet",
                "summary": "Performs a simplified search for trip information based upon minimal, required data for\r\nthe search criteria.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "BeginDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date of the trip information search.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "NumberOfJourneys",
                        "in": "query",
                        "description": "Format - int32. When set to null, there will be no limit to the number of journeys to be returned.",
                        "type": "integer"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "The departure station.",
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "The arrival station.",
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date of the trip information search.",
                        "type": "string"
                    },
                    {
                        "name": "StartTimeInterval",
                        "in": "query",
                        "description": "The starting time of the trip information search.",
                        "type": "string"
                    },
                    {
                        "name": "EndTimeInterval",
                        "in": "query",
                        "description": "The end time of the trip information search.",
                        "type": "string"
                    },
                    {
                        "name": "Identifier",
                        "in": "query",
                        "description": "The transportation identifier, such as a flight number.",
                        "type": "string"
                    },
                    {
                        "name": "CarrierCode",
                        "in": "query",
                        "description": "The carrier code.",
                        "type": "string"
                    },
                    {
                        "name": "FlightType",
                        "in": "query",
                        "description": "The flight type.",
                        "type": "string",
                        "enum": [
                            "All",
                            "NonStop",
                            "Through",
                            "Direct",
                            "Connect"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TripInformationResponseArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripInfoSimpleGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/move": {
            "post": {
                "description": "Moves a journey on the booking in state.",
                "operationId": "ApiNskV1TripMovePost",
                "summary": "Moves a journey on the booking in state.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "moveRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MoveRequest"
                        },
                        "description": "Move request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripMovePost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/trip/move/availability": {
            "post": {
                "description": "Note, this is a post request even though it is only getting information. This is due to the complicated data needed\r\nin the post data.",
                "operationId": "ApiNskV2TripMoveAvailabilityPost",
                "summary": "Searches for move availability with the full availability search request. This request will allow for total control\r\nover\r\nthe configuration. If a property is not set, the default settings (AvailabilitySettings) is used in its place.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "availabilityMoveRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AvailabilityMoveRequest"
                        },
                        "description": "The availability move request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Availability"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2TripMoveAvailabilityPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/trip/move/availability/{journeyKey}": {
            "get": {
                "description": "Searches for availability with the simple move request. The simple search request covers the bare minimum search\r\ncriteria and lets default settings (AvailabilitySettings) configure the rest.",
                "operationId": "ApiNskV2TripMoveAvailabilityByJourneyKeyGet",
                "summary": "Searches for availability with the simple move request. The simple search request covers the bare minimum search\r\ncriteria and lets default settings (AvailabilitySettings) configure the rest.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "PassengerMoveType",
                        "in": "query",
                        "description": "The passenger move type.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "None",
                            "Irop",
                            "Diversion",
                            "FlightClose",
                            "FlyAhead",
                            "SplitJourney"
                        ]
                    },
                    {
                        "name": "BeginDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The departure date.",
                        "type": "string"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "The origin station code.",
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "The destination station code.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Availability"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2TripMoveAvailability{journeyKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/trip/rebook/availability": {
            "post": {
                "description": "Requires a booking in state. \r\nAlthough this endpoint behaves like a GET, POST is used to reduce the limitations resulting from URL length issues.",
                "operationId": "ApiNskV3TripRebookAvailabilityPost",
                "summary": "Rebook search with the current booking defaults.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "availabilityRebookRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AvailabilityRebookRequest"
                        },
                        "description": "The rebook request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Availability"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3TripRebookAvailabilityPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v3/trip/rebook/availability/simple": {
            "get": {
                "description": "Requires a booking in state.",
                "operationId": "ApiNskV3TripRebookAvailabilitySimpleGet",
                "summary": "Simple rebook search with the current booking defaults.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "The origin station code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "The destination station code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "BeginDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The departure date.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The return date if this is a round trip request.",
                        "type": "string"
                    },
                    {
                        "name": "LoyaltyFilter",
                        "in": "query",
                        "description": "The loyalty fare filter.",
                        "type": "string",
                        "enum": [
                            "MonetaryOnly",
                            "PointsOnly",
                            "PointsAndMonetary",
                            "PreserveCurrent"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Availability"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV3TripRebookAvailabilitySimpleGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/schedule": {
            "get": {
                "description": "Retrieves the schedule of flights for a market.",
                "operationId": "ApiNskV1TripScheduleGet",
                "summary": "Retrieves the schedule of flights for a market.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "The origin station code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "The destination station code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "BeginDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The begin date to search for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date to search for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "The flight type filter.",
                        "type": "string",
                        "enum": [
                            "None",
                            "NonStop",
                            "Through",
                            "Direct",
                            "Connect",
                            "All"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ScheduleDetailArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v4/trip/sell": {
            "post": {
                "description": "Sells the list of journeys and creates a booking if it doesn't already exist.",
                "operationId": "ApiNskV4TripSellPost",
                "summary": "Sells the list of journeys and creates a booking if it doesn't already exist.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "tripSellRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TripSellRequest"
                        },
                        "description": "The trip sell request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    },
                    "201": {
                        "description": "Journeys sold and booking created."
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV4TripSellPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/upgrade": {
            "get": {
                "description": "Gets the list of upgrade options for the booking in state.",
                "operationId": "ApiNskV1TripUpgradeGet",
                "summary": "Gets the list of upgrade options for the booking in state.",
                "tags": [
                    "trip"
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/UpgradeSegmentArray"
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripUpgradeGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Upgrades the current booking in state segments.",
                "operationId": "ApiNskV1TripUpgradePost",
                "summary": "Upgrades the current booking in state segments.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "tripUpgradeRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TripUpgradeRequest"
                        },
                        "description": "The trip upgrade request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Booking successfully upgraded.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripUpgradePost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/trip/upgrade/{upgradeKey}": {
            "post": {
                "description": "Upgrades the current booking for the single key.",
                "operationId": "ApiNskV1TripUpgradeByUpgradeKeyPost",
                "summary": "Upgrades the current booking for the single key.",
                "tags": [
                    "trip"
                ],
                "parameters": [
                    {
                        "name": "upgradeKey",
                        "in": "path",
                        "description": "The upgrade key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tripUpgradeBaseRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TripUpgradeBaseRequest"
                        },
                        "description": "The trip upgrade request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Booking successfully upgraded.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1TripUpgrade{upgradeKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user": {
            "get": {
                "description": "Retrieves the current logged in user.",
                "operationId": "ApiNskV1UserGet",
                "summary": "Retrieves the current logged in user.",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates the current logged in user.",
                "operationId": "ApiNskV1UserPut",
                "summary": "Updates the current logged in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserRequest"
                        },
                        "description": "The user edit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "This endpoint will create a user based off the system configured customer creation parameters. The associated\r\nperson has to be of type customer or an exception will be thrown. To change these default settings please configure\r\nutilities.",
                "operationId": "ApiNskV1UserPost",
                "summary": "Creates a user with customer creation parameter defaults.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userCustomerCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserCustomerCreateRequest"
                        },
                        "description": "The user customer create request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches the current logged in user.",
                "operationId": "ApiNskV1UserPatch",
                "summary": "Patches the current logged in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "deltaMapper[UserRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[UserRequest]"
                        },
                        "description": "The user patch request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPatch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPatch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/user": {
            "post": {
                "description": "This endpoint will create a user based off the system configured customer creation parameters. The associated\r\nperson has to be of type customer or an exception will be thrown. To change these default settings please configure\r\nutilities.",
                "operationId": "ApiNskV2UserPost",
                "summary": "Creates a user with customer creation parameter defaults.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userCustomerCreateRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserCustomerCreateRequestv2"
                        },
                        "description": "The user customer create request v2."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2UserPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/bookings": {
            "get": {
                "description": "Searches the logged in user booking upcoming and past bookings.",
                "operationId": "ApiNskV1UserBookingsGet",
                "summary": "Searches the logged in user booking upcoming and past bookings.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "ReturnCount",
                        "in": "query",
                        "description": "Format - int32. The number of results to be returned.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "AssociatedFirstName",
                        "in": "query",
                        "description": "An associated passenger/contact first name.",
                        "type": "string"
                    },
                    {
                        "name": "AssociatedLastName",
                        "in": "query",
                        "description": "An associated passenger/contact last name.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneticSearch",
                        "in": "query",
                        "description": "Flag indicating to search using the phonetic option.",
                        "type": "boolean"
                    },
                    {
                        "name": "TripIdentifier",
                        "in": "query",
                        "description": "Filter by trip identifier.",
                        "type": "string"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "Filter by origin station code.",
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "Filter by destination station code.",
                        "type": "string"
                    },
                    {
                        "name": "SearchArchive",
                        "in": "query",
                        "description": "Flag indicating to search archived bookings.",
                        "type": "boolean"
                    },
                    {
                        "name": "TripDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Filter by trip date.",
                        "type": "string"
                    },
                    {
                        "name": "StartDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Filter by starting search date.",
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Filter by ending search date.",
                        "type": "string"
                    },
                    {
                        "name": "SearchByCustomerNumber",
                        "in": "query",
                        "description": "Flag indicating to search by the users customer number instead of user identifier.",
                        "type": "boolean"
                    },
                    {
                        "name": "LastBookingKey",
                        "in": "query",
                        "description": "The last booking key (used for paging).",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserBookingsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/bookingsByPassenger": {
            "get": {
                "description": "This is similar to the user booking endpoint but returns more focused trip information.\r\nThis endpoint will only return data where a booking's passenger customer number matches the current logged in user.\r\nBookings made by the user where the passenger customer number is not assigned are ignored.",
                "operationId": "ApiNskV1UserBookingsByPassengerGet",
                "summary": "Searches the logged in user booking upcoming and past bookings.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "StartDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Booking start search date.",
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Booking end search date.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BookingTripResultArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/impersonate": {
            "get": {
                "description": "Gets the logged in users current session roles state.",
                "operationId": "ApiNskV1UserImpersonateGet",
                "summary": "Gets the logged in users current session roles state.",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SessionRoles"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserImpersonateGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Impersonates a new role for the logged in user.",
                "operationId": "ApiNskV1UserImpersonatePost",
                "summary": "Impersonates a new role for the logged in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userImpersonateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserImpersonateRequest"
                        },
                        "description": "The user impersonate request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserImpersonatePost202TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Resets the logged in users role.",
                "operationId": "ApiNskV1UserImpersonateDelete",
                "summary": "Resets the logged in users role.",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserImpersonateDelete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/password/change": {
            "post": {
                "description": "Changes the logged in user's password.",
                "operationId": "ApiNskV1UserPasswordChangePost",
                "summary": "Changes the logged in user's password.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userChangePasswordRequestBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserChangePasswordRequestBase"
                        },
                        "description": "The change password request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPasswordChangePost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person": {
            "get": {
                "description": "Retrieves the current logged in person.",
                "operationId": "ApiNskV1UserPersonGet",
                "summary": "Retrieves the current logged in person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates the current logged in person record basic information.",
                "operationId": "ApiNskV1UserPersonPut",
                "summary": "Updates the current logged in person record basic information.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonEditRequest"
                        },
                        "description": "The person edit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches the current logged in person records basic information.",
                "operationId": "ApiNskV1UserPersonPatch",
                "summary": "Patches the current logged in person records basic information.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "deltaMapper[PersonEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonEditRequest]"
                        },
                        "description": "The person patch request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPatch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPatch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/account": {
            "get": {
                "description": "Retrieves the currently logged in person's account and collections.",
                "operationId": "ApiNskV1UserPersonAccountGet",
                "summary": "Retrieves the currently logged in person's account and collections.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAccountGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/account/collection/{accountCollectionKey}/transactions": {
            "get": {
                "description": "Retrieves the currently logged in person's account collection transactions.",
                "operationId": "ApiNskV1UserPersonAccountCollectionByAccountCollectionKeyTransactionsGet",
                "summary": "Retrieves the currently logged in person's account collection transactions.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "accountCollectionKey",
                        "in": "path",
                        "description": "The account collection key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAccountCollection{accountCollectionKey}TransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/account/transactions": {
            "get": {
                "description": "Retrieves all transactions for all collections for the currently logged in person.",
                "operationId": "ApiNskV1UserPersonAccountTransactionsGet",
                "summary": "Retrieves all transactions for all collections for the currently logged in person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "StartTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date and time of the date range to search in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SortByNewest",
                        "in": "query",
                        "description": "Optional filter to sort results by newest.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "EndTime",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The end date and time of the date range to search in.",
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. Used to specify the number of records to return.",
                        "type": "integer"
                    },
                    {
                        "name": "PageIndex",
                        "in": "query",
                        "description": "Format - int64. Represents the index of the requested paged item.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TransactionArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAccountTransactionsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/addresses": {
            "get": {
                "description": "Gets all addresses from the logged in users person.",
                "operationId": "ApiNskV1UserPersonAddressesGet",
                "summary": "Gets all addresses from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAddressArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAddressesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new address on the logged in users person.",
                "operationId": "ApiNskV1UserPersonAddressesPost",
                "summary": "Creates a new address on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAddressCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAddressCreateRequest"
                        },
                        "description": "The new address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAddressesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/addresses/{personAddressKey}": {
            "get": {
                "description": "Gets a specific address from the logged in users person.",
                "operationId": "ApiNskV1UserPersonAddressesByPersonAddressKeyGet",
                "summary": "Gets a specific address from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAddress"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAddresses{personAddressKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific address on the logged in users person.",
                "operationId": "ApiNskV1UserPersonAddressesByPersonAddressKeyPut",
                "summary": "Updates a specific address on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAddressEditRequest"
                        },
                        "description": "The modified address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAddresses{personAddressKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAddresses{personAddressKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific address on the logged in users person.",
                "operationId": "ApiNskV1UserPersonAddressesByPersonAddressKeyDelete",
                "summary": "Deletes a specific address on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAddresses{personAddressKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific address on the logged in users person.",
                "operationId": "ApiNskV1UserPersonAddressesByPersonAddressKeyPatch",
                "summary": "Patches a specific address on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonAddressEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonAddressEditRequest]"
                        },
                        "description": "The patched address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAddresses{personAddressKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAddresses{personAddressKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/aliases": {
            "get": {
                "description": "Gets all aliases from the logged in users person.",
                "operationId": "ApiNskV1UserPersonAliasesGet",
                "summary": "Gets all aliases from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAliasArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAliasesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new alias on the logged in users person.",
                "operationId": "ApiNskV1UserPersonAliasesPost",
                "summary": "Creates a new alias on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAliasRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAliasRequest"
                        },
                        "description": "The new alias.D:\\TFS\\dotREZ\\nsk\\trunk\\src\\Navitaire.DotRez.Api.Nsk.User\\Controllers\\Person\\PersonCommentsController.cs"
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAliasesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/aliases/{personAliasKey}": {
            "get": {
                "description": "Gets a specific alias from the logged in users person.",
                "operationId": "ApiNskV1UserPersonAliasesByPersonAliasKeyGet",
                "summary": "Gets a specific alias from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAlias"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAliases{personAliasKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific alias on the logged in users person.",
                "operationId": "ApiNskV1UserPersonAliasesByPersonAliasKeyPut",
                "summary": "Updates a specific alias on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAliasRequest"
                        },
                        "description": "The modified alias."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAliases{personAliasKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAliases{personAliasKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific alias on the logged in users person.",
                "operationId": "ApiNskV1UserPersonAliasesByPersonAliasKeyDelete",
                "summary": "Deletes a specific alias on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAliases{personAliasKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific alias on the logged in users person.",
                "operationId": "ApiNskV1UserPersonAliasesByPersonAliasKeyPatch",
                "summary": "Patches a specific alias on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonAliasRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonAliasRequest]"
                        },
                        "description": "The patched alias."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAliases{personAliasKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonAliases{personAliasKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/comments": {
            "get": {
                "description": "Gets all comments from the logged in users person.",
                "operationId": "ApiNskV1UserPersonCommentsGet",
                "summary": "Gets all comments from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonCommentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonCommentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new comment on the logged in users person.",
                "operationId": "ApiNskV1UserPersonCommentsPost",
                "summary": "Creates a new comment on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personCommentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCommentRequest"
                        },
                        "description": "The new comment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonCommentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/comments/{personCommentKey}": {
            "get": {
                "description": "Gets a specific comment from the logged in users person.",
                "operationId": "ApiNskV1UserPersonCommentsByPersonCommentKeyGet",
                "summary": "Gets a specific comment from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonComment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonComments{personCommentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific comment on the logged in users person.",
                "operationId": "ApiNskV1UserPersonCommentsByPersonCommentKeyPut",
                "summary": "Updates a specific comment on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCommentRequest"
                        },
                        "description": "The modified comment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonComments{personCommentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonComments{personCommentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific comment on the logged in users person.",
                "operationId": "ApiNskV1UserPersonCommentsByPersonCommentKeyDelete",
                "summary": "Deletes a specific comment on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonComments{personCommentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific comment on the logged in users person.",
                "operationId": "ApiNskV1UserPersonCommentsByPersonCommentKeyPatch",
                "summary": "Patches a specific comment on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonCommentRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonCommentRequest]"
                        },
                        "description": "The patched comment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonComments{personCommentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonComments{personCommentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/emails": {
            "get": {
                "description": "Gets all email addresses from the logged in user's person.",
                "operationId": "ApiNskV1UserPersonEmailsGet",
                "summary": "Gets all email addresses from the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonEmailArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonEmailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new email address on the logged in user's person.",
                "operationId": "ApiNskV1UserPersonEmailsPost",
                "summary": "Creates a new email address on the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personEmailCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonEmailCreateRequest"
                        },
                        "description": "The new email address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonEmailsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/emails/{personEmailAddressKey}": {
            "get": {
                "description": "Gets a specific email address from the logged in user's person.",
                "operationId": "ApiNskV1UserPersonEmailsByPersonEmailAddressKeyGet",
                "summary": "Gets a specific email address from the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonEmail"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonEmails{personEmailAddressKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific email address on the logged in user's person.",
                "operationId": "ApiNskV1UserPersonEmailsByPersonEmailAddressKeyPut",
                "summary": "Updates a specific email address on the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonEmailEditRequest"
                        },
                        "description": "The modified email address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonEmails{personEmailAddressKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonEmails{personEmailAddressKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific email address on the logged in user's person.",
                "operationId": "ApiNskV1UserPersonEmailsByPersonEmailAddressKeyDelete",
                "summary": "Deletes a specific email address on the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonEmails{personEmailAddressKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific email address on the logged in user's person.",
                "operationId": "ApiNskV1UserPersonEmailsByPersonEmailAddressKeyPatch",
                "summary": "Patches a specific email address on the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonEmailEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonEmailEditRequest]"
                        },
                        "description": "The patched email address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonEmails{personEmailAddressKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonEmails{personEmailAddressKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/information": {
            "get": {
                "description": "Gets all information from the logged in user's person.",
                "operationId": "ApiNskV1UserPersonInformationGet",
                "summary": "Gets all information from the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonInformationGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new information on the logged in user's person.",
                "operationId": "ApiNskV1UserPersonInformationPost",
                "summary": "Creates a new information on the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personInformationCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationCreateRequest"
                        },
                        "description": "The new information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonInformationPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/information/{personInformationKey}": {
            "get": {
                "description": "Gets a specific information from the logged in user's person.",
                "operationId": "ApiNskV1UserPersonInformationByPersonInformationKeyGet",
                "summary": "Gets a specific information from the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonInformation"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonInformation{personInformationKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific information on the logged in user's person.",
                "operationId": "ApiNskV1UserPersonInformationByPersonInformationKeyPut",
                "summary": "Updates a specific information on the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationEditRequest"
                        },
                        "description": "The modified information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonInformation{personInformationKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonInformation{personInformationKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific information on the logged in user's person.",
                "operationId": "ApiNskV1UserPersonInformationByPersonInformationKeyDelete",
                "summary": "Deletes a specific information on the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonInformation{personInformationKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific information on the logged in user's person.",
                "operationId": "ApiNskV1UserPersonInformationByPersonInformationKeyPatch",
                "summary": "Patches a specific information on the logged in user's person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonInformationEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonInformationEditRequest]"
                        },
                        "description": "The patched information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonInformation{personInformationKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonInformation{personInformationKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/phoneNumbers": {
            "get": {
                "description": "Gets all phone numbers from the logged in users person.",
                "operationId": "ApiNskV1UserPersonPhoneNumbersGet",
                "summary": "Gets all phone numbers from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumberArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPhoneNumbersGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new phone number on the logged in users person.",
                "operationId": "ApiNskV1UserPersonPhoneNumbersPost",
                "summary": "Creates a new phone number on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPhoneNumberRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumberRequest"
                        },
                        "description": "The new phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPhoneNumbersPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/phoneNumbers/{personPhoneNumberKey}": {
            "get": {
                "description": "Gets a specific phone number from the logged in users person.",
                "operationId": "ApiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyGet",
                "summary": "Gets a specific phone number from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumber"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific phone number on the logged in users person.",
                "operationId": "ApiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPut",
                "summary": "Updates a specific phone number on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumberRequest"
                        },
                        "description": "The modified phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific phone number on the logged in users person.",
                "operationId": "ApiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyDelete",
                "summary": "Deletes a specific phone number on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific phone number on the logged in users person.",
                "operationId": "ApiNskV1UserPersonPhoneNumbersByPersonPhoneNumberKeyPatch",
                "summary": "Patches a specific phone number on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonPhoneNumberRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonPhoneNumberRequest]"
                        },
                        "description": "The patched phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/preferences": {
            "get": {
                "description": "Gets all preferences from the logged in users person.",
                "operationId": "ApiNskV1UserPersonPreferencesGet",
                "summary": "Gets all preferences from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPreferenceArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPreferencesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new preference on the logged in users person.",
                "operationId": "ApiNskV1UserPersonPreferencesPost",
                "summary": "Creates a new preference on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPreferenceCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPreferenceCreateRequest"
                        },
                        "description": "The new preference."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPreferencesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/preferences/{personPreferenceKey}": {
            "get": {
                "description": "Gets a specific preference from the logged in users person.",
                "operationId": "ApiNskV1UserPersonPreferencesByPersonPreferenceKeyGet",
                "summary": "Gets a specific preference from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPreference"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPreferences{personPreferenceKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific preference on the logged in users person.",
                "operationId": "ApiNskV1UserPersonPreferencesByPersonPreferenceKeyPut",
                "summary": "Updates a specific preference on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPreferenceEditRequest"
                        },
                        "description": "The modified preference."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPreferences{personPreferenceKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPreferences{personPreferenceKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific preference on the logged in users person.",
                "operationId": "ApiNskV1UserPersonPreferencesByPersonPreferenceKeyDelete",
                "summary": "Deletes a specific preference on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPreferences{personPreferenceKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific preference on the logged in users person.",
                "operationId": "ApiNskV1UserPersonPreferencesByPersonPreferenceKeyPatch",
                "summary": "Patches a specific preference on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonPreferenceEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonPreferenceEditRequest]"
                        },
                        "description": "The patched preference."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPreferences{personPreferenceKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPreferences{personPreferenceKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/programs": {
            "get": {
                "description": "Gets all programs from the logged in users person.",
                "operationId": "ApiNskV1UserPersonProgramsGet",
                "summary": "Gets all programs from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgramArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonProgramsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new program on the logged in users person.",
                "operationId": "ApiNskV1UserPersonProgramsPost",
                "summary": "Creates a new program on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personCustomerProgramCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgramCreateRequest"
                        },
                        "description": "The new program."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonProgramsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/programs/{personProgramKey}": {
            "get": {
                "description": "Gets a specific program from the logged in users person.",
                "operationId": "ApiNskV1UserPersonProgramsByPersonProgramKeyGet",
                "summary": "Gets a specific program from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person program key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgram"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPrograms{personProgramKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific program on the logged in users person.",
                "operationId": "ApiNskV1UserPersonProgramsByPersonProgramKeyPut",
                "summary": "Updates a specific program on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person program key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCustomerProgramEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgramEditRequest"
                        },
                        "description": "The modified program."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPrograms{personProgramKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPrograms{personProgramKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific program on the logged in users person.",
                "operationId": "ApiNskV1UserPersonProgramsByPersonProgramKeyDelete",
                "summary": "Deletes a specific program on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPrograms{personProgramKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific program on the logged in users person.",
                "operationId": "ApiNskV1UserPersonProgramsByPersonProgramKeyPatch",
                "summary": "Patches a specific program on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person program key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonCustomerProgramEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonCustomerProgramEditRequest]"
                        },
                        "description": "The patched program."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPrograms{personProgramKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonPrograms{personProgramKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/storedPayments": {
            "get": {
                "description": "Gets all stored payments from the logged in users person.",
                "operationId": "ApiNskV1UserPersonStoredPaymentsGet",
                "summary": "Gets all stored payments from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPaymentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonStoredPaymentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new stored payment on the logged in users person.",
                "operationId": "ApiNskV1UserPersonStoredPaymentsPost",
                "summary": "Creates a new stored payment on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personStoredPaymentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPaymentRequest"
                        },
                        "description": "The new stored payment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonStoredPaymentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/storedPayments/{personStoredPaymentKey}": {
            "get": {
                "description": "Gets a specific stored payment from the logged in users person.",
                "operationId": "ApiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyGet",
                "summary": "Gets a specific stored payment from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPayment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific stored payment on the logged in users person.",
                "operationId": "ApiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPut",
                "summary": "Updates a specific stored payment on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentUpdateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPaymentUpdateRequest"
                        },
                        "description": "The modified stored payment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific stored payment on the logged in users person.",
                "operationId": "ApiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyDelete",
                "summary": "Deletes a specific stored payment on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific stored payment on the logged in users person.",
                "operationId": "ApiNskV1UserPersonStoredPaymentsByPersonStoredPaymentKeyPatch",
                "summary": "Patches a specific stored payment on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonStoredPaymentUpdateRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonStoredPaymentUpdateRequest]"
                        },
                        "description": "The patched stored payment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/travelDocuments": {
            "get": {
                "description": "Gets all travel documents from the logged in users person.",
                "operationId": "ApiNskV1UserPersonTravelDocumentsGet",
                "summary": "Gets all travel documents from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonTravelDocumentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonTravelDocumentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new travel document on the logged in users person.",
                "operationId": "ApiNskV1UserPersonTravelDocumentsPost",
                "summary": "Creates a new travel document on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personTravelDocumentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonTravelDocumentRequest"
                        },
                        "description": "The new travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonTravelDocumentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/person/travelDocuments/{personTravelDocumentKey}": {
            "get": {
                "description": "Gets a specific travel document from the logged in users person.",
                "operationId": "ApiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyGet",
                "summary": "Gets a specific travel document from the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonTravelDocument"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonTravelDocuments{personTravelDocumentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific travel document on the logged in users person.",
                "operationId": "ApiNskV1UserPersonTravelDocumentsByPersonTravelDocumentKeyDelete",
                "summary": "Deletes a specific travel document on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserPersonTravelDocuments{personTravelDocumentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/user/person/travelDocuments/{personTravelDocumentKey}": {
            "put": {
                "description": "Updates a specific travel document on the logged in users person.",
                "operationId": "ApiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPut",
                "summary": "Updates a specific travel document on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentEditRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TravelDocumentEditRequestv2"
                        },
                        "description": "The modified travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific travel document on the logged in users person.",
                "operationId": "ApiNskV2UserPersonTravelDocumentsByPersonTravelDocumentKeyPatch",
                "summary": "Patches a specific travel document on the logged in users person.",
                "tags": [
                    "user/person"
                ],
                "parameters": [
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[TravelDocumentEditRequestv2]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[TravelDocumentEditRequestv2]"
                        },
                        "description": "The patched travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/roles": {
            "get": {
                "description": "Gets all roles from the logged in user.",
                "operationId": "ApiNskV1UserRolesGet",
                "summary": "Gets all roles from the logged in user.",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserRoleArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserRolesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new role on the logged in user.",
                "operationId": "ApiNskV1UserRolesPost",
                "summary": "Creates a new role on the logged in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userRoleCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserRoleCreateRequest"
                        },
                        "description": "The new role."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserRolesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/roles/{userRoleKey}": {
            "get": {
                "description": "Gets a specific role from the logged in user.",
                "operationId": "ApiNskV1UserRolesByUserRoleKeyGet",
                "summary": "Gets a specific role from the logged in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userRoleKey",
                        "in": "path",
                        "description": "The unique user role key",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserRole"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserRoles{userRoleKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific role on the logged in user.",
                "operationId": "ApiNskV1UserRolesByUserRoleKeyPut",
                "summary": "Updates a specific role on the logged in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userRoleKey",
                        "in": "path",
                        "description": "The unique user role key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userRoleEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserRoleEditRequest"
                        },
                        "description": "The modified role."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserRoles{userRoleKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserRoles{userRoleKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Delets a specific role on the logged in user.",
                "operationId": "ApiNskV1UserRolesByUserRoleKeyDelete",
                "summary": "Delets a specific role on the logged in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userRoleKey",
                        "in": "path",
                        "description": "The unique user role key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserRoles{userRoleKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific role on the logged in user.",
                "operationId": "ApiNskV1UserRolesByUserRoleKeyPatch",
                "summary": "Patches a specific role on the logged in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "userRoleKey",
                        "in": "path",
                        "description": "The unique user role key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[UserRolePatchRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[UserRolePatchRequest]"
                        },
                        "description": "The patched role."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserRoles{userRoleKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserRoles{userRoleKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/singleSignOnToken": {
            "get": {
                "description": "Gets all of the single sign on tokens associated with a specific user.",
                "operationId": "ApiNskV1UserSingleSignOnTokenGet",
                "summary": "Gets all of the single sign on tokens associated with a specific user.",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserSingleSignOnTokenArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserSingleSignOnTokenGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/user/singleSignOnToken/{providerKey}": {
            "get": {
                "description": "Gets a single sign on token associated with a specific user.",
                "operationId": "ApiNskV1UserSingleSignOnTokenByProviderKeyGet",
                "summary": "Gets a single sign on token associated with a specific user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "providerKey",
                        "in": "path",
                        "description": "The single sign on provider key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserSingleSignOnToken"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserSingleSignOnToken{providerKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates an existing token associated with the logged-in user.",
                "operationId": "ApiNskV1UserSingleSignOnTokenByProviderKeyPut",
                "summary": "Updates an existing token associated with the logged-in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "providerKey",
                        "in": "path",
                        "description": "The single sign on provider key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "singleSignOnTokenRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SingleSignOnTokenRequest"
                        },
                        "description": "The single sign on token request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserSingleSignOnToken{providerKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserSingleSignOnToken{providerKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Links the requested token with the logged-in user.",
                "operationId": "ApiNskV1UserSingleSignOnTokenByProviderKeyPost",
                "summary": "Links the requested token with the logged-in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "providerKey",
                        "in": "path",
                        "description": "The single sign on provider key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "singleSignOnTokenRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SingleSignOnTokenRequest"
                        },
                        "description": "The single sign on token request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserSingleSignOnToken{providerKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a token associated with the single sign on provider from the logged-in user.",
                "operationId": "ApiNskV1UserSingleSignOnTokenByProviderKeyDelete",
                "summary": "Deletes a token associated with the single sign on provider from the logged-in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "providerKey",
                        "in": "path",
                        "description": "The single sign on provider key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserSingleSignOnToken{providerKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches an existing token associated with the logged-in user.",
                "operationId": "ApiNskV1UserSingleSignOnTokenByProviderKeyPatch",
                "summary": "Patches an existing token associated with the logged-in user.",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "providerKey",
                        "in": "path",
                        "description": "The single sign on provider key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[SingleSignOnTokenRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[SingleSignOnTokenRequest]"
                        },
                        "description": "The single sign on token request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserSingleSignOnToken{providerKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UserSingleSignOnToken{providerKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users": {
            "post": {
                "description": "This method is used by agents to create other users (either agents or customers). \r\nUse this method when you want to create both a user and a person at the same time.",
                "operationId": "ApiNskV1UsersPost",
                "summary": "Creates a new user and person (used by agents to create other users).",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserCreateRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UsersPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/users": {
            "get": {
                "description": "Search user records.",
                "operationId": "ApiNskV2UsersGet",
                "summary": "Search user records.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "OrganizationCode",
                        "in": "query",
                        "description": "The organization code to search by.",
                        "type": "string"
                    },
                    {
                        "name": "LocationGroupCode",
                        "in": "query",
                        "description": "The location group code to search by.",
                        "type": "string"
                    },
                    {
                        "name": "DomainCode",
                        "in": "query",
                        "description": "The domain code to search in.",
                        "type": "string"
                    },
                    {
                        "name": "Username",
                        "in": "query",
                        "description": "The unique username to search by.",
                        "type": "string"
                    },
                    {
                        "name": "UsernameMatching",
                        "in": "query",
                        "description": "The matching criteria for the username.",
                        "type": "string",
                        "enum": [
                            "StartsWith",
                            "EndsWith",
                            "Contains",
                            "ExactMatch"
                        ]
                    },
                    {
                        "name": "FirstName",
                        "in": "query",
                        "description": "The agent's first name to search by.",
                        "type": "string"
                    },
                    {
                        "name": "FirstNameMatching",
                        "in": "query",
                        "description": "The matching criteria for the agent's first name.",
                        "type": "string",
                        "enum": [
                            "StartsWith",
                            "EndsWith",
                            "Contains",
                            "ExactMatch"
                        ]
                    },
                    {
                        "name": "LastName",
                        "in": "query",
                        "description": "The agent's last name to search by.",
                        "type": "string"
                    },
                    {
                        "name": "RoleCode",
                        "in": "query",
                        "description": "The role code to search with.",
                        "type": "string"
                    },
                    {
                        "name": "Status",
                        "in": "query",
                        "description": "The agent status to search by.",
                        "type": "string",
                        "enum": [
                            "Default",
                            "Active",
                            "Pending",
                            "Suspended",
                            "Terminated"
                        ]
                    },
                    {
                        "name": "ReturnCount",
                        "in": "query",
                        "description": "Format - int32. The number of results to return.",
                        "type": "integer"
                    },
                    {
                        "name": "LastIndex",
                        "in": "query",
                        "description": "Format - int64. The last user index (used for paging).",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserRecordArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2UsersGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "This method is used by agents to create other users (either agents or customers) and connect them with an existing person. \r\nUse this method when a person already exists and you want to create a user for them.",
                "operationId": "ApiNskV2UsersPost",
                "summary": "Creates a new user for a person (used by agents to create other users).",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userCreateRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserCreateRequestv2"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2UsersPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}": {
            "get": {
                "description": "Retrieves the a specific user.",
                "operationId": "ApiNskV1UsersByUserKeyGet",
                "summary": "Retrieves the a specific user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates the specific user.",
                "operationId": "ApiNskV1UsersByUserKeyPut",
                "summary": "Updates the specific user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserRequest"
                        },
                        "description": "The user edit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "This is a soft delete by setting the user record status to terminated.",
                "operationId": "ApiNskV1UsersByUserKeyDelete",
                "summary": "Delete the user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "User key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Delete204TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches the current logged in user.",
                "operationId": "ApiNskV1UsersByUserKeyPatch",
                "summary": "Patches the current logged in user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[UserRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[UserRequest]"
                        },
                        "description": "The user patch request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/bookings": {
            "get": {
                "description": "Searches the specific user for upcoming and past bookings.",
                "operationId": "ApiNskV1UsersByUserKeyBookingsGet",
                "summary": "Searches the specific user for upcoming and past bookings.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ReturnCount",
                        "in": "query",
                        "description": "Format - int32. The number of results to be returned.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "AssociatedFirstName",
                        "in": "query",
                        "description": "An associated passenger/contact first name.",
                        "type": "string"
                    },
                    {
                        "name": "AssociatedLastName",
                        "in": "query",
                        "description": "An associated passenger/contact last name.",
                        "type": "string"
                    },
                    {
                        "name": "PhoneticSearch",
                        "in": "query",
                        "description": "Flag indicating to search using the phonetic option.",
                        "type": "boolean"
                    },
                    {
                        "name": "TripIdentifier",
                        "in": "query",
                        "description": "Filter by trip identifier.",
                        "type": "string"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "Filter by origin station code.",
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "Filter by destination station code.",
                        "type": "string"
                    },
                    {
                        "name": "SearchArchive",
                        "in": "query",
                        "description": "Flag indicating to search archived bookings.",
                        "type": "boolean"
                    },
                    {
                        "name": "TripDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Filter by trip date.",
                        "type": "string"
                    },
                    {
                        "name": "StartDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Filter by starting search date.",
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Filter by ending search date.",
                        "type": "string"
                    },
                    {
                        "name": "SearchByCustomerNumber",
                        "in": "query",
                        "description": "Flag indicating to search by the users customer number instead of user identifier.",
                        "type": "boolean"
                    },
                    {
                        "name": "LastBookingKey",
                        "in": "query",
                        "description": "The last booking key (used for paging).",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BookingSearchResultArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}BookingsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/bookingsByPassenger": {
            "get": {
                "description": "This is similar to the user booking endpoint but returns more focused trip information.\r\nThis endpoint will only return data where a bookings passenger customer number matches the current logged in user.\r\nBookings made by the user but where the passenger customer are not assigned are ignored.",
                "operationId": "ApiNskV1UsersByUserKeyBookingsByPassengerGet",
                "summary": "Searches the specific user upcoming and past bookings by passenger.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "StartDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Booking start search date.",
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). Booking end search date.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BookingTripResultArray"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/password/change": {
            "post": {
                "description": "Changes a specifics user's password.",
                "operationId": "ApiNskV1UsersByUserKeyPasswordChangePost",
                "summary": "Changes a specifics user's password.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userChangePasswordRequestBase",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserChangePasswordRequestBase"
                        },
                        "description": "The change password request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PasswordChangePost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/password/reset": {
            "post": {
                "description": "Invokes the forgot password reset for a specific user.",
                "operationId": "ApiNskV1UsersByUserKeyPasswordResetPost",
                "summary": "Invokes the forgot password reset for a specific user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PasswordResetPost202TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person": {
            "get": {
                "description": "Retrieves the a specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonGet",
                "summary": "Retrieves the a specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates the specific user's person record basic information.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPut",
                "summary": "Updates the specific user's person record basic information.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonEditRequest"
                        },
                        "description": "The person edit request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPut200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPut500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches the specific user's person records basic information.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPatch",
                "summary": "Patches the specific user's person records basic information.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonEditRequest]"
                        },
                        "description": "The person patch request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPatch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPatch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/addresses": {
            "get": {
                "description": "Gets all addresses from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAddressesGet",
                "summary": "Gets all addresses from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAddressArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAddressesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new address on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAddressesPost",
                "summary": "Creates a new address on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAddressCreateRequest"
                        },
                        "description": "The new address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAddressesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/addresses/{personAddressKey}": {
            "get": {
                "description": "Gets a specific address from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyGet",
                "summary": "Gets a specific address from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAddress"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific address on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPut",
                "summary": "Updates a specific address on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAddressEditRequest"
                        },
                        "description": "The modified address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific address on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyDelete",
                "summary": "Deletes a specific address on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific address on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAddressesByPersonAddressKeyPatch",
                "summary": "Patches a specific address on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAddressKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonAddressEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonAddressEditRequest]"
                        },
                        "description": "The patched address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/aliases": {
            "get": {
                "description": "Gets all aliases from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAliasesGet",
                "summary": "Gets all aliases from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAliasArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAliasesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new alias on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAliasesPost",
                "summary": "Creates a new alias on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAliasRequest"
                        },
                        "description": "The new alias."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAliasesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/aliases/{personAliasKey}": {
            "get": {
                "description": "Gets a specific alias from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyGet",
                "summary": "Gets a specific alias from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonAlias"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAliases{personAliasKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific alias on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPut",
                "summary": "Updates a specific alias on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonAliasRequest"
                        },
                        "description": "The modified alias."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAliases{personAliasKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAliases{personAliasKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific alias on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyDelete",
                "summary": "Deletes a specific alias on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAliases{personAliasKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific alias on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonAliasesByPersonAliasKeyPatch",
                "summary": "Patches a specific alias on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personAliasKey",
                        "in": "path",
                        "description": "The unique person alias key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonAliasRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonAliasRequest]"
                        },
                        "description": "The patched alias."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAliases{personAliasKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonAliases{personAliasKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/comments": {
            "get": {
                "description": "Gets all comments from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonCommentsGet",
                "summary": "Gets all comments from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonCommentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonCommentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new comment on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonCommentsPost",
                "summary": "Creates a new comment on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCommentRequest"
                        },
                        "description": "The new comment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonCommentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/comments/{personCommentKey}": {
            "get": {
                "description": "Gets a specific comment from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyGet",
                "summary": "Gets a specific comment from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonComment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonComments{personCommentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific comment on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPut",
                "summary": "Updates a specific comment on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCommentRequest"
                        },
                        "description": "The modified comment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonComments{personCommentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonComments{personCommentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific comment on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyDelete",
                "summary": "Deletes a specific comment on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonComments{personCommentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific comment on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonCommentsByPersonCommentKeyPatch",
                "summary": "Patches a specific comment on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCommentKey",
                        "in": "path",
                        "description": "The unique person comment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonCommentRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonCommentRequest]"
                        },
                        "description": "The patched comment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonComments{personCommentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonComments{personCommentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/emails": {
            "get": {
                "description": "Gets all email addresses from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonEmailsGet",
                "summary": "Gets all email addresses from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonEmailArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonEmailsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/emails/{personEmailAddressKey}": {
            "get": {
                "description": "Gets a specific email address from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyGet",
                "summary": "Gets a specific email address from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonEmail"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific email address on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPut",
                "summary": "Updates a specific email address on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The specific user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonEmailEditRequest"
                        },
                        "description": "The modified email address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new email address on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPost",
                "summary": "Creates a new email address on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonEmailCreateRequest"
                        },
                        "description": "The new email address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific email address on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyDelete",
                "summary": "Deletes a specific email address on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific email address on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonEmailsByPersonEmailAddressKeyPatch",
                "summary": "Patches a specific email address on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personEmailAddressKey",
                        "in": "path",
                        "description": "The unique person email address key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonEmailEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonEmailEditRequest]"
                        },
                        "description": "The patched email address."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/information": {
            "get": {
                "description": "Gets all information from the logged in user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonInformationGet",
                "summary": "Gets all information from the logged in user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonInformationGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new information on the logged in user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonInformationPost",
                "summary": "Creates a new information on the logged in user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationCreateRequest"
                        },
                        "description": "The new information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonInformationPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/information/{personInformationKey}": {
            "get": {
                "description": "Gets a specific information from the logged in user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyGet",
                "summary": "Gets a specific information from the logged in user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonInformation"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonInformation{personInformationKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific information on the logged in user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPut",
                "summary": "Updates a specific information on the logged in user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonInformationEditRequest"
                        },
                        "description": "The modified information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonInformation{personInformationKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonInformation{personInformationKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific information on the logged in user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyDelete",
                "summary": "Deletes a specific information on the logged in user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonInformation{personInformationKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific information on the logged in user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonInformationByPersonInformationKeyPatch",
                "summary": "Patches a specific information on the logged in user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personInformationKey",
                        "in": "path",
                        "description": "The unique person information key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonInformationEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonInformationEditRequest]"
                        },
                        "description": "The patched information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonInformation{personInformationKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonInformation{personInformationKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/phoneNumbers": {
            "get": {
                "description": "Gets all phone numbers from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPhoneNumbersGet",
                "summary": "Gets all phone numbers from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumberArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPhoneNumbersGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new phone number on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPhoneNumbersPost",
                "summary": "Creates a new phone number on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumberRequest"
                        },
                        "description": "The new phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPhoneNumbersPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/phoneNumbers/{personPhoneNumberKey}": {
            "get": {
                "description": "Gets a specific phone number from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyGet",
                "summary": "Gets a specific phone number from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumber"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific phone number on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPut",
                "summary": "Updates a specific phone number on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPhoneNumberRequest"
                        },
                        "description": "The modified phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific phone number on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyDelete",
                "summary": "Deletes a specific phone number on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific phone number on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPhoneNumbersByPersonPhoneNumberKeyPatch",
                "summary": "Patches a specific phone number on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPhoneNumberKey",
                        "in": "path",
                        "description": "The unique person phone number key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonPhoneNumberRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonPhoneNumberRequest]"
                        },
                        "description": "The patched phone number."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/preferences": {
            "get": {
                "description": "Gets all preferences for a specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPreferencesGet",
                "summary": "Gets all preferences for a specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique person key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPreferenceArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPreferencesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new preference for a specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPreferencesPost",
                "summary": "Creates a new preference for a specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPreferenceCreateRequest"
                        },
                        "description": "The new preference."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPreferencesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/preferences/{personPreferenceKey}": {
            "get": {
                "description": "Gets a specific preference for a specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyGet",
                "summary": "Gets a specific preference for a specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonPreference"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific preference for a specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPut",
                "summary": "Updates a specific preference for a specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonPreferenceEditRequest"
                        },
                        "description": "The modified preference."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific preference for a specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyDelete",
                "summary": "Deletes a specific preference for a specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific preference for a specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonPreferencesByPersonPreferenceKeyPatch",
                "summary": "Patches a specific preference for a specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personPreferenceKey",
                        "in": "path",
                        "description": "The unique person preference key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonPreferenceEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonPreferenceEditRequest]"
                        },
                        "description": "The patched preference."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/programs": {
            "get": {
                "description": "Gets all programs from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonProgramsGet",
                "summary": "Gets all programs from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgramArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonProgramsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new program on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonProgramsPost",
                "summary": "Creates a new program on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCustomerProgramCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgramCreateRequest"
                        },
                        "description": "The new program."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonProgramsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/programs/{personProgramKey}": {
            "get": {
                "description": "Gets a specific program from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyGet",
                "summary": "Gets a specific program from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person program key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgram"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific program on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPut",
                "summary": "Updates a specific program on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person program key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personCustomerProgramEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonCustomerProgramEditRequest"
                        },
                        "description": "The modified program."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific program on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyDelete",
                "summary": "Deletes a specific program on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person address key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific program on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonProgramsByPersonProgramKeyPatch",
                "summary": "Patches a specific program on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personProgramKey",
                        "in": "path",
                        "description": "The unique person program key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonCustomerProgramEditRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonCustomerProgramEditRequest]"
                        },
                        "description": "The patched program."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/storedPayments": {
            "get": {
                "description": "Gets all stored payments from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonStoredPaymentsGet",
                "summary": "Gets all stored payments from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPaymentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonStoredPaymentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new stored payment on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonStoredPaymentsPost",
                "summary": "Creates a new stored payment on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPaymentRequest"
                        },
                        "description": "The new stored payment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonStoredPaymentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/storedPayments/{personStoredPaymentKey}": {
            "get": {
                "description": "Gets a specific stored payment from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyGet",
                "summary": "Gets a specific stored payment from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPayment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific stored payment on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPut",
                "summary": "Updates a specific stored payment on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentUpdateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonStoredPaymentUpdateRequest"
                        },
                        "description": "The modified stored payment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific stored payment on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyDelete",
                "summary": "Deletes a specific stored payment on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific stored payment on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonStoredPaymentsByPersonStoredPaymentKeyPatch",
                "summary": "Patches a specific stored payment on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personStoredPaymentKey",
                        "in": "path",
                        "description": "The unique person stored payment key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[PersonStoredPaymentUpdateRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[PersonStoredPaymentUpdateRequest]"
                        },
                        "description": "The patched stored payment."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/travelDocuments": {
            "get": {
                "description": "Gets all travel documents from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonTravelDocumentsGet",
                "summary": "Gets all travel documents from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonTravelDocumentArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonTravelDocumentsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new travel document on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonTravelDocumentsPost",
                "summary": "Creates a new travel document on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PersonTravelDocumentRequest"
                        },
                        "description": "The new travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonTravelDocumentsPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/person/travelDocuments/{personTravelDocumentKey}": {
            "get": {
                "description": "Gets a specific travel document from the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyGet",
                "summary": "Gets a specific travel document from the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PersonTravelDocument"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Deletes a specific travel document on the specific user's person.",
                "operationId": "ApiNskV1UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyDelete",
                "summary": "Deletes a specific travel document on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/users/{userKey}/person/travelDocuments/{personTravelDocumentKey}": {
            "put": {
                "description": "Updates a specific travel document on the specific user's person.",
                "operationId": "ApiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPut",
                "summary": "Updates a specific travel document on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "travelDocumentEditRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TravelDocumentEditRequestv2"
                        },
                        "description": "The modified travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific travel document on the specific user's person.",
                "operationId": "ApiNskV2UsersByUserKeyPersonTravelDocumentsByPersonTravelDocumentKeyPatch",
                "summary": "Patches a specific travel document on the specific user's person.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "personTravelDocumentKey",
                        "in": "path",
                        "description": "The unique person travel document key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[TravelDocumentEditRequestv2]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[TravelDocumentEditRequestv2]"
                        },
                        "description": "The patched travel document."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/roles": {
            "get": {
                "description": "Gets all roles for a specific user.",
                "operationId": "ApiNskV1UsersByUserKeyRolesGet",
                "summary": "Gets all roles for a specific user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserRoleArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}RolesGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "post": {
                "description": "Creates a new role for a specific user.",
                "operationId": "ApiNskV1UsersByUserKeyRolesPost",
                "summary": "Creates a new role for a specific user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userRoleCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserRoleCreateRequest"
                        },
                        "description": "The new role."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}RolesPost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/users/{userKey}/roles/{userRoleKey}": {
            "get": {
                "description": "Gets a specific role for a specific user.",
                "operationId": "ApiNskV1UsersByUserKeyRolesByUserRoleKeyGet",
                "summary": "Gets a specific role for a specific user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userRoleKey",
                        "in": "path",
                        "description": "The unique user role key",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserRole"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Roles{userRoleKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Updates a specific role for a specific user.",
                "operationId": "ApiNskV1UsersByUserKeyRolesByUserRoleKeyPut",
                "summary": "Updates a specific role for a specific user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userRoleKey",
                        "in": "path",
                        "description": "The unique user role key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userRoleEditRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserRoleEditRequest"
                        },
                        "description": "The modified role."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Roles{userRoleKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Roles{userRoleKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "delete": {
                "description": "Delets a specific role for a specific user.",
                "operationId": "ApiNskV1UsersByUserKeyRolesByUserRoleKeyDelete",
                "summary": "Delets a specific role for a specific user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userRoleKey",
                        "in": "path",
                        "description": "The unique user role key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Roles{userRoleKey}Delete200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "patch": {
                "description": "Patches a specific role for a specific user.",
                "operationId": "ApiNskV1UsersByUserKeyRolesByUserRoleKeyPatch",
                "summary": "Patches a specific role for a specific user.",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "name": "userKey",
                        "in": "path",
                        "description": "The unique user key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userRoleKey",
                        "in": "path",
                        "description": "The unique user role key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[UserRolePatchRequest]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[UserRolePatchRequest]"
                        },
                        "description": "The patched role."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Roles{userRoleKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Users{userKey}Roles{userRoleKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/utilities/stationLocalTime/{stationCode}": {
            "get": {
                "description": "Retrieves the station local time.",
                "operationId": "ApiNskV1UtilitiesStationLocalTimeByStationCodeGet",
                "summary": "Retrieves the station local time.",
                "tags": [
                    "utilities"
                ],
                "parameters": [
                    {
                        "name": "StationCode",
                        "in": "path",
                        "description": "The station code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UtilitiesStationLocalTime{stationCode}Get200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1UtilitiesStationLocalTime{stationCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/voucherIssuance": {
            "post": {
                "description": "Creates vouchers based upon data in the request.",
                "operationId": "ApiNskV1VoucherIssuancePost",
                "summary": "Creates vouchers based upon data in the request.",
                "tags": [
                    "voucherIssuance"
                ],
                "parameters": [
                    {
                        "name": "voucherIssuanceRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/VoucherIssuanceRequest"
                        },
                        "description": "The voucher issuance request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1VoucherIssuancePost201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/voucherIssuance/{voucherIssuanceKey}": {
            "get": {
                "description": "Gets a voucher issuance based upon the voucher issuance key.",
                "operationId": "ApiNskV1VoucherIssuanceByVoucherIssuanceKeyGet",
                "summary": "Gets a voucher issuance based upon the voucher issuance key.",
                "tags": [
                    "voucherIssuance"
                ],
                "parameters": [
                    {
                        "name": "voucherIssuanceKey",
                        "in": "path",
                        "description": "The voucher issuance key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VoucherIssuance"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1VoucherIssuance{voucherIssuanceKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/vouchers": {
            "get": {
                "description": "Gets vouchers based upon data in the request.",
                "operationId": "ApiNskV1VouchersGet",
                "summary": "Gets vouchers based upon data in the request.",
                "tags": [
                    "vouchers"
                ],
                "parameters": [
                    {
                        "name": "CustomerName.FirstName",
                        "in": "query",
                        "description": "The first name associated with the voucher.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "CustomerName.LastName",
                        "in": "query",
                        "description": "The last name associated with the voucher.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ActiveOnly",
                        "in": "query",
                        "description": "The flag to indicate if only active items should be returned.",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "RecordLocator",
                        "in": "query",
                        "description": "The record locator associated with the voucher.",
                        "type": "string"
                    },
                    {
                        "name": "CustomerNumber",
                        "in": "query",
                        "description": "The customer number associated with the voucher.",
                        "type": "string"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "description": "The culture code of the paged request.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VoucherItemArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1VouchersGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/vouchers/{voucherKey}": {
            "get": {
                "description": "Gets a specific voucher based upon the voucher key.",
                "operationId": "ApiNskV1VouchersByVoucherKeyGet",
                "summary": "Gets a specific voucher based upon the voucher key.",
                "tags": [
                    "vouchers"
                ],
                "parameters": [
                    {
                        "name": "voucherKey",
                        "in": "path",
                        "description": "The voucher key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Voucher"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Vouchers{voucherKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            },
            "put": {
                "description": "Changes the voucher status.",
                "operationId": "ApiNskV1VouchersByVoucherKeyPut",
                "summary": "Changes the voucher status.",
                "tags": [
                    "vouchers"
                ],
                "parameters": [
                    {
                        "name": "voucherKey",
                        "in": "path",
                        "description": "The voucher key.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "voucherUpdateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/VoucherUpdateRequest"
                        },
                        "description": "The voucher update request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Vouchers{voucherKey}Put200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1Vouchers{voucherKey}Put500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/vouchers/byDate": {
            "get": {
                "description": "Searches for vouchers issued within the given date range.",
                "operationId": "ApiNskV1VouchersByDateGet",
                "summary": "Searches for vouchers issued within the given date range.",
                "tags": [
                    "vouchers"
                ],
                "parameters": [
                    {
                        "name": "BeginDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The starting date.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "PageSize",
                        "in": "query",
                        "description": "Format - int32. The number of items to return.",
                        "type": "integer"
                    },
                    {
                        "name": "LastPageKey",
                        "in": "query",
                        "description": "The key returned previously to get the next page of items.",
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The ending date.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VouchersSummaryResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1VouchersByDateGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/vouchers/byIssuance/{voucherIssuanceKey}": {
            "get": {
                "description": "Gets vouchers associated with a voucher issuance.",
                "operationId": "ApiNskV1VouchersByIssuanceByVoucherIssuanceKeyGet",
                "summary": "Gets vouchers associated with a voucher issuance.",
                "tags": [
                    "vouchers"
                ],
                "parameters": [
                    {
                        "name": "voucherIssuanceKey",
                        "in": "path",
                        "description": "The voucher issuance key.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VoucherItemArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1VouchersByIssuance{voucherIssuanceKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/vouchers/byMarket": {
            "get": {
                "description": "Gets a collection of vouchers based on the market information.",
                "operationId": "ApiNskV1VouchersByMarketGet",
                "summary": "Gets a collection of vouchers based on the market information.",
                "tags": [
                    "vouchers"
                ],
                "parameters": [
                    {
                        "name": "Destination",
                        "in": "query",
                        "description": "Gets or sets the leg arrival station.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "description": "Gets or sets the leg departure station.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "DepartureDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339). The departure date.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Identifier",
                        "in": "query",
                        "description": "The unique transportation identifier.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "CarrierCode",
                        "in": "query",
                        "description": "The carrier code.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "OpSuffix",
                        "in": "query",
                        "description": "The op suffix.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VoucherItemArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1VouchersByMarketGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/vouchers/configuration": {
            "get": {
                "description": "Gets all available voucher configurations.",
                "operationId": "ApiNskV1VouchersConfigurationGet",
                "summary": "Gets all available voucher configurations.",
                "tags": [
                    "vouchers"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VoucherConfigurationArray"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1VouchersConfigurationGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/vouchers/configuration/{configurationCode}": {
            "get": {
                "description": "Gets a specific voucher configuration based on the configuration code.",
                "operationId": "ApiNskV1VouchersConfigurationByConfigurationCodeGet",
                "summary": "Gets a specific voucher configuration based on the configuration code.",
                "tags": [
                    "vouchers"
                ],
                "parameters": [
                    {
                        "name": "configurationCode",
                        "in": "path",
                        "description": "The code of the voucher configuration to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VoucherConfiguration"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1VouchersConfiguration{configurationCode}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/booking/addbooking": {
            "post": {
                "description": "CustomBookingAddbookingPost",
                "operationId": "CustomBookingAddbookingPost",
                "summary": "CustomBookingAddbookingPost",
                "tags": [
                    "custom"
                ],
                "parameters": [
                    {
                        "name": "addBookingRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddBookingRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AddBookingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/CustomBookingAddbookingPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/booking/passengers/{passengerKey}": {
            "patch": {
                "description": "CustomBookingPassengersByPassengerKeyPatch",
                "operationId": "CustomBookingPassengersByPassengerKeyPatch",
                "summary": "CustomBookingPassengersByPassengerKeyPatch",
                "tags": [
                    "custom"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deltaMapper[Passenger]",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeltaMapper[Passenger]"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomBookingPassengers{passengerKey}Patch200TextPlainResponse"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/CustomBookingPassengers{passengerKey}Patch500TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/booking/payments/declinepending": {
            "put": {
                "description": "CustomBookingPaymentsDeclinependingPut",
                "operationId": "CustomBookingPaymentsDeclinependingPut",
                "summary": "CustomBookingPaymentsDeclinependingPut",
                "tags": [
                    "custom"
                ],
                "parameters": [
                    {
                        "name": "manualDeclineRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ManualDeclineRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IActionResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/CustomBookingPaymentsDeclinependingPut400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/booking/payments/storedpaymayapayment/{storedPaymentKey}": {
            "post": {
                "description": "CustomBookingPaymentsStoredpaymayapaymentByStoredPaymentKeyPost",
                "operationId": "CustomBookingPaymentsStoredpaymayapaymentByStoredPaymentKeyPost",
                "summary": "CustomBookingPaymentsStoredpaymayapaymentByStoredPaymentKeyPost",
                "tags": [
                    "custom"
                ],
                "parameters": [
                    {
                        "name": "storedPaymentKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentMethodRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomBookingPaymentsStoredpaymayapayment{storedPaymentKey}Post201TextPlainResponse"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PaymentValidation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/CustomBookingPaymentsStoredpaymayapayment{storedPaymentKey}Post400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/currency/converter": {
            "get": {
                "description": "CustomCurrencyConverterGet",
                "operationId": "CustomCurrencyConverterGet",
                "summary": "CustomCurrencyConverterGet",
                "tags": [
                    "custom"
                ],
                "parameters": [
                    {
                        "name": "fromCurrency",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "toCurrency",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomCurrencyConverterGet200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/payments/loyalty": {
            "post": {
                "description": "CustomPaymentsLoyaltyPost",
                "operationId": "CustomPaymentsLoyaltyPost",
                "summary": "CustomPaymentsLoyaltyPost",
                "tags": [
                    "custom"
                ],
                "parameters": [
                    {
                        "name": "getGoRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/GetGoRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GetGoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/GetGoResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/session": {
            "get": {
                "description": "CustomSessionGet",
                "operationId": "CustomSessionGet",
                "summary": "CustomSessionGet",
                "tags": [
                    "custom"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomSessionGet200TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/v2/booking/payments": {
            "post": {
                "description": "CustomV2BookingPaymentsPost",
                "operationId": "CustomV2BookingPaymentsPost",
                "summary": "CustomV2BookingPaymentsPost",
                "tags": [
                    "booking/payments"
                ],
                "parameters": [
                    {
                        "name": "paymentMethodRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethodRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CustomV2BookingPaymentsPost201TextPlainResponse"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PaymentValidation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/CustomV2BookingPaymentsPost400TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/v2/user/bookings": {
            "get": {
                "description": "CustomV2UserBookingsGet",
                "operationId": "CustomV2UserBookingsGet",
                "summary": "CustomV2UserBookingsGet",
                "tags": [
                    "custom/v2/user/bookings"
                ],
                "parameters": [
                    {
                        "name": "AssociatedFirstName",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "AssociatedLastName",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "PhoneticSearch",
                        "in": "query",
                        "type": "boolean"
                    },
                    {
                        "name": "TripIdentifier",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "Origin",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "Destination",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "SearchArchive",
                        "in": "query",
                        "type": "boolean"
                    },
                    {
                        "name": "TripDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339).",
                        "type": "string"
                    },
                    {
                        "name": "StartDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339).",
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Format - date-time (as date-time in RFC3339).",
                        "type": "string"
                    },
                    {
                        "name": "SearchByCustomerNumber",
                        "in": "query",
                        "type": "boolean"
                    },
                    {
                        "name": "ReturnCount",
                        "in": "query",
                        "description": "Format - int32.",
                        "type": "integer"
                    },
                    {
                        "name": "LastBookingKey",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BookingResultResponseArray"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/CustomV2UserBookingsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/checkin/journey/{journeyKey}": {
            "post": {
                "description": "Checks in a collection of passengers to a specific journey in state.",
                "operationId": "ApiNskV2BookingCheckinJourneyByJourneyKeyPost",
                "summary": "Checks in a collection of passengers to a specific journey in state.",
                "tags": [
                    "booking/checkin"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key of the segments to checkin.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "checkinPassengersRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CheckinPassengersRequestv2"
                        },
                        "description": "The checkin passengers request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingCheckinJourney{journeyKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/checkin/segment/{segmentKey}": {
            "post": {
                "description": "Checks in a collection of passengers to a specific journey's segment in state.",
                "operationId": "ApiNskV2BookingCheckinSegmentBySegmentKeyPost",
                "summary": "Checks in a collection of passengers to a specific journey's segment in state.",
                "tags": [
                    "booking/checkin"
                ],
                "parameters": [
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment key of the segment to checkin.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "checkinPassengersRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CheckinPassengersRequestv2"
                        },
                        "description": "The checkin passengers request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingCheckinSegment{segmentKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/divide": {
            "post": {
                "description": "A valid user must be logged in to divide a booking.",
                "operationId": "ApiNskV2BookingDividePost",
                "summary": "Divides the current booking.",
                "tags": [
                    "booking"
                ],
                "parameters": [
                    {
                        "name": "divideRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DivideRequestv2"
                        },
                        "description": "Contains the divide request information."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully divided and canceled.",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingDividePost200TextPlainResponse"
                        }
                    },
                    "201": {
                        "description": "Successfully divided.",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/passengers/{passengerKey}/seats": {
            "get": {
                "description": "ApiNskV1BookingPassengersByPassengerKeySeatsGet",
                "operationId": "apinskv1bookingpassengersbypassengerkeyseatsget",
                "summary": "ApiNskV1BookingPassengersByPassengerKeySeatsGet",
                "tags": [
                    "/nsk/v1/booking/passengers"
                ],
                "parameters": [
                    {
                        "name": "passengerKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PassengerSeatArray"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPassengers{passengerKey}SeatsGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/seatmaps/segment/{segmentKey}": {
            "get": {
                "description": "ApiNskV1BookingSeatmapsSegmentBySegmentKeyGet",
                "operationId": "apinskv1bookingseatmapssegmentbysegmentkeyget",
                "summary": "ApiNskV1BookingSeatmapsSegmentBySegmentKeyGet",
                "tags": [
                    "/nsk/v1/booking"
                ],
                "parameters": [
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "IncludeSeatFees",
                        "in": "query",
                        "type": "boolean"
                    },
                    {
                        "name": "IncludePropertyLookup",
                        "in": "query",
                        "type": "boolean"
                    },
                    {
                        "name": "CultureCode",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SeatMapAvailabilityArray"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingSeatmapsSegment{segmentKey}Get404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/bookings/checkin/{recordLocator}/journey/{journeyKey}": {
            "post": {
                "description": "Checks in a collection of passengers to a specific journey stateless.",
                "operationId": "ApiNskV2BookingsCheckinByRecordLocatorJourneyByJourneyKeyPost",
                "summary": "Checks in a collection of passengers to a specific journey stateless.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The booking record locator to look up the journey.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "description": "The journey key of the journey to check into.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "checkinPassengersRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CheckinPassengersRequestv2"
                        },
                        "description": "The checkin passengers request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingsCheckin{recordLocator}Journey{journeyKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/bookings/checkin/{recordLocator}/segment/{segmentKey}": {
            "post": {
                "description": "Checks in a collection of passengers to a specific journeys segment stateless.",
                "operationId": "ApiNskV2BookingsCheckinByRecordLocatorSegmentBySegmentKeyPost",
                "summary": "Checks in a collection of passengers to a specific journeys segment stateless.",
                "tags": [
                    "bookings"
                ],
                "parameters": [
                    {
                        "name": "recordLocator",
                        "in": "path",
                        "description": "The booking record locator to look up the journeys segment.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentKey",
                        "in": "path",
                        "description": "The segment key of the segment to check into.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "checkinPassengersRequestv2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CheckinPassengersRequestv2"
                        },
                        "description": "The checkin passengers request."
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingsCheckin{recordLocator}Segment{segmentKey}Post201TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/paypal/create": {
            "post": {
                "description": "CustomPaypalCreatePost",
                "operationId": "CustomPaypalCreatePost",
                "summary": "CustomPaypalCreatePost",
                "tags": [
                    "custom"
                ],
                "parameters": [
                    {
                        "name": "paypalCreateRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaypalCreateRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GenericResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/GenericResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/paypal/execute": {
            "post": {
                "description": "CustomPaypalExecutePost",
                "operationId": "CustomPaypalExecutePost",
                "summary": "CustomPaypalExecutePost",
                "tags": [
                    "custom"
                ],
                "parameters": [
                    {
                        "name": "paypalExecuteRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaypalExecuteRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GenericResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/GenericResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/availability/lowfare": {
            "post": {
                "description": "ApiNskV1AvailabilityLowfarePost",
                "operationId": "ApiNskV1AvailabilityLowfarePost",
                "summary": "ApiNskV1AvailabilityLowfarePost",
                "tags": [
                    "/nsk/v1/availability"
                ],
                "parameters": [
                    {
                        "name": "lowFareAvailabilityRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/LowFareAvailabilityRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LowFareAvailability"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1AvailabilityLowfarePost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/availability/lowfare/simple": {
            "post": {
                "description": "ApiNskV1AvailabilityLowfareSimplePost",
                "operationId": "ApiNskV1AvailabilityLowfareSimplePost",
                "summary": "ApiNskV1AvailabilityLowfareSimplePost",
                "tags": [
                    "/nsk/v1/availability"
                ],
                "parameters": [
                    {
                        "name": "lowFareAvailabilitySearchSimpleRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/LowFareAvailabilitySearchSimpleRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LowFareAvailability"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1AvailabilityLowfareSimplePost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/payments/available": {
            "get": {
                "description": "ApiNskV1BookingPaymentsAvailableGet",
                "operationId": "ApiNskV1BookingPaymentsAvailableGet",
                "summary": "ApiNskV1BookingPaymentsAvailableGet",
                "tags": [
                    "/nsk/v1/booking/payments"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsAvailableGet200TextPlainResponse"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsAvailableGet404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/trip/sell": {
            "post": {
                "description": "ApiNskV2TripSellPost",
                "operationId": "ApiNskV2TripSellPost",
                "summary": "ApiNskV2TripSellPost",
                "tags": [
                    "/nsk/v2/trip"
                ],
                "parameters": [
                    {
                        "name": "tripSellRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TripSellRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2TripSellPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/availability/search": {
            "post": {
                "description": "ApiNskV1AvailabilitySearchPost",
                "operationId": "ApiNskV1AvailabilitySearchPost",
                "summary": "ApiNskV1AvailabilitySearchPost",
                "tags": [
                    "/nsk/v1/availability"
                ],
                "parameters": [
                    {
                        "name": "availabilityRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AvailabilityRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Availability"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1AvailabilitySearchPost404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v2/booking/boardingpasses/journey/{journeyKey}": {
            "post": {
                "description": "ApiNskV2BookingBoardingpassesJourneyByJourneyKeyPost",
                "operationId": "apinskv2bookingboardingpassesjourneybyjourneykeypost",
                "summary": "ApiNskV2BookingBoardingpassesJourneyByJourneyKeyPost",
                "tags": [
                    "/nsk/v2/booking"
                ],
                "parameters": [
                    {
                        "name": "journeyKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "boardingPassFilterRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BoardingPassFilterRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BoardingPassesCollection"
                        }
                    },
                    "404": {
                        "description": "Client Error",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV2BookingBoardingpassesJourney{journeyKey}Post404TextPlainResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/api/nsk/v1/booking/payments/storedPayment/{storedPaymentKey}": {
            "post": {
                "description": "ApiNskV1BookingPaymentsStoredPaymentByStoredPaymentKeyPost",
                "operationId": "apinskv1bookingpaymentsstoredpaymentbystoredpaymentkeypost",
                "summary": "ApiNskV1BookingPaymentsStoredPaymentByStoredPaymentKeyPost",
                "tags": [
                    "/nsk/v1/booking/payments"
                ],
                "parameters": [
                    {
                        "name": "storedPaymentKey",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "paymentRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PaymentRequest"
                        }
                    }
                ],
                "consumes": [
                    "application/json",
                    "text/json",
                    "application/json-patch+json"
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApiNskV1BookingPaymentsStoredPayment{storedPaymentKey}Post201TextPlainResponse"
                        }
                    },
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ThreeDSecureResponse"
                        }
                    }
                },
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ]
            }
        },
        "/custom/v3/user/bookings": {
            "get": {
                "operationId": "customv3userbookingsget",
                "summary": "CustomV3UserBookingsGet",
                "parameters": [
                    {
                        "name": "StartDate",
                        "in": "query",
                        "description": "Booking start search date.",
                        "type": "string"
                    },
                    {
                        "name": "EndDate",
                        "in": "query",
                        "description": "Booking end search date",
                        "type": "string"
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "AccountChangePasswordRequest": {
            "description": "Defines a change password request.",
            "required": [
                "credentials",
                "newPassword"
            ],
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/Credentials",
                    "description": "The current credentials."
                },
                "newPassword": {
                    "description": "The new password.",
                    "maxLength": 16,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Credentials": {
            "description": "Defines the login credentials to gain access to a specific user.",
            "type": "object",
            "properties": {
                "username": {
                    "description": "The unique username.",
                    "type": "string",
                    "example": ""
                },
                "alternateIdentifier": {
                    "description": "Alternate identifier that can be used in place of the username.",
                    "type": "string",
                    "example": ""
                },
                "password": {
                    "description": "The unique password.",
                    "type": "string",
                    "example": ""
                },
                "domain": {
                    "description": "The domain the user exists in.",
                    "type": "string",
                    "example": ""
                },
                "location": {
                    "description": "The location the user exists in.",
                    "type": "string",
                    "example": ""
                },
                "channelType": {
                    "description": "The optional channel type invoking the communication with the server.",
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                }
            }
        },
        "AccountForgotPasswordRequest": {
            "description": "Defines the account forgot password request.",
            "required": [
                "domainCode"
            ],
            "type": "object",
            "properties": {
                "username": {
                    "description": "The unique username.",
                    "type": "string",
                    "example": ""
                },
                "domainCode": {
                    "description": "The domain the user is located in.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "alternateIdentifier": {
                    "description": "The alternate identifier.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AccountTransactionCode": {
            "description": "The account transaction code model.",
            "required": [
                "transactionCode"
            ],
            "type": "object",
            "properties": {
                "transactionCode": {
                    "description": "The unique transaction code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The Name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expirationType": {
                    "description": "The expiration type.",
                    "enum": [
                        "None",
                        "FixedAtIssuance",
                        "FixedDate",
                        "FixedAtBooking"
                    ],
                    "type": "string"
                },
                "expirationDays": {
                    "format": "int32",
                    "description": "The expiration days.",
                    "type": "integer"
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The expiration date.",
                    "type": "string"
                },
                "inActive": {
                    "description": "In active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ActivitySimpleRequest": {
            "description": "Defines the query for generic travel commerce activities.",
            "required": [
                "station",
                "beginDate"
            ],
            "type": "object",
            "properties": {
                "station": {
                    "description": "The station code for this city.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "vendorCode": {
                    "description": "The specific vendor code.",
                    "type": "string",
                    "example": ""
                },
                "companyCode": {
                    "description": "The company code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The begin date.",
                    "type": "string"
                },
                "cultureCode": {
                    "description": "The specific culture code.",
                    "type": "string",
                    "example": ""
                },
                "discountCode": {
                    "description": "The discount code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The end date.",
                    "type": "string"
                },
                "sort": {
                    "description": "The search sort order.",
                    "enum": [
                        "SupplierDefined",
                        "Price",
                        "Rating",
                        "Name",
                        "Category",
                        "VendorDescription",
                        "Preferred",
                        "Relevance"
                    ],
                    "type": "string"
                },
                "promotionCode": {
                    "description": "The promotion code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "participants": {
                    "description": "The collection of participants with which to search.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParticipantCriteria"
                    }
                },
                "countryCode": {
                    "description": "The country code with which to search (source or market of the customer).",
                    "type": "string",
                    "example": ""
                },
                "catalogCode": {
                    "description": "The catalog code to with which to search.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "categoryCode": {
                    "description": "The category code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "departmentCode": {
                    "description": "The department code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "ratingCode": {
                    "description": "The rating code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "keyword": {
                    "description": "The keywork with which to search.",
                    "type": "string",
                    "example": ""
                },
                "maxPrice": {
                    "format": "double",
                    "description": "The maximum price with which to search.",
                    "type": "number"
                },
                "minPrice": {
                    "format": "double",
                    "description": "The minimum price with which to search.",
                    "type": "number"
                },
                "quantity": {
                    "format": "int32",
                    "description": "The quantity with which to search.",
                    "type": "integer"
                },
                "parameters": {
                    "description": "The collection of additional search input parameters.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                }
            }
        },
        "ParticipantCriteria": {
            "description": "Defines the participant criteria.",
            "required": [
                "participantTypeCode"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name of the participant."
                },
                "participantTypeCode": {
                    "description": "The participant's type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "isPrimary": {
                    "description": "The flag indicating the participant is the owner.",
                    "type": "boolean",
                    "example": false
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The participant's date of birth.",
                    "type": "string"
                },
                "residentCountry": {
                    "description": "The resident country.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Name": {
            "description": "Defines a common name.",
            "type": "object",
            "properties": {
                "first": {
                    "description": "The given first name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "middle": {
                    "description": "The given middle name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "last": {
                    "description": "The given last name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "title": {
                    "description": "The title.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "suffix": {
                    "description": "The suffix.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ActivityProduct": {
            "description": "Defines an availability search result.",
            "type": "object",
            "properties": {
                "productKey": {
                    "description": "The unique product result key.",
                    "type": "string",
                    "example": ""
                },
                "isPreferred": {
                    "description": "Flag indicating if this item is preferred.",
                    "type": "boolean",
                    "example": false
                },
                "isNew": {
                    "description": "Flag indicating if this item is new.",
                    "type": "boolean",
                    "example": false
                },
                "externalLocator": {
                    "description": "The external system locator code.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code for all.",
                    "type": "string",
                    "example": ""
                },
                "vendorCode": {
                    "description": "The specific vendor code.",
                    "type": "string",
                    "example": ""
                },
                "descriptions": {
                    "$ref": "#/definitions/Descriptions",
                    "description": "The various descriptions."
                },
                "thumbnailFileName": {
                    "description": "The provided thumbnail file name.",
                    "type": "string",
                    "example": ""
                },
                "amounts": {
                    "$ref": "#/definitions/ProductPriceBreakdown",
                    "description": "The search result amounts."
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The address of the result."
                },
                "phoneNumbers": {
                    "description": "The collection of phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                },
                "images": {
                    "description": "The collection of display images.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Image"
                    }
                },
                "locations": {
                    "description": "The collection of locations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LocationBase"
                    }
                },
                "participants": {
                    "description": "The collection of participating participants.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParticipantBase"
                    }
                },
                "productVariations": {
                    "description": "The collection of product variations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductVariation"
                    }
                },
                "criteria": {
                    "$ref": "#/definitions/AddOnCriteria",
                    "description": "The search criteria of the product."
                }
            }
        },
        "Descriptions": {
            "description": "Defines the search results different descriptions.",
            "type": "object",
            "properties": {
                "short": {
                    "description": "The short description.",
                    "type": "string",
                    "example": ""
                },
                "long": {
                    "description": "The long description.",
                    "type": "string",
                    "example": ""
                },
                "formatType": {
                    "description": "The content format type of the long description.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ProductPriceBreakdown": {
            "description": "Defines the search results price calculations.",
            "type": "object",
            "properties": {
                "minPrice": {
                    "format": "double",
                    "description": "The minimum price offered.",
                    "type": "number"
                },
                "maxPrice": {
                    "format": "double",
                    "description": "The maximum price offered.",
                    "type": "number"
                },
                "displayPrice": {
                    "format": "double",
                    "description": "The display price to be shown.",
                    "type": "number"
                }
            }
        },
        "Address": {
            "description": "Defines a common address.",
            "type": "object",
            "properties": {
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PhoneNumber": {
            "description": "Defines a common phone number.",
            "required": [
                "type",
                "number"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The phone number type.",
                    "enum": [
                        "Other",
                        "Home",
                        "Work",
                        "Mobile",
                        "Fax"
                    ],
                    "type": "string"
                },
                "number": {
                    "description": "The phone number without any formatting characters.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Image": {
            "description": "Defines an available image.",
            "required": [
                "imageKey"
            ],
            "type": "object",
            "properties": {
                "imageKey": {
                    "description": "The unique key for this image.",
                    "type": "string",
                    "example": ""
                },
                "fileName": {
                    "description": "File name.",
                    "type": "string",
                    "example": ""
                },
                "fileExtension": {
                    "description": "File extension.",
                    "type": "string",
                    "example": ""
                },
                "data": {
                    "format": "byte",
                    "description": "The binary image data.",
                    "type": "string"
                },
                "description": {
                    "description": "The image description.",
                    "type": "string",
                    "example": ""
                },
                "typeCode": {
                    "description": "The image type code.",
                    "type": "string",
                    "example": ""
                },
                "isDefault": {
                    "description": "Returns true if this image is the group default.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "LocationBase": {
            "description": "Defines base location details.",
            "required": [
                "code",
                "usageDate"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "description": "The unique location code.",
                    "type": "string",
                    "example": ""
                },
                "usageDate": {
                    "format": "date-time",
                    "description": "The usage date at this location.",
                    "type": "string"
                }
            }
        },
        "ParticipantBase": {
            "description": "Defines the stored participant information.",
            "required": [
                "participantTypeCode"
            ],
            "type": "object",
            "properties": {
                "participantTypeCode": {
                    "description": "The participant's type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "isPrimary": {
                    "description": "The flag indicating the participant is the owner.",
                    "type": "boolean",
                    "example": false
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The participant's date of birth.",
                    "type": "string"
                },
                "residentCountry": {
                    "description": "The resident country.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ProductVariation": {
            "description": "Defines a product variation result.",
            "type": "object",
            "properties": {
                "productVariationKey": {
                    "description": "The unique product variation key.",
                    "type": "string",
                    "example": ""
                },
                "descriptions": {
                    "$ref": "#/definitions/Descriptions",
                    "description": "The product's description."
                },
                "attributes": {
                    "description": "The collection of product variation attributes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductVariationAttribute"
                    }
                },
                "catalog": {
                    "description": "The collection of product variation catalogs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductVariationCatalog"
                    }
                }
            }
        },
        "AddOnCriteria": {
            "description": "Defines the product results criteria returned.",
            "type": "object",
            "properties": {
                "departmentCode": {
                    "description": "The department code.",
                    "type": "string",
                    "example": ""
                },
                "companyCode": {
                    "description": "The company code.",
                    "type": "string",
                    "example": ""
                },
                "ratingCode": {
                    "description": "The rating code.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "type": "string",
                    "example": ""
                },
                "categoryCode": {
                    "description": "The category code to search with.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ProductVariationAttribute": {
            "description": "Defines the product variation attribute result.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The product variation attribute code.",
                    "type": "string",
                    "example": ""
                },
                "typeCode": {
                    "description": "The product variation attribute type code.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description of the product variation attribute.",
                    "type": "string",
                    "example": ""
                },
                "typeDescription": {
                    "description": "The product variation attribute type description.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ProductVariationCatalog": {
            "description": "Defines a product variations catalog results.",
            "type": "object",
            "properties": {
                "catalogKey": {
                    "description": "The unique catalog key.",
                    "type": "string",
                    "example": ""
                },
                "code": {
                    "description": "The catalog code.",
                    "type": "string",
                    "example": ""
                },
                "comparisonKey": {
                    "description": "The comparison key.",
                    "type": "string",
                    "example": ""
                },
                "descriptions": {
                    "$ref": "#/definitions/Descriptions",
                    "description": "The variation descriptions."
                },
                "amounts": {
                    "$ref": "#/definitions/ProductVariationCatalogAmounts",
                    "description": "The variations catalog amount breakdown."
                },
                "inventoryGrouping": {
                    "description": "Determines how the inventory quantity is counted.",
                    "enum": [
                        "Existing",
                        "Total"
                    ],
                    "type": "string"
                },
                "inventoryQuantity": {
                    "format": "int32",
                    "description": "The actual number available.",
                    "type": "integer"
                },
                "sellQuantity": {
                    "format": "int32",
                    "description": "The number available to sell.",
                    "type": "integer"
                },
                "usageDate": {
                    "format": "date-time",
                    "description": "The usage date.",
                    "type": "string"
                },
                "paymentAction": {
                    "description": "The configured payment action.",
                    "enum": [
                        "SellingSystemCollects",
                        "PassThroughHold",
                        "NoPaymentRequired",
                        "ReferToSupplierMessage",
                        "PassThroughCharge"
                    ],
                    "type": "string"
                }
            }
        },
        "ProductVariationCatalogAmounts": {
            "description": "Defines a product variation catalog calculated amounts.",
            "type": "object",
            "properties": {
                "basePrice": {
                    "format": "double",
                    "description": "The base price.",
                    "type": "number"
                },
                "listingPrice": {
                    "format": "double",
                    "description": "The suggested listing price.",
                    "type": "number"
                },
                "markupAmount": {
                    "format": "double",
                    "description": "The markup amount.",
                    "type": "number"
                },
                "estimatedTotalTaxes": {
                    "format": "double",
                    "description": "The estimated total taxes.",
                    "type": "number"
                },
                "estimatedTotalFees": {
                    "format": "double",
                    "description": "The estimated total fees.",
                    "type": "number"
                },
                "estimatedPrice": {
                    "format": "double",
                    "description": "The estimated price.",
                    "type": "number"
                },
                "discount": {
                    "$ref": "#/definitions/Discount",
                    "description": ""
                }
            }
        },
        "Discount": {
            "description": "Defines a discount.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The discount code.",
                    "type": "string",
                    "example": ""
                },
                "discountTypeCode": {
                    "description": "The discount's type code.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The discount description.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The discount amount.",
                    "type": "number"
                }
            }
        },
        "QuoteTokenRequest": {
            "description": "Defines a product quote token request.",
            "required": [
                "productKey"
            ],
            "type": "object",
            "properties": {
                "items": {
                    "description": "The selected unique product variations catalog keys and quantities.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QuoteTokenCatalogRequest"
                    }
                },
                "productKey": {
                    "description": "The selected unique product key.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "QuoteTokenCatalogRequest": {
            "description": "Defines a quote token catalog request. This request is used for quoting a specific products product variation\r\ncatalog item.",
            "required": [
                "catalogKey",
                "quantity"
            ],
            "type": "object",
            "properties": {
                "catalogKey": {
                    "description": "The selected unique product variations catalog key.",
                    "type": "string",
                    "example": ""
                },
                "quantity": {
                    "format": "int32",
                    "description": "The desired quantity.",
                    "type": "integer"
                },
                "personalizations": {
                    "description": "The collection of desired personalizations to be quoted with the product.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SelectedPersonalization"
                    }
                }
            }
        },
        "SelectedPersonalization": {
            "description": "Defines a selected personalization.",
            "required": [
                "personalizationKey",
                "parameterKey",
                "quantity"
            ],
            "type": "object",
            "properties": {
                "personalizationKey": {
                    "description": "The unique personalization key selected.",
                    "type": "string",
                    "example": ""
                },
                "parameterKey": {
                    "description": "The unique personalization parameter key selected.",
                    "type": "string",
                    "example": ""
                },
                "value": {
                    "description": "The parameter input value.",
                    "type": "string",
                    "example": ""
                },
                "quantity": {
                    "format": "int32",
                    "description": "The parameter quantity.",
                    "type": "integer"
                }
            }
        },
        "QuotedProduct": {
            "description": "Defines a quoted product and all of its containing orders.",
            "type": "object",
            "properties": {
                "productKey": {
                    "description": "The quoted product key.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/OrderAddress",
                    "description": "The order's address."
                },
                "phoneNumbers": {
                    "description": "The collection of available phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                },
                "locations": {
                    "description": "The collection of order locations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderLocation"
                    }
                },
                "orders": {
                    "description": "The quoted product orders.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QuotedOrder"
                    }
                }
            }
        },
        "OrderAddress": {
            "description": "Defines an address with GPS coordinates.",
            "type": "object",
            "properties": {
                "coordinates": {
                    "$ref": "#/definitions/Coordinate",
                    "description": "The GPS coordinates associated with this item address."
                },
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrderLocation": {
            "description": "Defines a location.",
            "required": [
                "code",
                "usageDate"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "description": "The location description.",
                    "type": "string",
                    "example": ""
                },
                "code": {
                    "description": "The unique location code.",
                    "type": "string",
                    "example": ""
                },
                "utcOffset": {
                    "format": "float",
                    "description": "The UTC offset.",
                    "type": "number"
                },
                "usageDate": {
                    "format": "date-time",
                    "description": "The usage date at this location.",
                    "type": "string"
                }
            }
        },
        "QuotedOrder": {
            "description": "Defines a product order.",
            "type": "object",
            "properties": {
                "catalogKey": {
                    "description": "The quoted catalog key.",
                    "type": "string",
                    "example": ""
                },
                "orderKey": {
                    "description": "The unique order key.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The product type code.",
                    "enum": [
                        "Default",
                        "Insurance",
                        "Activity",
                        "Hotel",
                        "Car"
                    ],
                    "type": "string"
                },
                "active": {
                    "description": "Flag indicating if the order is active.",
                    "type": "boolean",
                    "example": false
                },
                "isValid": {
                    "description": "Flag indicating the order is valid.",
                    "type": "boolean",
                    "example": false
                },
                "criteria": {
                    "$ref": "#/definitions/OrderCriteria",
                    "description": "The specific order criteria."
                },
                "isNew": {
                    "description": "Flag indicating the order is flagged as new.",
                    "type": "boolean",
                    "example": false
                },
                "thumbnailFileName": {
                    "description": "The thumbnail file name.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The order's culture code.",
                    "type": "string",
                    "example": ""
                },
                "quantity": {
                    "format": "int32",
                    "description": "The quantity.",
                    "type": "integer"
                },
                "personalizations": {
                    "description": "The collection of available personalizations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Personalization"
                    }
                },
                "usageDate": {
                    "format": "date-time",
                    "description": "The usage date for this order.",
                    "type": "string"
                },
                "parameters": {
                    "description": "The collection of dynamic order input parameters.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    }
                },
                "externalLocator": {
                    "description": "The third party external locator.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The orders description.",
                    "type": "string",
                    "example": ""
                },
                "descriptionFormatType": {
                    "description": "The order descriptions format type.",
                    "type": "string",
                    "example": ""
                },
                "productDescription": {
                    "description": "The products description.",
                    "type": "string",
                    "example": ""
                },
                "productVariationDescription": {
                    "description": "The products variations description.",
                    "type": "string",
                    "example": ""
                },
                "paymentAction": {
                    "description": "The payment action.",
                    "enum": [
                        "SellingSystemCollects",
                        "PassThroughHold",
                        "NoPaymentRequired",
                        "ReferToSupplierMessage",
                        "PassThroughCharge"
                    ],
                    "type": "string"
                },
                "amounts": {
                    "$ref": "#/definitions/OrderPriceBreakdown",
                    "description": "The pricing breakdown."
                },
                "terms": {
                    "description": "The collection of terms and conditions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Term"
                    }
                },
                "cancellationTerms": {
                    "description": "The collection of cancellation terms and conditions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Term"
                    }
                },
                "details": {
                    "description": "The collection of product variation details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductVariationDetail"
                    }
                },
                "fees": {
                    "description": "The collection of applied fees.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderFee"
                    }
                },
                "notes": {
                    "description": "The collection of notes about the order.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderNote"
                    }
                }
            }
        },
        "Coordinate": {
            "description": "The defined coordinates of a location.",
            "required": [
                "latitude",
                "longitude"
            ],
            "type": "object",
            "properties": {
                "latitude": {
                    "description": "The locations latitude.",
                    "type": "string",
                    "example": ""
                },
                "longitude": {
                    "description": "The locations longitude.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrderCriteria": {
            "description": "Defines a products order criteria.",
            "type": "object",
            "properties": {
                "catalogCode": {
                    "description": "The catalog code.",
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code (source or market of the customer).",
                    "type": "string",
                    "example": ""
                },
                "supplierCode": {
                    "description": "The suppliers code.",
                    "type": "string",
                    "example": ""
                },
                "departmentCode": {
                    "description": "The department code.",
                    "type": "string",
                    "example": ""
                },
                "vendorCode": {
                    "description": "The orders vendor.",
                    "type": "string",
                    "example": ""
                },
                "companyCode": {
                    "description": "The company code.",
                    "type": "string",
                    "example": ""
                },
                "ratingCode": {
                    "description": "The rating code.",
                    "type": "string",
                    "example": ""
                },
                "discountCode": {
                    "description": "The discount code.",
                    "type": "string",
                    "example": ""
                },
                "promotionCode": {
                    "description": "The promotion code.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "type": "string",
                    "example": ""
                },
                "categoryCode": {
                    "description": "The category code to search with.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Personalization": {
            "description": "Defines an available personalization for an add-on.",
            "type": "object",
            "properties": {
                "personalizationKey": {
                    "description": "The unique personalization key.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount if valid. If the price is not valid the price will be null.",
                    "type": "number"
                },
                "limit": {
                    "format": "int32",
                    "description": "The available limit allowed.",
                    "type": "integer"
                },
                "description": {
                    "description": "The personalization description to show.",
                    "type": "string",
                    "example": ""
                },
                "dataType": {
                    "description": "The display data type.",
                    "enum": [
                        "Unknown",
                        "Bool",
                        "List",
                        "Text",
                        "Date"
                    ],
                    "type": "string"
                },
                "inputRequired": {
                    "description": "Flag indicating that user input is required.",
                    "type": "boolean",
                    "example": false
                },
                "options": {
                    "description": "The collection of personalization parameter options.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonalizationParameter"
                    }
                }
            }
        },
        "Parameter": {
            "description": "Defines a supplier parameter.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The unique code for a supplier parameter.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrderPriceBreakdown": {
            "description": "Defines all the different order price breakdown.",
            "type": "object",
            "properties": {
                "display": {
                    "$ref": "#/definitions/Amount",
                    "description": "The display prices."
                },
                "initial": {
                    "$ref": "#/definitions/Amount",
                    "description": "The initial base prices."
                },
                "markup": {
                    "$ref": "#/definitions/Amount",
                    "description": "The markup prices."
                },
                "listed": {
                    "$ref": "#/definitions/Amount",
                    "description": "The list prices."
                },
                "listedDiscount": {
                    "$ref": "#/definitions/Amount",
                    "description": "The list discount prices."
                },
                "discount": {
                    "$ref": "#/definitions/Amount",
                    "description": "The discount prices."
                },
                "handling": {
                    "$ref": "#/definitions/Amount",
                    "description": "The handling charge prices."
                },
                "handlingDiscount": {
                    "$ref": "#/definitions/Amount",
                    "description": "The handling charge discount prices."
                },
                "dueNow": {
                    "$ref": "#/definitions/AmountDue",
                    "description": "The amounts due now at payment."
                },
                "dueLater": {
                    "$ref": "#/definitions/AmountDue",
                    "description": "The amounts due later at pickup."
                },
                "personalizations": {
                    "format": "double",
                    "description": "The personalized total.",
                    "type": "number"
                },
                "taxable": {
                    "format": "double",
                    "description": "The taxable total.",
                    "type": "number"
                },
                "services": {
                    "format": "double",
                    "description": "The services total.",
                    "type": "number"
                },
                "fees": {
                    "format": "double",
                    "description": "The fees total.",
                    "type": "number"
                },
                "total": {
                    "format": "double",
                    "description": "The overall cost.",
                    "type": "number"
                },
                "taxRate": {
                    "format": "int32",
                    "description": "The applied tax rate.",
                    "type": "integer"
                },
                "taxExempt": {
                    "description": "Flag indicating if taxes are exempt.",
                    "type": "boolean",
                    "example": false
                },
                "taxAtUnitPrice": {
                    "description": "Flag indicating if taxed at the unit price.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Term": {
            "description": "Defines the terms and conditions of an order.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The terms and conditions code.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description.",
                    "type": "string",
                    "example": ""
                },
                "terms": {
                    "description": "The terms.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ProductVariationDetail": {
            "description": "Defines a products variation detail.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The product variation detail code.",
                    "type": "string",
                    "example": ""
                },
                "styleCode": {
                    "description": "The style code.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The product variation detail description.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrderFee": {
            "description": "Defines a order fee.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The fee code.",
                    "type": "string",
                    "example": ""
                },
                "feeCategoryCode": {
                    "description": "The charge type code.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The fee description.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "$ref": "#/definitions/Amount",
                    "description": "The fees amounts."
                },
                "foreignAmount": {
                    "$ref": "#/definitions/Amount",
                    "description": "The fees foreign amounts."
                },
                "type": {
                    "description": "The type of fee applied.",
                    "enum": [
                        "Default",
                        "Tax",
                        "Markup",
                        "Discount"
                    ],
                    "type": "string"
                },
                "isWaiveable": {
                    "description": "Flag indicating if they specific fee is waiveable.",
                    "type": "boolean",
                    "example": false
                },
                "foreignCurrencyCode": {
                    "description": "The foreign currency code.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "type": "string",
                    "example": ""
                },
                "isChargeable": {
                    "description": "The currency code.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "OrderNote": {
            "description": "Defines a order note.",
            "type": "object",
            "properties": {
                "text": {
                    "description": "The notes text.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The notes description (used to identity the note).",
                    "type": "string",
                    "example": ""
                },
                "created": {
                    "format": "date-time",
                    "description": "The created date.",
                    "type": "string"
                },
                "modified": {
                    "format": "date-time",
                    "description": "The modified date.",
                    "type": "string"
                }
            }
        },
        "PersonalizationParameter": {
            "description": "Defines a personalization parameter. A parameter is used for display purposes to show what is considered an\r\nacceptable\r\nrespone.",
            "type": "object",
            "properties": {
                "parameterKey": {
                    "description": "The unique parameter key.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The parameters description.",
                    "type": "string",
                    "example": ""
                },
                "default": {
                    "description": "Flag indicating that the parameter is the default.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Amount": {
            "description": "Defines an amount base price and total price.",
            "type": "object",
            "properties": {
                "value": {
                    "format": "double",
                    "description": "The base amount value.",
                    "type": "number"
                },
                "total": {
                    "format": "double",
                    "description": "The total amount.",
                    "type": "number"
                }
            }
        },
        "AmountDue": {
            "description": "Defines the amounts due for an order.",
            "type": "object",
            "properties": {
                "preTax": {
                    "format": "double",
                    "description": "The pre tax total.",
                    "type": "number"
                },
                "tax": {
                    "format": "double",
                    "description": "The tax total.",
                    "type": "number"
                },
                "total": {
                    "format": "double",
                    "description": "The total.",
                    "type": "number"
                }
            }
        },
        "SellTokenRequest": {
            "description": "Defines a product sell token request.",
            "required": [
                "productKey"
            ],
            "type": "object",
            "properties": {
                "items": {
                    "description": "The selected unique product variations catalog keys and quantities.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SellTokenCatalogRequest"
                    }
                },
                "productKey": {
                    "description": "The selected unique product key.",
                    "type": "string",
                    "example": ""
                },
                "primaryPassengerKey": {
                    "description": "The primary passenger key. If the the passenger key is not set it defaults to the first passenger on\r\nthe booking.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SellTokenCatalogRequest": {
            "description": "Defines a sell token catalog request. This request is used for selling a specific products product variation\r\ncatalog item.",
            "required": [
                "catalogKey",
                "quantity"
            ],
            "type": "object",
            "properties": {
                "parameters": {
                    "description": "The collection of dynamic order parameters to include.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "catalogKey": {
                    "description": "The selected unique product variations catalog key.",
                    "type": "string",
                    "example": ""
                },
                "quantity": {
                    "format": "int32",
                    "description": "The desired quantity.",
                    "type": "integer"
                },
                "personalizations": {
                    "description": "The collection of desired personalizations to be quoted with the product.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SelectedPersonalization"
                    }
                }
            }
        },
        "AddOn": {
            "description": "Defines a booking add on service details.",
            "type": "object",
            "properties": {
                "paymentRequired": {
                    "description": "Returns true if the component requires a separate\r\npayment from the rest of the booking.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "addOnKey": {
                    "description": "The unique add on key.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of add on.",
                    "enum": [
                        "Default",
                        "Insurance",
                        "Activity",
                        "Hotel",
                        "Car"
                    ],
                    "type": "string"
                },
                "summary": {
                    "$ref": "#/definitions/AddOnOrderSummary",
                    "description": "The components order summary when the order is not available."
                },
                "reference": {
                    "description": "The component reference.",
                    "type": "string",
                    "example": ""
                },
                "created": {
                    "$ref": "#/definitions/CreatedAddOnDetails",
                    "description": "The created by details."
                },
                "source": {
                    "$ref": "#/definitions/AddOnDetails",
                    "description": "The responsible source details."
                },
                "declinedText": {
                    "description": "The declined component text.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                },
                "modifiedDate": {
                    "format": "date-time",
                    "description": "The date the component was last modified.",
                    "type": "string"
                },
                "modifiedAgentReference": {
                    "description": "The agent reference that modified the component.",
                    "type": "string",
                    "example": ""
                },
                "order": {
                    "$ref": "#/definitions/Order",
                    "description": "The component order details."
                },
                "isHistorical": {
                    "description": "Flag indicating if the component is historical.",
                    "type": "boolean",
                    "example": false
                },
                "charges": {
                    "description": "The collection of booking component charges.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddOnCharge"
                    }
                }
            }
        },
        "AddOnOrderSummary": {
            "description": "Defines the details about an order if the order is not available.",
            "type": "object",
            "properties": {
                "total": {
                    "format": "double",
                    "description": "The total price of the order.",
                    "type": "number"
                },
                "held": {
                    "format": "double",
                    "description": "The total held amount of the order.",
                    "type": "number"
                },
                "charged": {
                    "format": "double",
                    "description": "The total charged amount of the order.",
                    "type": "number"
                },
                "supplierCode": {
                    "description": "The orders supplier code.",
                    "type": "string",
                    "example": ""
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The orders begin date.",
                    "type": "string"
                },
                "beginLocation": {
                    "description": "The orders begin location code.",
                    "type": "string",
                    "example": ""
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The orders end date.",
                    "type": "string"
                },
                "endLocation": {
                    "description": "The orders end location code.",
                    "type": "string",
                    "example": ""
                },
                "externalReference": {
                    "description": "The orders suppliers external reference (record locator).",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The orders description.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "CreatedAddOnDetails": {
            "description": "Defines a component details.",
            "type": "object",
            "properties": {
                "agentReference": {
                    "description": "The agent key.",
                    "type": "string",
                    "example": ""
                },
                "agentCode": {
                    "description": "The created agent code.",
                    "type": "string",
                    "example": ""
                },
                "date": {
                    "format": "date-time",
                    "description": "The date created.",
                    "type": "string"
                },
                "organizationCode": {
                    "description": "The created organization code.",
                    "type": "string",
                    "example": ""
                },
                "domainCode": {
                    "description": "The created domain code.",
                    "type": "string",
                    "example": ""
                },
                "locationCode": {
                    "description": "The created location code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AddOnDetails": {
            "description": "Defines a booking add on base details.",
            "type": "object",
            "properties": {
                "agentCode": {
                    "description": "The created agent code.",
                    "type": "string",
                    "example": ""
                },
                "organizationCode": {
                    "description": "The created organization code.",
                    "type": "string",
                    "example": ""
                },
                "domainCode": {
                    "description": "The created domain code.",
                    "type": "string",
                    "example": ""
                },
                "locationCode": {
                    "description": "The created location code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Order": {
            "description": "Defines a order.",
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/OrderAddress",
                    "description": "The orders address."
                },
                "orderKey": {
                    "description": "The unique order key.",
                    "type": "string",
                    "example": ""
                },
                "phoneNumbers": {
                    "description": "The collection of available phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                },
                "active": {
                    "description": "Flag indicating if the order is active.",
                    "type": "boolean",
                    "example": false
                },
                "locations": {
                    "description": "The collection of order locations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderLocation"
                    }
                },
                "criteria": {
                    "$ref": "#/definitions/OrderCriteria",
                    "description": "The specific order criteria."
                },
                "customer": {
                    "$ref": "#/definitions/OrderCustomer",
                    "description": "The oder customer."
                },
                "thumbnailFileName": {
                    "description": "The thumbnail file name.",
                    "type": "string",
                    "example": ""
                },
                "participants": {
                    "description": "The collection of order participants.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/OrderParticipant"
                        }
                    }
                },
                "quantity": {
                    "format": "int32",
                    "description": "The quantity.",
                    "type": "integer"
                },
                "history": {
                    "description": "The collection of order history entry history.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderHistory"
                    }
                },
                "usageDate": {
                    "format": "date-time",
                    "description": "The usage date for this order.",
                    "type": "string"
                },
                "payment": {
                    "$ref": "#/definitions/OrderPayment",
                    "description": "The applied payment."
                },
                "externalLocator": {
                    "description": "The third party external locator.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The orders description.",
                    "type": "string",
                    "example": ""
                },
                "descriptionFormatType": {
                    "description": "The order descriptions format type.",
                    "type": "string",
                    "example": ""
                },
                "productDescription": {
                    "description": "The products description.",
                    "type": "string",
                    "example": ""
                },
                "productVariationDescription": {
                    "description": "The products variations description.",
                    "type": "string",
                    "example": ""
                },
                "paymentAction": {
                    "description": "The payment action.",
                    "enum": [
                        "SellingSystemCollects",
                        "PassThroughHold",
                        "NoPaymentRequired",
                        "ReferToSupplierMessage",
                        "PassThroughCharge"
                    ],
                    "type": "string"
                },
                "amounts": {
                    "$ref": "#/definitions/OrderPriceBreakdown",
                    "description": "The pricing breakdown."
                },
                "terms": {
                    "description": "The collection of terms and conditions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Term"
                    }
                },
                "cancellationTerms": {
                    "description": "The collection of cancellation terms and conditions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Term"
                    }
                },
                "details": {
                    "description": "The collection of product variation details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductVariationDetail"
                    }
                },
                "fees": {
                    "description": "The collection of applied fees.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderFee"
                    }
                },
                "notes": {
                    "description": "The collection of notes about the order.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderNote"
                    }
                },
                "parameters": {
                    "description": "The collection of dynamic order inputed parameters.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InputedParameter"
                    }
                }
            }
        },
        "AddOnCharge": {
            "description": "Defines a booking add ons charge.",
            "type": "object",
            "properties": {
                "type": {
                    "description": "The charge type.",
                    "enum": [
                        "FarePrice",
                        "Discount",
                        "IncludedTravelFee",
                        "IncludedTax",
                        "TravelFee",
                        "Tax",
                        "ServiceCharge",
                        "PromotionDiscount",
                        "ConnectionAdjustmentAmount",
                        "AddOnsPrice",
                        "FarePoints",
                        "DiscountPoints",
                        "IncludedAddOnsFee",
                        "AddOnsFee",
                        "AddOnsMarkup",
                        "FareSurcharge",
                        "Loyalty",
                        "AddOnsCancelFee",
                        "Calculated",
                        "Note"
                    ],
                    "type": "string"
                },
                "code": {
                    "description": "The charge code.",
                    "type": "string",
                    "example": ""
                },
                "ticketCode": {
                    "description": "The charge ticket code.",
                    "type": "string",
                    "example": ""
                },
                "collection": {
                    "description": "The charge collection type.",
                    "enum": [
                        "SellerChargeable",
                        "ExternalChargeable",
                        "SellerNonChargeable",
                        "ExternalNonChargeable",
                        "ExternalChargeableImmediate"
                    ],
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The charged amount.",
                    "type": "number"
                },
                "details": {
                    "description": "The charge details.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrderCustomer": {
            "description": "Defines an order customer contact details.",
            "type": "object",
            "properties": {
                "customerKey": {
                    "description": "The unique customer key.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name of the consumer."
                },
                "customerNumber": {
                    "description": "The customer number.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/ConsumerAddress",
                    "description": "The address of the consumer."
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth of the consumer.",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The email address of the consumer.",
                    "type": "string",
                    "example": ""
                },
                "companyName": {
                    "description": "The company name of the consumer.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of consumer (business or residental).",
                    "type": "string",
                    "example": ""
                },
                "homePhone": {
                    "description": "The home phone number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "workPhone": {
                    "description": "The work phone number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fax": {
                    "description": "The fax phone number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrderParticipant": {
            "description": "Defines a orders participant.",
            "type": "object",
            "properties": {
                "participantKey": {
                    "description": "The unique participant key.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The participant description.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name of the consumer."
                },
                "participantTypeCode": {
                    "description": "The participant type code.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/ConsumerAddress",
                    "description": "The address of the consumer."
                },
                "isPrimary": {
                    "description": "Flag indicating if the participant is the primary.",
                    "type": "boolean",
                    "example": false
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth of the consumer.",
                    "type": "string"
                },
                "document": {
                    "$ref": "#/definitions/ParticipantDocument",
                    "description": "The participant document."
                },
                "emailAddress": {
                    "description": "The email address of the consumer.",
                    "type": "string",
                    "example": ""
                },
                "companyName": {
                    "description": "The company name of the consumer.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of consumer (business or residental).",
                    "type": "string",
                    "example": ""
                },
                "homePhone": {
                    "description": "The home phone number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "workPhone": {
                    "description": "The work phone number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fax": {
                    "description": "The fax phone number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrderHistory": {
            "description": "Defines a order history transaction.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The status code.",
                    "type": "string",
                    "example": ""
                },
                "previousCode": {
                    "description": "The previous status code.",
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The history note.",
                    "type": "string",
                    "example": ""
                },
                "created": {
                    "format": "date-time",
                    "description": "The history entry created date.",
                    "type": "string"
                },
                "hasError": {
                    "description": "Flag indicating if has an error.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "OrderPayment": {
            "description": "Defines a payment on an order.",
            "required": [
                "type",
                "number"
            ],
            "type": "object",
            "properties": {
                "paymentKey": {
                    "description": "The unique order payment key.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The payment type.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code the payment is in (will always be set to the bookings currency code).",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name on the payment."
                },
                "number": {
                    "description": "The number on the payment.",
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The expiration date.",
                    "type": "string"
                },
                "cvv": {
                    "description": "The CVV on the payment.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The applied payment amount.",
                    "type": "number"
                },
                "description": {
                    "description": "The payment description.",
                    "type": "string",
                    "example": ""
                },
                "issueNumber": {
                    "description": "The payment issue number.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The payments address."
                },
                "emailAddress": {
                    "description": "The provided email address.",
                    "type": "string",
                    "example": ""
                },
                "phoneNumbers": {
                    "description": "The collection of phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                }
            }
        },
        "InputedParameter": {
            "description": "Defines a parameter with data input.",
            "type": "object",
            "properties": {
                "value": {
                    "description": "The parameters value.",
                    "type": "string",
                    "example": ""
                },
                "code": {
                    "description": "The unique code for a supplier parameter.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ConsumerAddress": {
            "description": "Defines a consumer address.",
            "type": "object",
            "properties": {
                "county": {
                    "description": "The address country.",
                    "type": "string",
                    "example": ""
                },
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ParticipantDocument": {
            "description": "Defines a consumer document.",
            "type": "object",
            "properties": {
                "number": {
                    "description": "The documents number.",
                    "type": "string",
                    "example": ""
                },
                "issuedByCode": {
                    "description": "The documents issued by code.",
                    "type": "string",
                    "example": ""
                },
                "documentTypeCode": {
                    "description": "The documents type code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AddressType": {
            "description": "The Address Type",
            "required": [
                "addressTypeCode"
            ],
            "type": "object",
            "properties": {
                "addressTypeCode": {
                    "description": "The address type code.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the address type.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The InActive of Address type.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "AgentSettingType": {
            "description": "The agent setting type.",
            "type": "object",
            "properties": {
                "agentSettingTypeCode": {
                    "description": "The setting type code.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The setting type name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                },
                "schema": {
                    "description": "The data schema.",
                    "maxLength": 2147483647,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Station": {
            "description": "Defines a station.",
            "required": [
                "stationCode"
            ],
            "type": "object",
            "properties": {
                "stationCode": {
                    "description": "The station unique code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The flag indicating if the station is inactive.",
                    "type": "boolean",
                    "example": false
                },
                "allowed": {
                    "description": "<b>Deprecated</b> - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.",
                    "type": "boolean",
                    "example": false
                },
                "icaoCode": {
                    "description": "The stations unique ICAO code. //todo: document and expand acronym",
                    "type": "string",
                    "example": ""
                },
                "fullName": {
                    "description": "The full display name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "shortName": {
                    "description": "The short display name.",
                    "type": "string",
                    "example": ""
                },
                "macCode": {
                    "description": "The stations MAC (multiple airport code) code.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The stations default currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "conversionCurrencyCode": {
                    "description": "The stations configured conversion currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "maxLength": 17,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "class": {
                    "description": "The stations configured class.",
                    "type": "string"
                },
                "locationDetails": {
                    "$ref": "#/definitions/StationLocationDetails",
                    "description": "The stations location details."
                }
            }
        },
        "StationLocationDetails": {
            "description": "Defines the station location details.",
            "type": "object",
            "properties": {
                "coordinates": {
                    "$ref": "#/definitions/Coordinate",
                    "description": "The coordinates of the station."
                },
                "zoneCode": {
                    "description": "The geographical location code (i.e. North America, Europe).",
                    "type": "string",
                    "example": ""
                },
                "subZoneCode": {
                    "description": "The sub zone code based on the geographical location (i.e. USA, Canada).",
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code the station exists in.",
                    "type": "string",
                    "example": ""
                },
                "provinceStateCode": {
                    "description": "The province or state the station exists in.",
                    "type": "string",
                    "example": ""
                },
                "cityCode": {
                    "description": "The city the station exists in.",
                    "type": "string",
                    "example": ""
                },
                "timeZoneCode": {
                    "description": "The configured timezone of the station.",
                    "type": "string",
                    "example": ""
                },
                "thirdPartyControlled": {
                    "description": "The flag indicating if the station is controlled via a third party.",
                    "type": "boolean",
                    "example": false
                },
                "customsRequiredForCrew": {
                    "description": "The flag indicating if customs is required for crew members.",
                    "type": "boolean",
                    "example": false
                },
                "weightType": {
                    "description": "The stations configured weight units of measurement.",
                    "enum": [
                        "Default",
                        "Pounds",
                        "Kilograms"
                    ],
                    "type": "string"
                }
            }
        },
        "ResourceEntries[StationDetail]": {
            "description": "Model representing the resource entries.",
            "type": "object",
            "properties": {
                "expiration": {
                    "format": "date-time",
                    "description": "The expiration.",
                    "type": "string"
                },
                "values": {
                    "description": "The value.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StationDetail"
                    }
                },
                "eTag": {
                    "description": "The ETag.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "StationDetail": {
            "description": "Defines station details.",
            "type": "object",
            "properties": {
                "categories": {
                    "description": "The station categories by category code. If empty all categories are supported.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "feeZones": {
                    "description": "The fee zones by code.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "Area": {
            "description": "The area model.",
            "type": "object",
            "properties": {
                "areaCode": {
                    "description": "Gets or sets the code for this area.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "Gets or sets the description of this area.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "Gets or sets the name of this area.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "zones": {
                    "description": "Gets or sets the list of zones associated with this area.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Zone"
                    }
                }
            }
        },
        "Zone": {
            "description": "The zone model.",
            "required": [
                "areaCode",
                "zoneCode"
            ],
            "type": "object",
            "properties": {
                "areaCode": {
                    "description": "Gets or sets the area code of this zone.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "Gets or sets the name of this zone.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "subZones": {
                    "description": "Gets or sets the list of subzones associated with this zone.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubZone"
                    }
                },
                "zoneCode": {
                    "description": "Gets or sets the zone code of this zone.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SubZone": {
            "description": "The subzone model.",
            "required": [
                "areaCode",
                "subZoneCode",
                "zoneCode"
            ],
            "type": "object",
            "properties": {
                "areaCode": {
                    "description": "Gets or sets the area code for this subzone.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "Gets or sets the name of this subzone.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "stations": {
                    "description": "Gets or sets the list of stations associated with this subzone.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Station"
                    }
                },
                "subZoneCode": {
                    "description": "Gets or sets the subzone code for this subzone.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "zoneCode": {
                    "description": "Gets or sets the zone code for this subzone.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AutoAssignRequest": {
            "description": "Defines the auto assign seat request.",
            "type": "object",
            "properties": {
                "preferences": {
                    "$ref": "#/definitions/SeatPreferences",
                    "description": "The list of seat preferences for the primary passenger."
                },
                "waiveFee": {
                    "description": "The flag indicating to waive the seat fees if permissions permit.",
                    "type": "boolean"
                },
                "seatedNearPrimary": {
                    "description": "The list of passenger keys for seating assignments near\r\nthe primary passenger.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "inventoryControl": {
                    "description": "Indicates the type of hold placed on a unit.",
                    "enum": [
                        "Session",
                        "None"
                    ],
                    "type": "string"
                }
            }
        },
        "SeatPreferences": {
            "description": "Represents the seating preferences base model.",
            "type": "object",
            "properties": {
                "seat": {
                    "description": "The simple seating preference.",
                    "enum": [
                        "None",
                        "Window",
                        "Aisle",
                        "Other"
                    ],
                    "type": "string"
                },
                "travelClass": {
                    "description": "The prefered travel class of service.",
                    "enum": [
                        "None",
                        "Business",
                        "Economy",
                        "FirstClass"
                    ],
                    "type": "string"
                },
                "advancedPreferences": {
                    "description": "The advanced seating preferences.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SeatPreference"
                    }
                }
            }
        },
        "SeatPreference": {
            "description": "Represents a single seat preference.",
            "required": [
                "seatMapCode",
                "value"
            ],
            "type": "object",
            "properties": {
                "seatMapCode": {
                    "description": "The seat map code (ex. 'SMOKING').",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "value": {
                    "description": "The seat map value (ex. 'TRUE').",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AvailabilitySimpleRequest": {
            "description": "Model representing an availability simple request.",
            "required": [
                "origin",
                "destination",
                "beginDate",
                "passengers"
            ],
            "type": "object",
            "properties": {
                "origin": {
                    "description": "The origin station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "destination": {
                    "description": "The destination station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The departure date.",
                    "type": "string"
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The return date. This date represents the return trip's selected day.",
                    "type": "string"
                },
                "passengers": {
                    "description": "The list of passenger search criteria.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerSearchCriteria"
                    }
                },
                "promotionCode": {
                    "description": "The promo code to be applied.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The search currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "loyaltyFilter": {
                    "description": "The loyalty fare filter.",
                    "enum": [
                        "MonetaryOnly",
                        "PointsOnly",
                        "PointsAndMonetary",
                        "PreserveCurrent"
                    ],
                    "type": "string"
                }
            }
        },
        "PassengerSearchCriteria": {
            "description": "Model representing an passenger group type for availability search.",
            "required": [
                "type",
                "count"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The passenger type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "discountCode": {
                    "description": "The discount code to be applied.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "count": {
                    "format": "int32",
                    "description": "The number of passenger for the type.",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "Availability": {
            "description": "Availability contains all information returned when requesting flight availability.",
            "type": "object",
            "properties": {
                "trips": {
                    "description": "The collection of trips.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Trip"
                    }
                },
                "faresAvailable": {
                    "description": "The aggregate collection of fares available for all trips.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/FareAvailability"
                        }
                    }
                },
                "currencyCode": {
                    "description": "The currency code used on all trips.",
                    "maxLength": 17,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "includeTaxesAndFees": {
                    "description": "Flag indicating if the trip includes taxes and fees.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Trip": {
            "description": "Trip model representing a slim version of a core Availability Schedule.",
            "required": [
                "origin",
                "destination"
            ],
            "type": "object",
            "properties": {
                "origin": {
                    "description": "The arrival station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "destination": {
                    "description": "The destination station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "journeysAvailable": {
                    "description": "Journey collection.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JourneyAvailability"
                    }
                }
            }
        },
        "FareAvailability": {
            "description": "Model describing common fare availability information for an entire availability request.",
            "type": "object",
            "properties": {
                "isGoverning": {
                    "description": "Flag that indicates if the fare is the governing fare.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "downgradeAvailable": {
                    "description": "Flag indicating if a downgrade is available.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "fareAvailabilityKey": {
                    "description": "Unique key for this type of fare.",
                    "type": "string",
                    "example": ""
                },
                "fareCode": {
                    "description": "The fare basis code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "isSumOfSector": {
                    "description": "The value indicating if the fare is sum of sector.",
                    "type": "boolean",
                    "example": false
                },
                "classOfService": {
                    "description": "The class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "classType": {
                    "description": "The fares type of the class.",
                    "type": "string",
                    "example": ""
                },
                "fareApplicationType": {
                    "description": "The type of the fare application.",
                    "enum": [
                        "Route",
                        "Sector",
                        "Governing"
                    ],
                    "type": "string"
                },
                "fareClassOfService": {
                    "description": "The fare class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fareSequence": {
                    "format": "int32",
                    "description": "The fare sequence.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "fareStatus": {
                    "description": "The fare status.",
                    "enum": [
                        "Default",
                        "SameDayStandBy",
                        "FareOverrideConfirming",
                        "FareOverrideConfirmed",
                        "PublishedFareOverrideConfirming",
                        "PublishedFareOverrideConfirmed"
                    ],
                    "type": "string"
                },
                "inboundOutBound": {
                    "description": "The inbound and outbound.",
                    "enum": [
                        "None",
                        "Inbound",
                        "Outbound",
                        "Both",
                        "RoundFrom",
                        "RoundTo"
                    ],
                    "type": "string"
                },
                "isAllotmentMarketFare": {
                    "description": "Gets or sets a value indicating whether this fare is an allotment marker.",
                    "type": "boolean",
                    "example": false
                },
                "productClass": {
                    "description": "The product class.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ruleNumber": {
                    "description": "The rule number.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ruleTariff": {
                    "description": "The rule tariff.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "travelClassCode": {
                    "description": "The travel class code.",
                    "type": "string"
                },
                "passengerFares": {
                    "description": "The list of passenger fares on the fare.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerFareAvailability"
                    }
                }
            }
        },
        "JourneyAvailability": {
            "description": "Defines a journey availability.",
            "type": "object",
            "properties": {
                "flightType": {
                    "description": "Returns a flight type enumeration. (NonStop, Thru, etc.)",
                    "enum": [
                        "None",
                        "NonStop",
                        "Through",
                        "Direct",
                        "Connect",
                        "All"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "stops": {
                    "format": "int32",
                    "description": "The total number of stops this flight takes.",
                    "type": "integer",
                    "readOnly": true
                },
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "This is a summary of all the segments. It will contain the details\r\nof the transportation from the first and last segment.",
                    "readOnly": true
                },
                "fares": {
                    "description": "The journey fares which contain only the key and journey specific information of the fare.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/JourneyFareAvailability"
                        }
                    }
                },
                "journeyKey": {
                    "description": "The unique identifier for this journey sell information.",
                    "type": "string",
                    "example": ""
                },
                "segments": {
                    "description": "The collection of segments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AvailabilitySegment"
                    }
                },
                "notForGeneralUser": {
                    "description": "A value indicating whether the journey is for a general user.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PassengerFareAvailability": {
            "description": "Model describing common fare availability information for an entire availability request.",
            "required": [
                "passengerType"
            ],
            "type": "object",
            "properties": {
                "fareDiscountCode": {
                    "description": "The fare discount code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerDiscountCode": {
                    "description": "The passenger discount code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerType": {
                    "description": "The type of the passenger.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fareAmount": {
                    "format": "double",
                    "description": "The passenger fare total fare amount.",
                    "type": "number"
                },
                "revenueFare": {
                    "format": "double",
                    "description": "The passenger fare revenue fare amount.",
                    "type": "number"
                },
                "publishedFare": {
                    "format": "double",
                    "description": "The passenger fare published fare amount.",
                    "type": "number"
                },
                "loyaltyPoints": {
                    "format": "double",
                    "description": "The passenger fare loyalty points.",
                    "type": "number"
                },
                "discountedFare": {
                    "format": "double",
                    "description": "The discounted fare amount.",
                    "type": "number"
                },
                "serviceCharges": {
                    "description": "The service charges.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCharge"
                    }
                },
                "multiplier": {
                    "format": "int32",
                    "description": "The number of passengers with the same fare information represented by passenger type and discount code pair.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "TransportationDesignator": {
            "description": "Model information about the traveling arrival and destination details.",
            "type": "object",
            "properties": {
                "destination": {
                    "description": "Gets or sets the leg arrival station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "Gets or sets the leg departure station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "arrival": {
                    "format": "date-time",
                    "description": "The arrival date and time local to the arrival station.",
                    "type": "string"
                },
                "departure": {
                    "format": "date-time",
                    "description": "The departure date and time local to the departure station.",
                    "type": "string"
                }
            }
        },
        "JourneyFareAvailability": {
            "description": "Model describing the basic fare information that is displayed per availability segment.",
            "type": "object",
            "properties": {
                "fareAvailabilityKey": {
                    "description": "Unique key for this type of fare.",
                    "type": "string",
                    "example": ""
                },
                "fareCode": {
                    "description": "The fare basis code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "availableCount": {
                    "format": "int32",
                    "description": "The number of available fares.",
                    "type": "integer"
                },
                "isSumOfSector": {
                    "description": "The value indicating if the fare is sum of sector.",
                    "type": "boolean",
                    "example": false
                },
                "classOfService": {
                    "description": "The class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AvailabilitySegment": {
            "description": "Availability segment defines segment information before being booked.",
            "type": "object",
            "properties": {
                "isBlocked": {
                    "description": "Represents the blocked status of the segment.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isHosted": {
                    "description": "Represents the hosted status of the segment.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isChangeOfGauge": {
                    "description": "Represents the change of gauge status of the segment.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "This is a summarry of all the legs on the segment. It will contain the details\r\nof the transportation from the first and last leg.",
                    "readOnly": true
                },
                "isSeatmapViewable": {
                    "description": "Indicates if the seatmaps associated with the segment are viewable.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "segmentKey": {
                    "description": "The unique identifier for this segment sell information.",
                    "type": "string",
                    "example": ""
                },
                "identifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The transportation identifier."
                },
                "cabinOfService": {
                    "description": "The cabin of service.",
                    "type": "string"
                },
                "externalIdentifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The external transportation identifier."
                },
                "changeReasonCode": {
                    "description": "The change reason code.",
                    "enum": [
                        "NoChange",
                        "Irop",
                        "ScheduleChange",
                        "Move",
                        "VoluntaryFlyAhead",
                        "InvoluntaryFlyAhead"
                    ],
                    "type": "string"
                },
                "segmentType": {
                    "description": "The type of the segment.",
                    "enum": [
                        "Normal",
                        "CodeShareOperating",
                        "CodeShareMarketing",
                        "InterlineOutbound",
                        "InterlineInbound",
                        "Passive"
                    ],
                    "type": "string"
                },
                "international": {
                    "description": "The value indicating if this segment is international.",
                    "type": "boolean",
                    "example": false
                },
                "legs": {
                    "description": "The legs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Leg"
                    }
                }
            }
        },
        "ServiceCharge": {
            "description": "Model that represents the fare service charge information.",
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "description": "The service charge amount.",
                    "type": "number"
                },
                "code": {
                    "description": "The service charge code.",
                    "type": "string",
                    "example": ""
                },
                "detail": {
                    "description": "The service charge detail.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The service charge type.",
                    "enum": [
                        "FarePrice",
                        "Discount",
                        "IncludedTravelFee",
                        "IncludedTax",
                        "TravelFee",
                        "Tax",
                        "ServiceCharge",
                        "PromotionDiscount",
                        "ConnectionAdjustmentAmount",
                        "AddOnsPrice",
                        "FarePoints",
                        "DiscountPoints",
                        "IncludedAddOnsFee",
                        "AddOnsFee",
                        "AddOnsMarkup",
                        "FareSurcharge",
                        "Loyalty",
                        "AddOnsCancelFee",
                        "Calculated",
                        "Note"
                    ],
                    "type": "string"
                },
                "collectType": {
                    "description": "The service charge collect type.",
                    "enum": [
                        "SellerChargeable",
                        "ExternalChargeable",
                        "SellerNonChargeable",
                        "ExternalNonChargeable",
                        "ExternalChargeableImmediate"
                    ],
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The service charge currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "foreignCurrencyCode": {
                    "description": "The service charge foreign currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "foreignAmount": {
                    "format": "double",
                    "description": "The service charge foreign amount.",
                    "type": "number"
                },
                "ticketCode": {
                    "description": "The service charge ticket code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TransportationIdentifier": {
            "description": "Represents the transportation identifier model data.",
            "required": [
                "identifier",
                "carrierCode"
            ],
            "type": "object",
            "properties": {
                "identifier": {
                    "description": "The unique transportation identifier.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "carrierCode": {
                    "description": "The carrier code.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "opSuffix": {
                    "description": "The op suffix.",
                    "type": "string"
                }
            }
        },
        "Leg": {
            "description": "Model data describing the leg which is a single travel leg from point a to b.",
            "type": "object",
            "properties": {
                "legKey": {
                    "description": "The unique identifier for this leg sell information.",
                    "type": "string",
                    "example": ""
                },
                "operationsInfo": {
                    "$ref": "#/definitions/OperationsInformation",
                    "description": "The operations information."
                },
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "Transportation information."
                },
                "legInfo": {
                    "$ref": "#/definitions/LegInformation",
                    "description": "The leg information."
                },
                "nests": {
                    "description": "The collection of leg nests.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LegNest"
                    }
                },
                "ssrs": {
                    "description": "The Ssrs summary information.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LegSsr"
                    }
                },
                "seatmapReference": {
                    "description": "The reference identifying what seatmap the leg is in associated to.",
                    "type": "string",
                    "example": ""
                },
                "flightReference": {
                    "description": "The flight reference which signifies a link to a segment and or leg.",
                    "maxLength": 22,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OperationsInformation": {
            "description": "Model describing the operations information.",
            "type": "object",
            "properties": {
                "arrivalGate": {
                    "$ref": "#/definitions/GateInformation",
                    "description": "The arrival gate information."
                },
                "estimatedArrivalTime": {
                    "format": "date-time",
                    "description": "The estimated time of arrival (ETA).",
                    "type": "string"
                },
                "departureGate": {
                    "$ref": "#/definitions/GateInformation",
                    "description": "The departure gate information."
                },
                "actualOffBlockTime": {
                    "format": "date-time",
                    "description": "The actual off block time.",
                    "type": "string"
                },
                "actualOnBlockTime": {
                    "format": "date-time",
                    "description": "The actual on block time.",
                    "type": "string"
                },
                "actualTouchDownTime": {
                    "format": "date-time",
                    "description": "The actual touch down time.",
                    "type": "string"
                },
                "airborneTime": {
                    "format": "date-time",
                    "description": "The airborne time.",
                    "type": "string"
                },
                "arrivalNote": {
                    "description": "The arrival note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "arrivalStatus": {
                    "description": "The arrival status.",
                    "enum": [
                        "Default",
                        "Cancelled",
                        "Arrived",
                        "SeeAgent",
                        "Delayed"
                    ],
                    "type": "string"
                },
                "baggageClaim": {
                    "description": "The baggage claim.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "departureNote": {
                    "description": "The departure note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "departureStatus": {
                    "description": "The departure status.",
                    "enum": [
                        "Default",
                        "Cancelled",
                        "Boarding",
                        "SeeAgent",
                        "Delayed",
                        "Departed"
                    ],
                    "type": "string"
                },
                "departureTimes": {
                    "$ref": "#/definitions/DepartureEvent",
                    "description": "The departure time information."
                },
                "standardArrivalTime": {
                    "format": "date-time",
                    "description": "The standard time of arrival (STA).",
                    "type": "string"
                },
                "tailNumber": {
                    "description": "The tail number.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "LegInformation": {
            "description": "Model describing the detailed leg information.",
            "type": "object",
            "properties": {
                "departureTimeUtc": {
                    "format": "date-time",
                    "description": "The departure time using the time variant in universal time.",
                    "type": "string",
                    "readOnly": true
                },
                "arrivalTimeUtc": {
                    "format": "date-time",
                    "description": "The arrival time using the time variant in universal time.",
                    "type": "string",
                    "readOnly": true
                },
                "adjustedCapacity": {
                    "format": "int32",
                    "description": "The leg adjusted capacity.",
                    "type": "integer"
                },
                "arrivalTerminal": {
                    "description": "The leg arrival terminal.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "arrivalTimeVariant": {
                    "format": "int32",
                    "description": "The leg arrival Local Time Variant (LTV).",
                    "type": "integer"
                },
                "backMoveDays": {
                    "format": "int32",
                    "description": "The legs back move days.",
                    "type": "integer"
                },
                "capacity": {
                    "format": "int32",
                    "description": "The leg capacity.",
                    "type": "integer"
                },
                "changeOfDirection": {
                    "description": "A value indicating whether the leg has a change of direction.",
                    "type": "boolean",
                    "example": false
                },
                "codeShareIndicator": {
                    "description": "The leg code share indicator.",
                    "enum": [
                        "NonCodeShare",
                        "CodeShareCommercialDuplicate",
                        "SharedDesignatorOrWetLease",
                        "CodeShareHostOperatingCarrier"
                    ],
                    "type": "string"
                },
                "departureTerminal": {
                    "description": "The leg departure terminal.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "departureTimeVariant": {
                    "format": "int32",
                    "description": "The leg departure Local Time Variant (LTV).",
                    "type": "integer"
                },
                "equipmentType": {
                    "description": "The leg type of the equipment.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "equipmentTypeSuffix": {
                    "description": "The leg equipment type suffix.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "eTicket": {
                    "description": "A value indicating whether this leg is an e-ticketed leg.",
                    "type": "boolean",
                    "example": false
                },
                "irop": {
                    "description": "Gets or sets a value indicating whether this leg is an IROP.",
                    "type": "boolean",
                    "example": false
                },
                "lid": {
                    "format": "int32",
                    "description": "The legs lid.",
                    "type": "integer"
                },
                "marketingCode": {
                    "description": "The leg marketing code.",
                    "type": "string",
                    "example": ""
                },
                "marketingOverride": {
                    "description": "A value indicating whether the leg has a marketing override.",
                    "type": "boolean",
                    "example": false
                },
                "onTime": {
                    "description": "The legs on time.",
                    "type": "string"
                },
                "operatedByText": {
                    "description": "The leg \"operated by\" text.",
                    "type": "string",
                    "example": ""
                },
                "operatingCarrier": {
                    "description": "The leg operating carrier.",
                    "type": "string",
                    "example": ""
                },
                "operatingFlightNumber": {
                    "description": "The leg operating flight number.",
                    "type": "string",
                    "example": ""
                },
                "operatingOpSuffix": {
                    "description": "The leg operating operating suffix.",
                    "type": "string"
                },
                "outMoveDays": {
                    "format": "int32",
                    "description": "The leg move out days.",
                    "type": "integer"
                },
                "arrivalTime": {
                    "format": "date-time",
                    "description": "The leg passenger standard time of arrival (STA).",
                    "type": "string"
                },
                "departureTime": {
                    "format": "date-time",
                    "description": "The leg passenger standard time of departure (STD).",
                    "type": "string"
                },
                "prbcCode": {
                    "description": "The leg PRBC code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "scheduleServiceType": {
                    "description": "The type of the schedule service.",
                    "type": "string"
                },
                "sold": {
                    "format": "int32",
                    "description": "The sold.",
                    "type": "integer"
                },
                "status": {
                    "description": "The legs status.",
                    "enum": [
                        "Normal",
                        "Closed",
                        "Canceled",
                        "Suspended",
                        "ClosedPending",
                        "BlockAllActivities",
                        "Mishap"
                    ],
                    "type": "string"
                },
                "subjectToGovtApproval": {
                    "description": "A value indicating whether the leg is subject to government approval.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "LegNest": {
            "description": "A model representing a leg nest.",
            "type": "object",
            "properties": {
                "adjustedCapacity": {
                    "format": "int32",
                    "description": "Gets or sets the adjusted capacity of the nest.",
                    "type": "integer"
                },
                "classNest": {
                    "format": "int32",
                    "description": "Gets or sets the nest class nest.",
                    "type": "integer"
                },
                "lid": {
                    "format": "int32",
                    "description": "Gets or sets the nest lid.",
                    "type": "integer"
                },
                "travelClassCode": {
                    "description": "Gets or sets the nest travel class code.",
                    "type": "string"
                },
                "nestType": {
                    "description": "Gets or sets the type of the nest.",
                    "enum": [
                        "Default",
                        "Net",
                        "Serial",
                        "OneBooking"
                    ],
                    "type": "string"
                },
                "legClasses": {
                    "description": "Gets or sets the nest leg classes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LegClass"
                    }
                }
            }
        },
        "LegSsr": {
            "description": "A model representing a leg ssr summary.",
            "type": "object",
            "properties": {
                "available": {
                    "format": "int32",
                    "description": "The number of Ssrs available.",
                    "type": "integer",
                    "readOnly": true
                },
                "ssrNestCode": {
                    "description": "The SSR nest code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lid": {
                    "format": "int32",
                    "description": "The maximum number of SSRs authorized to be sold on a nest.",
                    "type": "integer"
                },
                "sold": {
                    "format": "int32",
                    "description": "The number of SSRs sold in the SSR nest.",
                    "type": "integer"
                },
                "unitSold": {
                    "format": "int32",
                    "description": "The units of space sold for the SSR.",
                    "type": "integer"
                }
            }
        },
        "GateInformation": {
            "description": "Represents the gate information for the trip status model.  Consists\r\nof actual gate information and estimated/scheduled gate information.",
            "type": "object",
            "properties": {
                "estimatedGate": {
                    "description": "Represents the estimated or scheduled gate of the trip mode.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "actualGate": {
                    "description": "Represents the actual gate of the trip mode.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DepartureEvent": {
            "description": "Represents the flight operation times for the departure event, which\r\nincludes an estimated and scheduled time event.",
            "type": "object",
            "properties": {
                "scheduled": {
                    "format": "date-time",
                    "description": "Represents the scheduled departure time.",
                    "type": "string"
                },
                "estimated": {
                    "format": "date-time",
                    "description": "Represents the estimated departure time.",
                    "type": "string"
                }
            }
        },
        "LegClass": {
            "description": "The leg class model information.",
            "required": [
                "classOfService"
            ],
            "type": "object",
            "properties": {
                "classNest": {
                    "format": "int32",
                    "description": "The leg class nest.",
                    "type": "integer"
                },
                "classAllotted": {
                    "format": "int32",
                    "description": "The leg class allotted.",
                    "type": "integer"
                },
                "classType": {
                    "description": "The type of class.",
                    "type": "string",
                    "example": ""
                },
                "classAuthorizedUnits": {
                    "format": "int32",
                    "description": "The leg class Authorized Units (AUs).",
                    "type": "integer"
                },
                "classOfService": {
                    "description": "The leg class, class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "classRank": {
                    "format": "int32",
                    "description": "The leg class rank.",
                    "type": "integer"
                },
                "classSold": {
                    "format": "int32",
                    "description": "The class sold.",
                    "type": "integer"
                },
                "cnxSold": {
                    "format": "int32",
                    "description": "The CNX sold.",
                    "type": "integer"
                },
                "latestAdvancedReservation": {
                    "format": "int32",
                    "description": "The latest advanced reservation.",
                    "type": "integer"
                },
                "status": {
                    "description": "The status.",
                    "enum": [
                        "Active",
                        "InActive",
                        "AvsOpen",
                        "AvsOnRequest",
                        "AvsClosed"
                    ],
                    "type": "string"
                },
                "thruSold": {
                    "format": "int32",
                    "description": "The thru sold.",
                    "type": "integer"
                }
            }
        },
        "AvailabilityRequest": {
            "description": "Defines a availability request.",
            "required": [
                "passengers",
                "criteria"
            ],
            "type": "object",
            "properties": {
                "passengers": {
                    "$ref": "#/definitions/PassengerTypeCriteria",
                    "description": "The list of passengers."
                },
                "criteria": {
                    "description": "The list of availability search criteria.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AvailabilityByTrip"
                    }
                },
                "codes": {
                    "$ref": "#/definitions/AvailabilityCodeCriteria",
                    "description": "The code criteria."
                },
                "fareFilters": {
                    "$ref": "#/definitions/AvailabilityFareCriteria",
                    "description": "The fare search criteria."
                },
                "taxesAndFees": {
                    "description": "The taxes and fees rollup mode which affects the pricing information.",
                    "enum": [
                        "None",
                        "Taxes",
                        "TaxesAndFees"
                    ],
                    "type": "string"
                }
            }
        },
        "PassengerTypeCriteria": {
            "description": "Defines the availability criteria passenger types.",
            "required": [
                "types"
            ],
            "type": "object",
            "properties": {
                "types": {
                    "description": "The list of passenger types and counts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerSearchCriteria"
                    }
                },
                "residentCountry": {
                    "description": "The passenger resident country.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AvailabilityByTrip": {
            "description": "Defines a availability rebook criteria search which includes all the previous passengers on the booking.",
            "required": [
                "stations",
                "dates"
            ],
            "type": "object",
            "properties": {
                "filters": {
                    "$ref": "#/definitions/AvailabilityFilterCriteria",
                    "description": "The filtering criteria."
                },
                "stations": {
                    "$ref": "#/definitions/AvailabilityStationCriteria",
                    "description": "The station criteria."
                },
                "lowFarePrice": {
                    "format": "double",
                    "description": "Used to validate that the low fare prices retrieved earlier to match the results now shown in the availability call.",
                    "type": "number"
                },
                "dates": {
                    "$ref": "#/definitions/AvailabilityDateCriteria",
                    "description": "The date criteria."
                },
                "ssrCollectionsMode": {
                    "description": "Determines how and when to return the Ssr nest information.",
                    "enum": [
                        "None",
                        "Leg"
                    ],
                    "type": "string"
                },
                "flightFilters": {
                    "$ref": "#/definitions/AvailabilityFlightCriteria",
                    "description": "The flight search criteria."
                },
                "type": {
                    "description": "Defines the type of fares to be returned.",
                    "enum": [
                        "Default",
                        "Standby",
                        "Overbook",
                        "NoPricing"
                    ],
                    "type": "string"
                }
            }
        },
        "AvailabilityCodeCriteria": {
            "description": "Describes the availability criteria code criteria.",
            "type": "object",
            "properties": {
                "currency": {
                    "description": "The currency code for the fares.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fareDiscountCode": {
                    "description": "The fare discount code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "promotionCode": {
                    "description": "The promotion code to be applied.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceOrganization": {
                    "description": "The organization to use when evaluating availability of private fares. If specified, this organization code will\r\nalso be used for evaluation of any organization rules on sales taxes and travel fees (if included in the response).\r\nIf blank or not specified, the logged-in user's organization will be used.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currentSourceOrganization": {
                    "description": "The current source point of sale organization on the PNR. May be blank or unspecified if the source point of sale\r\norganization has not yet been set on the PNR. If blank or unspecified, the logged-in user's organization will be\r\nused.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AvailabilityFareCriteria": {
            "description": "Defines a availability fare search criteria.",
            "type": "object",
            "properties": {
                "classControl": {
                    "description": "The fare class control.",
                    "enum": [
                        "LowestFareClass",
                        "CompressByProductClass",
                        "Default"
                    ],
                    "type": "string"
                },
                "maxPrice": {
                    "format": "double",
                    "description": "The max fare price.",
                    "type": "number"
                },
                "minPrice": {
                    "format": "double",
                    "description": "The min fare price.",
                    "type": "number"
                },
                "loyalty": {
                    "description": "Filters fares based on loyalty.",
                    "enum": [
                        "MonetaryOnly",
                        "PointsOnly",
                        "PointsAndMonetary",
                        "PreserveCurrent"
                    ],
                    "type": "string"
                },
                "types": {
                    "description": "The list of fare types.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "classes": {
                    "description": "The list of fare classes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "AvailabilityFilterCriteria": {
            "description": "Filter criteria filters the availability responses results.",
            "type": "object",
            "properties": {
                "includeAllotments": {
                    "description": "Flag indicating to include allotted fare classes of service.",
                    "type": "boolean"
                },
                "filter": {
                    "description": "Filters the type of journeys to return.",
                    "enum": [
                        "Default",
                        "ExcludeDeparted",
                        "ExcludeImminent",
                        "ExcludeUnavailable"
                    ],
                    "type": "string"
                },
                "sortKeys": {
                    "description": "The list of inventory journey sort keys. Used for filtering journeys on the response.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "ServiceType",
                            "ShortestTravelTime",
                            "LowestFare",
                            "HighestFare",
                            "EarliestDeparture",
                            "LatestDeparture",
                            "EarliestArrival",
                            "LatestArrival",
                            "NoSort",
                            "BiasOnlineCommercialDuplicates"
                        ],
                        "type": "string"
                    }
                },
                "productClasses": {
                    "description": "The list of product class codes to filter with.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "travelClasses": {
                    "description": "The list of travel class codes to filter with.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "AvailabilityStationCriteria": {
            "description": "Defines the availability criteria stations.",
            "required": [
                "destinationStationCodes",
                "originStationCodes"
            ],
            "type": "object",
            "properties": {
                "destinationStationCodes": {
                    "description": "The Arrival Station Codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "originStationCodes": {
                    "description": "The Departure Station Codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "searchDestinationMacs": {
                    "description": "Flag indicating to search destination mac stations.",
                    "type": "boolean"
                },
                "searchOriginMacs": {
                    "description": "Flag indicating to search origin mac stations.",
                    "type": "boolean"
                }
            }
        },
        "AvailabilityDateCriteria": {
            "description": "Defines the availability criteria dates.",
            "required": [
                "beginDate"
            ],
            "type": "object",
            "properties": {
                "beginDate": {
                    "format": "date-time",
                    "description": "The beginning date to include flights for.",
                    "type": "string"
                },
                "startTimeInterval": {
                    "description": "The beginning time interval to include flights from regardless of the days.",
                    "type": "string"
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The ending date to include flights for.",
                    "type": "string"
                },
                "endTimeInterval": {
                    "description": "The ending time interval to include flights from regardless of the days.",
                    "type": "string"
                },
                "daysOfWeek": {
                    "description": "The days of the week to include in the provided date range.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "type": "string"
                    }
                }
            }
        },
        "AvailabilityFlightCriteria": {
            "description": "The specific flight criteria for the availability criteria.",
            "type": "object",
            "properties": {
                "carrierCode": {
                    "description": "The desired carrier code.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "flightNumber": {
                    "description": "The desired flight number.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The flight type filtering based on connections.",
                    "enum": [
                        "None",
                        "NonStop",
                        "Through",
                        "Direct",
                        "Connect",
                        "All"
                    ],
                    "type": "string"
                },
                "maxConnectingFlights": {
                    "format": "int32",
                    "description": "The number of max connecting flights.",
                    "type": "integer"
                }
            }
        },
        "LowFareAvailabilitySearchSimpleRequest": {
            "description": "Model representing a low fare availability search simple request.",
            "required": [
                "origin",
                "destination",
                "beginDate",
                "passengers"
            ],
            "type": "object",
            "properties": {
                "origin": {
                    "description": "The origin station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "destination": {
                    "description": "The destination station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The departure date. This date represents the selected day by the user, the date range will be calculated from this\r\ndate as the starting date.",
                    "type": "string"
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The return date. This date represents the returning trips selected day by the user, the date range will be\r\ncalculated from this date and the starting date.",
                    "type": "string"
                },
                "passengers": {
                    "description": "The list of passenger search criteria.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerSearchCriteria"
                    }
                },
                "promotionCode": {
                    "description": "The promo code to be applied.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The search currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "loyaltyFilter": {
                    "description": "The loyalty fare filter.",
                    "enum": [
                        "MonetaryOnly",
                        "PointsOnly",
                        "PointsAndMonetary",
                        "PreserveCurrent"
                    ],
                    "type": "string"
                },
                "daysToLeft": {
                    "format": "int32",
                    "description": "The number of days to subtract from the begin/end date.",
                    "type": "integer"
                },
                "daysToRight": {
                    "format": "int32",
                    "description": "The number of days to add to the begin/end date.",
                    "type": "integer"
                }
            }
        },
        "LowFareAvailability": {
            "description": "Low fare availability contains all information returned when requesting a low fare trip availability.",
            "type": "object",
            "properties": {
                "lowFareDateMarkets": {
                    "description": "The collection of low fare results for a specific date and market.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LowFareDateMarket"
                    }
                },
                "includeTaxesAndFees": {
                    "description": "Flag indicating if the trip includes taxes and fees.",
                    "type": "boolean",
                    "example": false
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "LowFareDateMarket": {
            "description": "Low fare availability contains all information returned when requesting a low fare trip availability.",
            "type": "object",
            "properties": {
                "lowestFareAmount": {
                    "$ref": "#/definitions/LowFareAmount",
                    "description": "The lowest passenger fare amount for the date market.",
                    "readOnly": true
                },
                "lowFares": {
                    "description": "The low fare information for a specific flight.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LowFare"
                    }
                },
                "destination": {
                    "description": "The destination station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "The origin station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "departureDate": {
                    "format": "date-time",
                    "description": "The departure date. This is the date only.",
                    "type": "string"
                }
            }
        },
        "LowFareAmount": {
            "description": "Low fare passengers contains the passenger type specific data.",
            "type": "object",
            "properties": {
                "fareAmount": {
                    "format": "double",
                    "description": "Fare Amount for Passenger Type.",
                    "type": "number"
                },
                "farePointAmount": {
                    "format": "double",
                    "description": "Fare Point Amount.",
                    "type": "number"
                },
                "taxesAndFeesAmount": {
                    "format": "double",
                    "description": "Taxes and Fees Amount.",
                    "type": "number"
                }
            }
        },
        "LowFare": {
            "description": "Low fare contains the information for a specific flight.",
            "type": "object",
            "properties": {
                "passengers": {
                    "description": "Low fare passenger collection with they key of passenger type.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/LowFarePassenger"
                        }
                    }
                },
                "bookingClasses": {
                    "description": "Booking classes available.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "arrivalTime": {
                    "format": "date-time",
                    "description": "The arrival date and time.",
                    "type": "string"
                },
                "departureTime": {
                    "format": "date-time",
                    "description": "The departure date and time.",
                    "type": "string"
                },
                "legs": {
                    "description": "Leg information.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LowFareLeg"
                    }
                },
                "availableCount": {
                    "format": "int32",
                    "description": "Available count for the fare.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "productClass": {
                    "description": "The product class for the fare.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "LowFarePassenger": {
            "description": "Low fare passengers contains the passenger type specific data.",
            "type": "object",
            "properties": {
                "discountCode": {
                    "description": "Passenger Discount Code.",
                    "type": "string",
                    "example": ""
                },
                "fareAmount": {
                    "format": "double",
                    "description": "Fare Amount for Passenger Type.",
                    "type": "number"
                },
                "type": {
                    "description": "Passenger Type.",
                    "type": "string",
                    "example": ""
                },
                "farePointAmount": {
                    "format": "double",
                    "description": "Fare Point Amount.",
                    "type": "number"
                },
                "taxesAndFeesAmount": {
                    "format": "double",
                    "description": "Taxes and Fees Amount.",
                    "type": "number"
                }
            }
        },
        "LowFareLeg": {
            "description": "Low fare leg information.",
            "type": "object",
            "properties": {
                "arrivalTime": {
                    "format": "date-time",
                    "description": "The arrival date and time.",
                    "type": "string"
                },
                "departureTime": {
                    "format": "date-time",
                    "description": "The departure date and time.",
                    "type": "string"
                },
                "destination": {
                    "description": "The destination station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "The origin station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "flightNumber": {
                    "description": "Gets or sets the flight number.",
                    "type": "string",
                    "example": ""
                },
                "carrierCode": {
                    "description": "Gets or sets the carrier code.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "equipmentType": {
                    "description": "The leg type of the equipment.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "operatingCarrier": {
                    "description": "The operating carrier code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "LowFareAvailabilityRequest": {
            "description": "Defines the low are availability request.",
            "required": [
                "passengers",
                "criteria"
            ],
            "type": "object",
            "properties": {
                "bypassCache": {
                    "description": "Flag indicating to bypass the low fare cache and use real time results instead of cached results.",
                    "type": "boolean"
                },
                "getAllDetails": {
                    "description": "Flag indicating to return all data used for low fare caching, this is used for external caching providers.",
                    "type": "boolean"
                },
                "includeTaxesAndFees": {
                    "description": "Flag indicating to include taxes and fees on the response.",
                    "type": "boolean"
                },
                "passengers": {
                    "$ref": "#/definitions/PassengerTypeCriteria",
                    "description": "The passenger type criteria.\r\nIf caching is on this field will not be honored, and will use the previously cached PassengerTypes."
                },
                "codes": {
                    "$ref": "#/definitions/LowFareAvailabilityCodeCriteria",
                    "description": "The low fare code criteria."
                },
                "filters": {
                    "$ref": "#/definitions/LowFareAvailabilityFilterCriteria",
                    "description": "The low fare filtering criteria."
                },
                "criteria": {
                    "description": "The list of low fare availability search criteria.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LowFareAvailabilityCriteria"
                    }
                }
            }
        },
        "LowFareAvailabilityCodeCriteria": {
            "description": "Describes the low fare availability code criteria.",
            "type": "object",
            "properties": {
                "currency": {
                    "description": "The currency code is which to return the results.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceOrganization": {
                    "description": "The specified organization code (aka travel agencies) to allow for discounts or private fares.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "promotionCode": {
                    "description": "The promotion code to be applied.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "LowFareAvailabilityFilterCriteria": {
            "description": "Describes the low fare availability filtering criteria.",
            "type": "object",
            "properties": {
                "groupByDate": {
                    "description": "Flag indicating to return only one low fare per date when multiple markets are requested.",
                    "type": "boolean"
                },
                "flightFilter": {
                    "description": "Controls the flights that are included in a low fare availability response.",
                    "enum": [
                        "NoFlights",
                        "AllFlights",
                        "SelectedFlight"
                    ],
                    "type": "string"
                },
                "loyalty": {
                    "description": "Filters fares based on loyalty.",
                    "enum": [
                        "MonetaryOnly",
                        "PointsOnly",
                        "PointsAndMonetary",
                        "PreserveCurrent"
                    ],
                    "type": "string"
                },
                "bookingClasses": {
                    "description": "The list of booking classes to filter the results by.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "productClasses": {
                    "description": "The list of product classes to filter the results by.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "fareTypes": {
                    "description": "The list of fare types to filter the results by.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "LowFareAvailabilityCriteria": {
            "description": "Defines the low fare availability search criteria.",
            "required": [
                "destinationStationCodes",
                "originStationCodes",
                "beginDate"
            ],
            "type": "object",
            "properties": {
                "destinationStationCodes": {
                    "description": "The Arrival Station Codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "originStationCodes": {
                    "description": "The Departure Station Codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The Begin Date.",
                    "type": "string"
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The End Date.",
                    "type": "string"
                }
            }
        },
        "PassengerBag": {
            "description": "Model information about the baggage a passenger has.",
            "type": "object",
            "properties": {
                "identifier": {
                    "description": "The unique transportation identifier.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "baggageKey": {
                    "description": "Unique key for the baggage.",
                    "type": "string",
                    "example": ""
                },
                "nonStandard": {
                    "description": "Flag for marking a bag as a non-standard piece of luggage.",
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "description": "The type of baggage.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "osTag": {
                    "description": "The OSTag in Bag object.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "osTagDate": {
                    "format": "date-time",
                    "description": "The bag OS tag date.",
                    "type": "string"
                },
                "taggedToStation": {
                    "description": "The tagged to station in the bag object.  This is the last station where\r\nthe bag is going to.  For example, on a trip from SLC to JFK, JFK would\r\nbe the tagged to station value.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "stationCode": {
                    "description": "The bag station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "weight": {
                    "format": "int32",
                    "description": "The Weight in Bag object.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "taggedToCarrierCode": {
                    "description": "The bag tagged to carrier code.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "weightType": {
                    "description": "The WeightType in Bag object.",
                    "enum": [
                        "Default",
                        "Pounds",
                        "Kilograms"
                    ],
                    "type": "string"
                }
            }
        },
        "PassengerBagRequest": {
            "description": "A model for a request to update the passenger bags.",
            "type": "object",
            "properties": {
                "bagCount": {
                    "format": "int32",
                    "description": "The bag count for this request.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "iataIdentifier": {
                    "description": "The IATA identifier for this request.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "limitedReleaseTag": {
                    "description": "Flag for marking a bag as a non-standard piece of luggage.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BaggageType": {
            "description": "The baggage type model.",
            "required": [
                "baggageTypeCode"
            ],
            "type": "object",
            "properties": {
                "baggageTypeCode": {
                    "description": "Gets or sets the baggage type code.",
                    "maxLength": 6,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "bagWeightType": {
                    "description": "Gets or sets the bag weight type.",
                    "enum": [
                        "Default",
                        "Pounds",
                        "Kilograms"
                    ],
                    "type": "string"
                },
                "freeBag": {
                    "description": "Gets or sets the free bag flag.",
                    "type": "boolean",
                    "example": false
                },
                "inActive": {
                    "description": "Gets or sets the inactive flag.",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "Gets or sets the name of the baggage type.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "weightReducedBy": {
                    "format": "int32",
                    "description": "Gets or sets the weight reduced by value.",
                    "maximum": 999,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "BoardingPassFilterRequest": {
            "description": "Defines the boarding pass request that is responsible for filtering the boarding pass response.",
            "type": "object",
            "properties": {
                "segmentKeys": {
                    "description": "The selected segment keys to be returned. If null all segments will be returned that have been checked into.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "passengerKeys": {
                    "description": "The selected passenger keys to be returned. If null all passengers will be returned that have been checked in.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "source": {
                    "description": "Name of the application requesting for boarding pass print.",
                    "type": "string"
                },
                "skipLogToHistory": {
                    "description": "Whether to add event to history log.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BoardingPassesCollectionv2": {
            "description": "Defines the boarding passes base that contains all the common boarding pass details that is not specific to bar\r\ncode type.",
            "type": "object",
            "properties": {
                "recordLocator": {
                    "description": "The record locator in reference.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "type": "string",
                    "example": ""
                },
                "contactPhoneNumber": {
                    "description": "The booking contacts phone number.",
                    "type": "string",
                    "example": ""
                },
                "boardingPasses": {
                    "description": "The collection of boarding passes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BoardingPassv2"
                    }
                }
            }
        },
        "BoardingPassv2": {
            "description": "Defines the top level boarding pass details.",
            "type": "object",
            "properties": {
                "userName": {
                    "description": "The user name of the logged in user.",
                    "type": "string",
                    "example": ""
                },
                "iataCode": {
                    "description": "The IATA code.",
                    "type": "string",
                    "example": ""
                },
                "fareBasisCode": {
                    "description": "The acting fare basis code.",
                    "type": "string",
                    "example": ""
                },
                "fareClass": {
                    "description": "The acting fare class.",
                    "type": "string",
                    "example": ""
                },
                "baseFare": {
                    "format": "double",
                    "description": "The base fare amount.",
                    "type": "number"
                },
                "totalFare": {
                    "format": "double",
                    "description": "The total fare amount.",
                    "type": "number"
                },
                "totalCost": {
                    "format": "double",
                    "description": "The total cost amount.",
                    "type": "number"
                },
                "discountedFare": {
                    "format": "double",
                    "description": "The discounted fare amount.",
                    "type": "number"
                },
                "totalTax": {
                    "format": "double",
                    "description": "The total amount of tax.",
                    "type": "number"
                },
                "receiptNumber": {
                    "description": "The receipt number.",
                    "type": "string",
                    "example": ""
                },
                "serviceCharges": {
                    "description": "The collection of service charges for this segment.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCharge"
                    }
                },
                "passenger": {
                    "$ref": "#/definitions/BoardingPassPassengerDetailsv2",
                    "description": "The passenger details."
                },
                "segments": {
                    "description": "The collection of segments for the barcode.\r\nNote these can represent leg information on a change of gauge flight.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BoardingPassSegment"
                    }
                }
            }
        },
        "BoardingPassPassengerDetailsv2": {
            "description": "Defines the boarding pass passenger details.",
            "type": "object",
            "properties": {
                "type": {
                    "description": "The passenger type.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The given name."
                },
                "selecteeString": {
                    "description": "The string that indicates a selectee.",
                    "type": "string",
                    "example": ""
                },
                "isoName": {
                    "$ref": "#/definitions/Name",
                    "description": "The given name converted to ISO standard."
                },
                "customerNumber": {
                    "description": "The customer number.",
                    "type": "string",
                    "example": ""
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth.",
                    "type": "string"
                },
                "score": {
                    "$ref": "#/definitions/BoardingPassPassengerScore",
                    "description": "The passenger score."
                },
                "gender": {
                    "description": "The gender.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "infant": {
                    "$ref": "#/definitions/BoardingPassInfantDetails",
                    "description": "The passengers infant details if an infant exists."
                },
                "documents": {
                    "description": "The collection of travel documents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerTravelDocument"
                    }
                },
                "barCode": {
                    "description": "The passenger bar code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BoardingPassSegment": {
            "description": "Defines the boarding pass segment details.",
            "type": "object",
            "properties": {
                "designator": {
                    "$ref": "#/definitions/BoardingPassTransportationDesignator",
                    "description": "The transportation designator details based on the legs.",
                    "readOnly": true
                },
                "transportationName": {
                    "description": "The name of the transportation company.",
                    "type": "string",
                    "example": ""
                },
                "departureGate": {
                    "description": "The scheduled departure gate.",
                    "type": "string",
                    "example": ""
                },
                "boardingTime": {
                    "format": "date-time",
                    "description": "The scheduled boaring time.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the current segment.",
                    "enum": [
                        "Normal",
                        "CodeShareOperating",
                        "CodeShareMarketing",
                        "InterlineOutbound",
                        "InterlineInbound",
                        "Passive"
                    ],
                    "type": "string"
                },
                "international": {
                    "description": "Flag indicating if the segment is international.",
                    "type": "boolean",
                    "example": false
                },
                "ticketNumber": {
                    "description": "The assigned passengers ticket number.",
                    "type": "string",
                    "example": ""
                },
                "infantTicketNumber": {
                    "description": "The assigned infants ticket number.",
                    "type": "string",
                    "example": ""
                },
                "ticketIndicator": {
                    "description": "The ticket indicator.",
                    "type": "string",
                    "example": ""
                },
                "cabinOfService": {
                    "description": "The assigned to cabin of service.",
                    "type": "string"
                },
                "classOfService": {
                    "description": "The assigned to class of service.",
                    "type": "string",
                    "example": ""
                },
                "externalClassOfService": {
                    "description": "The externals reference class of service.",
                    "type": "string",
                    "example": ""
                },
                "fareClassName": {
                    "description": "The fare class name.",
                    "type": "string",
                    "example": ""
                },
                "productClassName": {
                    "description": "The product class name.",
                    "type": "string",
                    "example": ""
                },
                "externalRecordLocator": {
                    "description": "The assigned external record locator.",
                    "type": "string",
                    "example": ""
                },
                "program": {
                    "$ref": "#/definitions/BoardingPassProgram",
                    "description": "The applied passenger program if one existed."
                },
                "hasInfant": {
                    "description": "Flag indicating if this segment has a infant.",
                    "type": "boolean",
                    "example": false
                },
                "identifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The transportation identifier details about the segment."
                },
                "legs": {
                    "description": "The collection of legs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BoardingPassLeg"
                    }
                },
                "externalIdentifier": {
                    "$ref": "#/definitions/BoardingPassTransportationIdentifier",
                    "description": "The external transportation identifier details about the segment."
                }
            }
        },
        "BoardingPassPassengerScore": {
            "description": "Defines the boarding pass passenger score.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The score name.",
                    "type": "string",
                    "example": ""
                },
                "code": {
                    "description": "The score code.",
                    "type": "string"
                }
            }
        },
        "BoardingPassInfantDetails": {
            "description": "Defines the boarding pass infant details.",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The given name."
                },
                "isoName": {
                    "$ref": "#/definitions/Name",
                    "description": "The given name converted to ISO standard."
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth.",
                    "type": "string"
                },
                "gender": {
                    "description": "The gender.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "documents": {
                    "description": "The collection of travel documents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerTravelDocument"
                    }
                }
            }
        },
        "PassengerTravelDocument": {
            "description": "Model representing a passenger travel document.",
            "required": [
                "documentTypeCode",
                "number"
            ],
            "type": "object",
            "properties": {
                "passengerTravelDocumentKey": {
                    "description": "A key that  uniquely identifies a travel document in the context of a specific passenger.",
                    "type": "string",
                    "example": ""
                },
                "documentTypeCode": {
                    "description": "The unique travel document type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "birthCountry": {
                    "description": "The BirthCountry property.",
                    "type": "string",
                    "example": ""
                },
                "issuedByCode": {
                    "description": "The issuer code for the travel document (country code).",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The Name property."
                },
                "nationality": {
                    "description": "The Nationality property.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The date when this travel document expires.",
                    "type": "string"
                },
                "number": {
                    "description": "The travel document number.",
                    "maxLength": 35,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "issuedDate": {
                    "format": "date-time",
                    "description": "The date this travel document was issued.",
                    "type": "string"
                }
            }
        },
        "BoardingPassTransportationDesignator": {
            "description": "Defines a boarding pass transportation designator.",
            "type": "object",
            "properties": {
                "destinationStationName": {
                    "description": "The destination stations localized name.",
                    "type": "string",
                    "example": ""
                },
                "destination": {
                    "description": "Gets or sets the leg arrival station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "originStationName": {
                    "description": "The origin stations localized name.",
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "Gets or sets the leg departure station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "arrival": {
                    "format": "date-time",
                    "description": "The arrival date and time local to the arrival station.",
                    "type": "string"
                },
                "departure": {
                    "format": "date-time",
                    "description": "The departure date and time local to the departure station.",
                    "type": "string"
                }
            }
        },
        "BoardingPassProgram": {
            "description": "Defines the boarding pass acting program.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The programs name.",
                    "type": "string",
                    "example": ""
                },
                "number": {
                    "description": "The programs number.",
                    "type": "string",
                    "example": ""
                },
                "levelName": {
                    "description": "The programs level name.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BoardingPassLeg": {
            "description": "Defines the boarding pass leg details.",
            "type": "object",
            "properties": {
                "seat": {
                    "$ref": "#/definitions/BoardingPassSeatDetails",
                    "description": "The passengers assigned seats details."
                },
                "boarding": {
                    "$ref": "#/definitions/BoardingPassBoardingDetails",
                    "description": "The boarding details."
                },
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "The legs transportation designator details."
                },
                "liftStatus": {
                    "description": "The status of the leg for the passenger.",
                    "enum": [
                        "Default",
                        "CheckedIn",
                        "Boarded",
                        "NoShow"
                    ],
                    "type": "string"
                },
                "operatedByText": {
                    "description": "The legs operated by text.",
                    "type": "string",
                    "example": ""
                },
                "subjectToGovernmentApproval": {
                    "description": "Flag indicating if the leg is subject to government approval.",
                    "type": "boolean",
                    "example": false
                },
                "codeShareIndicator": {
                    "description": "The assigned code share indicator.",
                    "type": "string"
                },
                "bppr": {
                    "description": "The homeland security government clearance auth code.",
                    "type": "string",
                    "example": ""
                },
                "identifier": {
                    "$ref": "#/definitions/BoardingPassTransportationIdentifier",
                    "description": "The legs transportation identifier."
                },
                "bags": {
                    "description": "The collection of bags.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OperationBag"
                    }
                },
                "ssrs": {
                    "description": "The collection of SSR's.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrGlance"
                    }
                }
            }
        },
        "BoardingPassTransportationIdentifier": {
            "description": "Defines a boarding pass transportation identifier.",
            "required": [
                "identifier",
                "carrierCode"
            ],
            "type": "object",
            "properties": {
                "carrierName": {
                    "description": "The carriers name.",
                    "type": "string",
                    "example": ""
                },
                "identifier": {
                    "description": "The unique transportation identifier.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "carrierCode": {
                    "description": "The carrier code.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "opSuffix": {
                    "description": "The op suffix.",
                    "type": "string"
                }
            }
        },
        "BoardingPassSeatDetails": {
            "description": "Defines the boarding pass assigned seat details.",
            "type": "object",
            "properties": {
                "column": {
                    "description": "The seat column.",
                    "type": "string"
                },
                "row": {
                    "format": "int32",
                    "description": "The seat row.",
                    "type": "integer"
                },
                "designator": {
                    "description": "The seat designator.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BoardingPassBoardingDetails": {
            "description": "Defines the boarding pass boarding details.",
            "type": "object",
            "properties": {
                "boardingSequence": {
                    "format": "int32",
                    "description": "The boarding sequence number.",
                    "type": "integer"
                },
                "boardingZone": {
                    "format": "int32",
                    "description": "The boarding zone number.",
                    "type": "integer"
                },
                "externalBoardingZone": {
                    "description": "The external boarding zone.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OperationBag": {
            "description": "Operation Bag.",
            "type": "object",
            "properties": {
                "operationBagKey": {
                    "description": "The baggage key",
                    "type": "string",
                    "example": ""
                },
                "identifier": {
                    "description": "The unique transportation identifier.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "baggageStatus": {
                    "description": "The BaggageStatus in Bag object.",
                    "enum": [
                        "Default",
                        "Checked",
                        "Removed",
                        "Added",
                        "AddedPrinted"
                    ],
                    "type": "string"
                },
                "nonStandard": {
                    "description": "Flag for marking a bag as a non-standard piece of luggage.",
                    "type": "boolean",
                    "example": false
                },
                "checkInDate": {
                    "format": "date-time",
                    "description": "The CheckInDate in Bag object.",
                    "type": "string"
                },
                "osTag": {
                    "description": "The OSTag in Bag object.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "compartment": {
                    "format": "int32",
                    "description": "The CompartmentID in Bag object.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "taggedToStation": {
                    "description": "The tagged to station in the bag object.  This is the last station where\r\nthe bag is going to.  For example, on a trip from SLC to JFK, JFK would\r\nbe the tagged to station value.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "taggedToStationCity": {
                    "description": "The tagged to station city in the bag object.  This is the last city where\r\nthe bag is going to.  For example, on a trip from SLC to JFK, New York would\r\nbe the tagged to station city value.",
                    "type": "string",
                    "example": ""
                },
                "weight": {
                    "format": "int32",
                    "description": "The Weight in Bag object.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "weightType": {
                    "description": "The WeightType in Bag object.",
                    "enum": [
                        "Default",
                        "Pounds",
                        "Kilograms"
                    ],
                    "type": "string"
                }
            }
        },
        "SsrGlance": {
            "description": "Manifest Leg SSR.",
            "type": "object",
            "properties": {
                "note": {
                    "description": "The additional information on the SSR that are not visible to passengers.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrCode": {
                    "description": "The unique code to identify an SSR.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrDetail": {
                    "description": "The additional information for the SSR as requested by the passenger.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BoardingPassPassengerFilterRequest": {
            "description": "Defines the boarding pass request that is responsible for filtering what passengers to retrieve passes for.",
            "type": "object",
            "properties": {
                "passengerKeys": {
                    "description": "The selected passenger keys to be returned. If null all passengers will be returned that have been checked in.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "source": {
                    "description": "Name of the application requesting for boarding pass print.",
                    "type": "string"
                },
                "skipLogToHistory": {
                    "description": "Whether to add event to history log.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Booking": {
            "description": "Represents a full booking object.",
            "type": "object",
            "properties": {
                "bookingKey": {
                    "description": "The unique identifier.",
                    "type": "string",
                    "example": ""
                },
                "recordLocator": {
                    "description": "The alphanumeric identifier assigned to a reservation when the record is created (created means when the booking\r\nwas submitted to the database).",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency in which the booking is priced and created in.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "systemCode": {
                    "description": "The GDS/CRS code that requested the booking.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "groupName": {
                    "description": "The group name of the booking.",
                    "type": "string",
                    "example": ""
                },
                "locators": {
                    "$ref": "#/definitions/BookingRecordLocators",
                    "description": "Booking locators used to define a booking."
                },
                "info": {
                    "$ref": "#/definitions/BookingInfo",
                    "description": "Informational about the booking."
                },
                "sales": {
                    "$ref": "#/definitions/BookingSales",
                    "description": "Details about the point of sales."
                },
                "typeOfSale": {
                    "$ref": "#/definitions/TypeOfSale",
                    "description": "Information about the type of sale the booking was."
                },
                "hold": {
                    "$ref": "#/definitions/BookingHold",
                    "description": "Defines the hold expiration."
                },
                "breakdown": {
                    "$ref": "#/definitions/BookingPriceBreakdown",
                    "description": "The booking pricing breakdown."
                },
                "receivedBy": {
                    "$ref": "#/definitions/ReceivedByInfo",
                    "description": "Details about what received the booking commit."
                },
                "contacts": {
                    "description": "The contacts on the booking by unique the contact type code.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/Contact"
                        }
                    }
                },
                "passengers": {
                    "description": "The list of passengers and information.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/Passenger"
                        }
                    }
                },
                "journeys": {
                    "description": "The list of journeys and information.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Journey"
                    }
                },
                "comments": {
                    "description": "The list of associated comments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BookingComment"
                    }
                },
                "queues": {
                    "description": "The list of information indicating which queue the booking is present in.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BookingQueueInfo"
                    }
                },
                "history": {
                    "description": "The history of the booking since it was loaded into state.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BookingHistory"
                    }
                },
                "payments": {
                    "description": "The list of applied payments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Payment"
                    }
                },
                "addOns": {
                    "description": "The list of components.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/AddOn"
                        }
                    }
                }
            }
        },
        "BookingRecordLocators": {
            "description": "Defines the bookings unique identifiers.",
            "type": "object",
            "properties": {
                "numericRecordLocator": {
                    "description": "The alphanumeric identifier generated when the booking is retrieved from the alphanumeric record locator value that\r\nwas assigned.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "parentRecordLocator": {
                    "description": "The record locator of the booking where the current booking resulted from.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "parentId": {
                    "format": "int64",
                    "description": "The unique identifier of the booking where the current booking resulted from.",
                    "type": "integer"
                },
                "recordLocators": {
                    "description": "The list of other reservations that can be used as cross reference for the booking.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecordLocator"
                    }
                }
            }
        },
        "BookingInfo": {
            "description": "Describes general booking details.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "The status of the entire booking.",
                    "enum": [
                        "Default",
                        "Hold",
                        "Confirmed",
                        "Closed",
                        "HoldCanceled",
                        "PendingArchive",
                        "Archived"
                    ],
                    "type": "string"
                },
                "paidStatus": {
                    "description": "The status of the applied payments.",
                    "enum": [
                        "UnderPaid",
                        "PaidInFull",
                        "OverPaid"
                    ],
                    "type": "string"
                },
                "priceStatus": {
                    "description": "The pricing status of the booking.",
                    "enum": [
                        "Invalid",
                        "Override",
                        "Valid"
                    ],
                    "type": "string"
                },
                "profileStatus": {
                    "description": "The booking profiling status.",
                    "enum": [
                        "Default",
                        "KnownIndividual",
                        "ResolutionGroup",
                        "SelecteeGroup",
                        "NotUsed",
                        "FailureGroup",
                        "RandomSelectee",
                        "Exempt"
                    ],
                    "type": "string"
                },
                "bookingType": {
                    "description": "Identifies the type (Default, GDS, CodeShare, ect) of the booking set during the commit process.",
                    "type": "string",
                    "example": ""
                },
                "channelType": {
                    "description": "The channel that is responsible for created the booking.",
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                },
                "bookedDate": {
                    "format": "date-time",
                    "description": "The UTC date and time the booking was originally created.",
                    "type": "string"
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The UTC date and time of when the booking was created.",
                    "type": "string"
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The UTC date and time indicating when the booking will not be returned when retrieved by a GDS/GRS.",
                    "type": "string"
                },
                "modifiedDate": {
                    "format": "date-time",
                    "description": "The UTC date and time when the booking was last updated on the server.",
                    "type": "string"
                },
                "modifiedAgentId": {
                    "format": "int64",
                    "description": "The last agent ID who modified the booking.",
                    "type": "integer"
                },
                "createdAgentId": {
                    "format": "int64",
                    "description": "The agent ID that created the booking.",
                    "type": "integer"
                },
                "owningCarrierCode": {
                    "description": "Identifies which carrier is financially responsible for the booking and payment.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "changeAllowed": {
                    "description": "The flag indicating whether the booking can be changed.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BookingSales": {
            "description": "Defines the different point of sale information.",
            "type": "object",
            "properties": {
                "created": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "Contains the details about the agent and organization information that created this booking."
                },
                "source": {
                    "$ref": "#/definitions/BookingPointOfSale",
                    "description": "Contains the details about the agent and organization information that referred the created booking."
                },
                "modified": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "Contains the details about the agent and organization information that made the last set of changes."
                }
            }
        },
        "TypeOfSale": {
            "description": "Defines the type of sale values.",
            "type": "object",
            "properties": {
                "residentCountry": {
                    "description": "The resident country.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "promotionCode": {
                    "description": "The promo code that was applied.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fareTypes": {
                    "description": "The collection of fare types applied.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "BookingHold": {
            "description": "Defines the booking hold expiration.",
            "type": "object",
            "properties": {
                "expiration": {
                    "format": "date-time",
                    "description": "Defines the hold date and time expiration.",
                    "type": "string"
                }
            }
        },
        "BookingPriceBreakdown": {
            "description": "Defines the booking top level pricing breakdown.",
            "type": "object",
            "properties": {
                "balanceDue": {
                    "format": "double",
                    "description": "The booking balance due.",
                    "type": "number"
                },
                "pointsBalanceDue": {
                    "format": "double",
                    "description": "The booking points balance due.",
                    "type": "number"
                },
                "authorizedBalanceDue": {
                    "format": "double",
                    "description": "The bookings authorized balance due.",
                    "type": "number"
                },
                "totalAmount": {
                    "format": "double",
                    "description": "The booking total amount.",
                    "type": "number"
                },
                "totalPoints": {
                    "format": "double",
                    "description": "The booking total points.",
                    "type": "number"
                },
                "totalToCollect": {
                    "format": "double",
                    "description": "The booking total to collect.",
                    "type": "number"
                },
                "totalPointsToCollect": {
                    "format": "double",
                    "description": "The booking total points to collect.",
                    "type": "number"
                },
                "totalCharged": {
                    "format": "double",
                    "description": "The total amount charged.",
                    "type": "number"
                },
                "passengerTotals": {
                    "$ref": "#/definitions/PassengerPriceBreakdownBase",
                    "description": "The calculated price breakdown for all passengers."
                },
                "passengers": {
                    "description": "The individual collection of passenger price breakdowns.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/PassengerPriceBreakdown"
                        }
                    }
                },
                "journeyTotals": {
                    "$ref": "#/definitions/JourneyPriceBreakdownBase",
                    "description": "The calculated price breakdown for all journeys."
                },
                "journeys": {
                    "description": "The individual collection of journey price breakdown.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/JourneyPriceBreakdown"
                        }
                    }
                },
                "addOnTotals": {
                    "$ref": "#/definitions/AddOnPriceBreakdown",
                    "description": "The total amounts charged for each type of AddOn."
                }
            }
        },
        "ReceivedByInfo": {
            "description": "Defines the received by information.",
            "type": "object",
            "properties": {
                "receivedBy": {
                    "description": "The received by name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "latestReceivedBy": {
                    "description": "The latest received by name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "receivedReference": {
                    "description": "The received by reference.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "latestReceivedReference": {
                    "description": "The latest received by reference.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "referralCode": {
                    "description": "The referral code.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Contact": {
            "description": "Contact model describing a person contact information.",
            "required": [
                "contactTypeCode"
            ],
            "type": "object",
            "properties": {
                "contactTypeCode": {
                    "description": "The contact type code. There can only be one contact of a specific type on the booking.\r\nTypically only one contact is used. Null values will be replaced by the primary contact type code.",
                    "type": "string"
                },
                "phoneNumbers": {
                    "description": "The collection of phone numbers.\r\nSupported types: Home, Work, Fax, Other.\r\nThis collections can only contain one number for each supported type.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "maxLength": 17,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The contact address."
                },
                "emailAddress": {
                    "description": "The email address of the contact.",
                    "type": "string",
                    "example": ""
                },
                "customerNumber": {
                    "description": "The customer number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceOrganization": {
                    "description": "Source organization.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "distributionOption": {
                    "description": "The contact distribution option.",
                    "enum": [
                        "None",
                        "Mail",
                        "Email",
                        "Fax",
                        "MailFax",
                        "Airport",
                        "Hold",
                        "Print"
                    ],
                    "type": "string"
                },
                "notificationPreference": {
                    "description": "The notification preference of the contact.",
                    "enum": [
                        "None",
                        "Promotional"
                    ],
                    "type": "string"
                },
                "companyName": {
                    "description": "The company name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The contact's name."
                }
            }
        },
        "Passenger": {
            "description": "Model information representing a passenger on a journey.",
            "required": [
                "passengerTypeCode"
            ],
            "type": "object",
            "properties": {
                "passengerKey": {
                    "description": "The unique passenger identifier key.",
                    "type": "string",
                    "example": ""
                },
                "passengerAlternateKey": {
                    "description": "The passenger alternate key is used to identify a passenger post commit of the booking.",
                    "type": "string",
                    "example": ""
                },
                "customerNumber": {
                    "description": "The passenger customer number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fees": {
                    "description": "Fees.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerFee"
                    }
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The passenger's name."
                },
                "passengerTypeCode": {
                    "description": "The passenger type code.",
                    "type": "string",
                    "example": ""
                },
                "discountCode": {
                    "description": "The discount code associated with the passenger type.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "bags": {
                    "description": "Passenger bags.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerBag"
                    }
                },
                "program": {
                    "$ref": "#/definitions/PassengerProgram",
                    "description": "The passenger programs."
                },
                "infant": {
                    "$ref": "#/definitions/PassengerInfant",
                    "description": "The optional infant associated with this passenger."
                },
                "info": {
                    "$ref": "#/definitions/PassengerInformation",
                    "description": "Additional passenger information."
                },
                "travelDocuments": {
                    "description": "The collection of passenger travel Documents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerTravelDocument"
                    }
                },
                "addresses": {
                    "description": "The collection of passenger addresses.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerAddress"
                    }
                },
                "weightCategory": {
                    "description": "The weight category assigned to this passenger.",
                    "enum": [
                        "Male",
                        "Female",
                        "Child"
                    ],
                    "type": "string"
                }
            }
        },
        "Journey": {
            "description": "Data about the journey which represents the collection of segments and their legs on the journey.",
            "type": "object",
            "properties": {
                "flightType": {
                    "description": "Returns a flight type enumeration. (NonStop, Thru, etc.)",
                    "enum": [
                        "None",
                        "NonStop",
                        "Through",
                        "Direct",
                        "Connect",
                        "All"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "stops": {
                    "format": "int32",
                    "description": "The total number of stops this flight takes.",
                    "type": "integer",
                    "readOnly": true
                },
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "This is a summary of all the segments. It will contain the details\r\nof the transportation from the first and last segment.",
                    "readOnly": true
                },
                "move": {
                    "$ref": "#/definitions/JourneyMove",
                    "description": "The information regarding the journey move restrictions.",
                    "readOnly": true
                },
                "segments": {
                    "description": "The collection of segments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Segment"
                    }
                },
                "journeyKey": {
                    "description": "The unique identifier for this journey sell information.",
                    "type": "string",
                    "example": ""
                },
                "notForGeneralUser": {
                    "description": "A value indicating whether the journey is for a general user.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BookingComment": {
            "description": "Defines a booking comment.",
            "type": "object",
            "properties": {
                "type": {
                    "description": "Indicates where the comment will be seen.",
                    "enum": [
                        "Default",
                        "Itinerary",
                        "Manifest",
                        "Alert",
                        "Archive"
                    ],
                    "type": "string"
                },
                "pointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The point of sale for the comment."
                },
                "text": {
                    "description": "The text of the comment.",
                    "maxLength": 1024,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "commentKey": {
                    "description": "The comment key.",
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The created date of the comment.",
                    "type": "string"
                }
            }
        },
        "BookingQueueInfo": {
            "description": "Describes the booking queue info.",
            "type": "object",
            "properties": {
                "segmentKey": {
                    "description": "The segment key.",
                    "maxLength": 22,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "code": {
                    "description": "The identifier for the queue where the booking is placed.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "subCode": {
                    "description": "The identifier for the sub queue where the booking is placed.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name for the queue where the booking is placed.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "queueId": {
                    "format": "int64",
                    "description": "The unique ID of the booking queue entry.",
                    "type": "integer"
                },
                "passengerId": {
                    "format": "int64",
                    "description": "The unique identifier of a passenger on the booking.",
                    "type": "integer"
                },
                "watchListId": {
                    "format": "int64",
                    "description": "Unique identifier of the watchlist where a match was found for the booking or passenger.",
                    "type": "integer"
                },
                "note": {
                    "description": "A summary on why the booking was placed in the queue.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of event that triggered placement of the booking in the queue.",
                    "enum": [
                        "Default",
                        "BookingBalanceDue",
                        "BookingNegativeBalance",
                        "BookingCustomerComment",
                        "DeclinedPaymentInitial",
                        "DeclinedPaymentChange",
                        "FareOverride",
                        "ScheduleTimeChange",
                        "ScheduleTimeChangeMisconnect",
                        "ScheduleCancellation",
                        "FlightDesignatorChange",
                        "ReaccommodationMove",
                        "GdsCancelWithPendingPayment",
                        "InvalidPriceStatusOverride",
                        "FareRestrictionOverride",
                        "HeldBookings",
                        "InvalidPriceStatus",
                        "Watchlist",
                        "NonFlightServiceFee",
                        "NotAllTicketNumbersReceived",
                        "BookingSegmentOversold",
                        "ReaccommodationCancel",
                        "ExternalSsrAutoConfirmed",
                        "OpCarrierSegUpdate",
                        "OpCarrierSsrUpdate",
                        "OpCarrierOtherUpdate",
                        "NameChangeNotAllowed",
                        "InboundAscNotProcessed",
                        "OpCarrierInformationChange",
                        "BookingComponentUpdate",
                        "GroupBookings",
                        "BankDirectPnrOutOfBalance",
                        "NoSeatAssigned",
                        "SeatNumberChange",
                        "SsrNotSupportedOnNewSeat",
                        "FewerSeatPreferencesMetOnNewSeat",
                        "AosUnableToConfirmCancel",
                        "ETicketIssue",
                        "ETicketFollowup",
                        "InvoluntaryFlyAhead",
                        "ManualClearanceOnOutage",
                        "UnbalancedPoints",
                        "OpCarrierTimeChange",
                        "OaCarrierTimeChange",
                        "VoluntaryFlightChange",
                        "InvoluntaryFlightChange",
                        "HoldCancellationFailed",
                        "ScheduleTimeChangeWithDynamicQueueCode",
                        "ReaccommodationMoveWithDynamicQueueCode",
                        "ItineraryIntegrity",
                        "ReducePartyNotProcessed",
                        "CheckedPassengerUpdate",
                        "NameChangeWithinRule",
                        "IncompletePassengerEMDCoupon",
                        "ASVCUpdateFailed",
                        "ScheduleTimeChangeMisconnectBelowMinimum",
                        "ScheduleTimeChangeMisconnectAboveMaximum"
                    ],
                    "type": "string"
                },
                "action": {
                    "description": "The action that will be taken as a result of the placement in the queue.",
                    "enum": [
                        "Default",
                        "Warning",
                        "Lock",
                        "DefaultAndNotify",
                        "WarningAndNotify",
                        "LockAndNotify"
                    ],
                    "type": "string"
                },
                "mode": {
                    "description": "The indicator if this entry was added or removed from the queue.",
                    "enum": [
                        "EnQueued",
                        "DeQueued"
                    ],
                    "type": "string"
                }
            }
        },
        "BookingHistory": {
            "description": "Defines a booking history log entry.",
            "type": "object",
            "properties": {
                "historyCategory": {
                    "description": "The booking history report category.",
                    "enum": [
                        "Unknown",
                        "Baggage",
                        "BagTagPrint",
                        "BoardingPassPrint",
                        "CheckIn",
                        "ClassOfServiceChange",
                        "Comment",
                        "ConfirmedSegment",
                        "ContactChange",
                        "Converted",
                        "CouponOverride",
                        "DividePnr",
                        "FareOverride",
                        "Fee",
                        "FlightMove",
                        "GroupNameChange",
                        "Hold",
                        "ItinerarySent",
                        "ManualPayment",
                        "MoveBackPnr",
                        "NameChange",
                        "NameRemove",
                        "Payment",
                        "Pds",
                        "Promotion",
                        "QueuePlaceRemove",
                        "RecordLocator",
                        "ScheduleCancelllation",
                        "ScheduleCodeShareChange",
                        "ScheduleFlightDesignatorChange",
                        "ScheduleTimeChange",
                        "SeatAssignment",
                        "SegmentChange",
                        "Reprice",
                        "SsrChange",
                        "StandByChange",
                        "TicketNumber",
                        "VerifiedTravelDocument",
                        "Apps",
                        "InhibitedOverride",
                        "CustomIdChange",
                        "HoldDateChange"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "details": {
                    "description": "The the history report data.",
                    "type": "string",
                    "example": ""
                },
                "event": {
                    "description": "The specific history code.",
                    "enum": [
                        "Unknown",
                        "ConvertedHistory",
                        "FlightTimeChange",
                        "FlightDesignatorChange",
                        "AssignedSeat",
                        "RemoveSeat",
                        "AddedFlight",
                        "DeletedFlight",
                        "DeletedPassenger",
                        "NameChange",
                        "GroupNameChange",
                        "CancelledTicketing",
                        "ScheduleChange",
                        "AddedPayment",
                        "ServiceFee",
                        "QueuedPnr",
                        "UnqueuedPnr",
                        "DeletedComment",
                        "Divided",
                        "CheckedIn",
                        "CheckedOut",
                        "FareOverride",
                        "AddedBaggage",
                        "ChangedBaggageWeight",
                        "CheckedBaggage",
                        "RemovedBaggage",
                        "BoardedPassenger",
                        "UnboardedPassenger",
                        "ManualAuthorization",
                        "ManualDecline",
                        "UndoCancel",
                        "ItinerarySent",
                        "ContactChange",
                        "SsrAdded",
                        "FlightMoved",
                        "VerifiedDocument",
                        "RemovedVerifiedDocument",
                        "Promotion",
                        "BookingComment",
                        "CancelledSchedule",
                        "CancelServiceFee",
                        "OverrideServiceFee",
                        "AddedRecordLocator",
                        "DeletedRecordLocator",
                        "UpgradeClassOfService",
                        "DowngradeClassOfService",
                        "StandbyPriorityChange",
                        "AssignedTicketNumber",
                        "DeletedTicketNumber",
                        "ConfirmSegmentStatusCodeChange",
                        "CodeshareFlightChanged",
                        "PdsCancel",
                        "PdsPending",
                        "PdsConfirm",
                        "PdsFinalized",
                        "PdsDeclined",
                        "PdsException",
                        "PdsCancelRefused",
                        "PdsCancelUnsuccessful",
                        "Apps",
                        "InhibitedOverride",
                        "PrintedBagTag",
                        "SelfPrintedBagTag",
                        "PrintedBoardingPass",
                        "AddCustomerId",
                        "DeleteCustomerId",
                        "HoldCreated",
                        "HoldRemoved",
                        "HoldChanged",
                        "OverrideCoupon",
                        "PdsSynchronized",
                        "PdsItemremoved",
                        "Reprice"
                    ],
                    "type": "string"
                },
                "pointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The point of sale."
                },
                "sourcePointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The source point of sale."
                },
                "receivedBy": {
                    "description": "The received by name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "receivedByReference": {
                    "description": "The received by reference number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The the history entry was created.",
                    "type": "string"
                }
            }
        },
        "Payment": {
            "description": "Defines an applied payment on the booking.",
            "type": "object",
            "properties": {
                "paymentKey": {
                    "description": "The payment key that uniquely identifies the payment.",
                    "type": "string",
                    "example": ""
                },
                "code": {
                    "description": "The payment method code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "approvalDate": {
                    "format": "date-time",
                    "description": "Date when the card/payment is approved in the database.",
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/PaymentDetails",
                    "description": "The payment detail information."
                },
                "amounts": {
                    "$ref": "#/definitions/PaymentAmounts",
                    "description": "The payment amounts and currency codes."
                },
                "authorizationCode": {
                    "description": "The banks auth code when funds are released.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "authorizationStatus": {
                    "description": "The real payment status that should never be exposed to the end user unless a agent.",
                    "enum": [
                        "Unknown",
                        "Acknowledged",
                        "Pending",
                        "InProcess",
                        "Approved",
                        "Declined",
                        "Referral",
                        "PickUpCard",
                        "HotCard",
                        "Voided",
                        "Retrieval",
                        "ChargedBack",
                        "Error",
                        "ValidationFailed",
                        "Address",
                        "VerificationCode",
                        "FraudPrevention"
                    ],
                    "type": "string"
                },
                "fundedDate": {
                    "format": "date-time",
                    "description": "The date restriction for a payment (when funds will be there).",
                    "type": "string"
                },
                "transactionCode": {
                    "description": "Used for credit shell payments and how to compute the expiration of the credit.",
                    "type": "string",
                    "example": ""
                },
                "dcc": {
                    "$ref": "#/definitions/DirectCurrencyConversion",
                    "description": "DCC payment details."
                },
                "threeDSecure": {
                    "$ref": "#/definitions/ThreeDSecure",
                    "description": "3DS payment details."
                },
                "attachments": {
                    "description": "The list of payment attachments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentAttachment"
                    }
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The date the payment was created on.",
                    "type": "string"
                },
                "modifiedDate": {
                    "format": "date-time",
                    "description": "The date the payment was modified.",
                    "type": "string"
                },
                "type": {
                    "description": "The payment method type.",
                    "enum": [
                        "ExternalAccount",
                        "PrePaid",
                        "AgencyAccount",
                        "CustomerAccount",
                        "Voucher",
                        "Loyalty"
                    ],
                    "type": "string"
                },
                "status": {
                    "description": "The status of the booking (this is the safe status).",
                    "enum": [
                        "New",
                        "Received",
                        "Pending",
                        "Approved",
                        "Declined",
                        "Unknown",
                        "PendingCustomerAction"
                    ],
                    "type": "string"
                },
                "transferred": {
                    "description": "Flag that indicates if the payment is a result of a divide.",
                    "type": "boolean",
                    "example": false
                },
                "channelType": {
                    "description": "The channel type that the payment was made through.",
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                },
                "pointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The payments point of sale information."
                },
                "sourcePointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The payments source point of sale information."
                },
                "deposit": {
                    "description": "Flag indicating if the payment is a deposit.",
                    "type": "boolean",
                    "example": false
                },
                "accountId": {
                    "format": "int64",
                    "description": "Used to identify a credit shell, credit file and agency payments.",
                    "minimum": 0,
                    "type": "integer"
                },
                "voucher": {
                    "$ref": "#/definitions/PaymentVoucherDetails",
                    "description": "The applied voucher details."
                },
                "addedToState": {
                    "description": "Flag indicating if the payment has been added to state or not.",
                    "type": "boolean",
                    "example": false
                },
                "createdAgentId": {
                    "format": "int64",
                    "description": "The created agents ID.",
                    "minimum": 0,
                    "type": "integer"
                },
                "modifiedAgentId": {
                    "format": "int64",
                    "description": "The modified agents ID.",
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "RecordLocator": {
            "description": "Defines a unique locator for reference.",
            "type": "object",
            "properties": {
                "systemDomainCode": {
                    "description": "The system domain code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "owningSystemCode": {
                    "description": "The owning system code for the booking.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "bookingSystemCode": {
                    "description": "The system code of who booked.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "recordCode": {
                    "description": "The record code.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "hostedCarrierCode": {
                    "description": "The hosted carriers code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "interactionPurpose": {
                    "description": "The interaction purpose.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PointOfSale": {
            "description": "Model related to the point of sale.",
            "required": [
                "agentCode",
                "organizationCode"
            ],
            "type": "object",
            "properties": {
                "agentCode": {
                    "description": "The point of sale agent code.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "domainCode": {
                    "description": "The point of sale domain code.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "locationCode": {
                    "description": "The point of sale location code.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "organizationCode": {
                    "description": "The point of sale organization code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BookingPointOfSale": {
            "description": "Model related to the point of sale.",
            "required": [
                "agentCode",
                "organizationCode"
            ],
            "type": "object",
            "properties": {
                "isoCountryCode": {
                    "description": "Two character country code, optionally supplied in GDS message",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceSystemCode": {
                    "description": "Two character system code, optionally supplied in GDS message",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "agentCode": {
                    "description": "The point of sale agent code.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "domainCode": {
                    "description": "The point of sale domain code.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "locationCode": {
                    "description": "The point of sale location code.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "organizationCode": {
                    "description": "The point of sale organization code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerPriceBreakdownBase": {
            "description": "Defines the combined booking passengers pricing breakdown.",
            "type": "object",
            "properties": {
                "services": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of the service fees."
                },
                "specialServices": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of the special service requests."
                },
                "seats": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of seat fees."
                },
                "upgrades": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of upgrade fees."
                },
                "spoilage": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of spoilage fees."
                },
                "nameChanges": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of name change fees."
                },
                "convenience": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of convenience fees."
                },
                "infant": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of infant fees."
                }
            }
        },
        "PassengerPriceBreakdown": {
            "description": "Defines the individual passenger level pricing breakdown.",
            "type": "object",
            "properties": {
                "passengerKey": {
                    "description": "The unique passenger number.",
                    "type": "string",
                    "example": ""
                },
                "services": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of the service fees."
                },
                "specialServices": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of the special service requests."
                },
                "seats": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of seat fees."
                },
                "upgrades": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of upgrade fees."
                },
                "spoilage": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of spoilage fees."
                },
                "nameChanges": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of name change fees."
                },
                "convenience": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of convenience fees."
                },
                "infant": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of infant fees."
                }
            }
        },
        "JourneyPriceBreakdownBase": {
            "description": "Defines the journey price breakdown base.",
            "type": "object",
            "properties": {
                "totalAmount": {
                    "format": "double",
                    "description": "The journey price total.",
                    "type": "number"
                },
                "totalPoints": {
                    "format": "double",
                    "description": "The journey points total.",
                    "type": "number"
                },
                "totalTax": {
                    "format": "double",
                    "description": "The journey taxes total.",
                    "type": "number"
                },
                "totalDiscount": {
                    "format": "double",
                    "description": "The journey discount total.",
                    "type": "number"
                }
            }
        },
        "JourneyPriceBreakdown": {
            "description": "Defines a specifics journey pricing breakdown.",
            "type": "object",
            "properties": {
                "journeyKey": {
                    "description": "The unique journey key.",
                    "type": "string",
                    "example": ""
                },
                "totalAmount": {
                    "format": "double",
                    "description": "The journey price total.",
                    "type": "number"
                },
                "totalPoints": {
                    "format": "double",
                    "description": "The journey points total.",
                    "type": "number"
                },
                "totalTax": {
                    "format": "double",
                    "description": "The journey taxes total.",
                    "type": "number"
                },
                "totalDiscount": {
                    "format": "double",
                    "description": "The journey discount total.",
                    "type": "number"
                }
            }
        },
        "AddOnPriceBreakdown": {
            "description": "Defines the addOn price breakdown.",
            "type": "object",
            "properties": {
                "car": {
                    "format": "double",
                    "description": "The car price total.",
                    "type": "number"
                },
                "hotel": {
                    "format": "double",
                    "description": "The hotel price total.",
                    "type": "number"
                },
                "activities": {
                    "format": "double",
                    "description": "The activities price total.",
                    "type": "number"
                }
            }
        },
        "PassengerFee": {
            "description": "Model representing passenger fee information.",
            "required": [
                "code"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The fee type.",
                    "enum": [
                        "All",
                        "Tax",
                        "TravelFee",
                        "ServiceFee",
                        "PaymentFee",
                        "PenaltyFee",
                        "SsrFee",
                        "NonFlightServiceFee",
                        "UpgradeFee",
                        "SeatFee",
                        "BaseFare",
                        "SpoilageFee",
                        "NameChangeFee",
                        "ConvenienceFee",
                        "BaggageFee",
                        "FareSurcharge",
                        "PromotionDiscount",
                        "ServiceBundle",
                        "ExtraBagFee"
                    ],
                    "type": "string"
                },
                "ssrCode": {
                    "description": "The SSR code.",
                    "type": "string",
                    "example": ""
                },
                "ssrNumber": {
                    "format": "int32",
                    "description": "The fee SSR number.",
                    "type": "integer"
                },
                "paymentNumber": {
                    "format": "int32",
                    "description": "The fee payment number.",
                    "type": "integer"
                },
                "code": {
                    "description": "The fee code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "detail": {
                    "description": "The fee detail.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerFeeKey": {
                    "description": "The passenger fee key.",
                    "type": "string",
                    "example": ""
                },
                "override": {
                    "description": "The fee override.",
                    "type": "boolean",
                    "example": false
                },
                "flightReference": {
                    "description": "The flight reference which signifies a link to a segment and or leg.",
                    "maxLength": 22,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The fee notes.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The created date for the fee.",
                    "type": "string"
                },
                "isProtected": {
                    "description": "Indicates if the fee is protected.",
                    "type": "boolean",
                    "example": false
                },
                "serviceCharges": {
                    "description": "The list of service charges for the fee.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCharge"
                    }
                }
            }
        },
        "PassengerProgram": {
            "description": "Model representing a passenger program.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "pattern": "^[^|]*$",
                    "type": "string",
                    "example": ""
                },
                "levelCode": {
                    "description": "The program level code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "pattern": "^[^|]*$",
                    "type": "string",
                    "example": ""
                },
                "number": {
                    "description": "The program number.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerInfant": {
            "description": "Model representing an infant with a passenger.",
            "type": "object",
            "properties": {
                "fees": {
                    "description": "The collection of infant fees.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InfantFee"
                    },
                    "readOnly": true
                },
                "nationality": {
                    "description": "The nationality of the passenger.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth of the infant.",
                    "type": "string"
                },
                "travelDocuments": {
                    "description": "Travel Documents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerTravelDocument"
                    }
                },
                "residentCountry": {
                    "description": "The residentCountry of the passenger.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "gender": {
                    "description": "The gender of the passenger.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name of the passenger."
                }
            }
        },
        "PassengerInformation": {
            "description": "Model representing additional passenger information.",
            "type": "object",
            "properties": {
                "nationality": {
                    "description": "The passenger nationality.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "residentCountry": {
                    "description": "The resident country.",
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "gender": {
                    "description": "Gets or sets passenger gender.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The passenger's date of birth.",
                    "type": "string"
                },
                "familyNumber": {
                    "format": "int32",
                    "description": "The unique identifier of a family registered in the system.",
                    "type": "integer"
                }
            }
        },
        "PassengerAddress": {
            "description": "Passenger address information. This contains more data then the base address class.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "The addresses APIS status.",
                    "enum": [
                        "Residence",
                        "InCountry",
                        "Emergency"
                    ],
                    "type": "string"
                },
                "companyName": {
                    "description": "Company name associated with this address.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerAddressKey": {
                    "description": "The unique address identifier.",
                    "type": "string",
                    "example": ""
                },
                "phone": {
                    "description": "Phone number associated with this address.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "stationCode": {
                    "description": "Station code associated with this address.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "JourneyMove": {
            "description": "Summarized move data at the journey level.",
            "type": "object",
            "properties": {
                "maxMoveBackDays": {
                    "format": "int32",
                    "description": "The maximum number of days this flight can be moved backwards.",
                    "type": "integer"
                },
                "maxMoveOutDays": {
                    "format": "int32",
                    "description": "The maximum number of days this flight can be moved forward.",
                    "type": "integer"
                }
            }
        },
        "Segment": {
            "description": "Segment model for an already booked flight.",
            "type": "object",
            "properties": {
                "isStandby": {
                    "description": "Represents the stand by status of the segment.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isConfirming": {
                    "description": "Represents the confirmed status of the segment.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isBlocked": {
                    "description": "Represents the blocked status of the segment.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isHosted": {
                    "description": "Represents the hosted status of the segment.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isChangeOfGauge": {
                    "description": "Represents the change of gauge status of the segment.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "This is a summarry of all the legs on the segment. It will contain the details\r\nof the transportation from the first and last leg.",
                    "readOnly": true
                },
                "isSeatmapViewable": {
                    "description": "Indicates if the seatmaps associated with the segment are viewable.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "fares": {
                    "description": "The fares.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Fare"
                    }
                },
                "segmentKey": {
                    "description": "The unique identifier for this segment sell information.",
                    "type": "string",
                    "example": ""
                },
                "identifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The transportation identifier."
                },
                "passengerSegment": {
                    "description": "Passengers on this segment by passenger key.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/PassengerSegment"
                        }
                    }
                },
                "channelType": {
                    "description": "The type of the channel from the user that added the segment.",
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                },
                "cabinOfService": {
                    "description": "The cabin of service.",
                    "type": "string"
                },
                "externalIdentifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The external transportation identifier."
                },
                "priorityCode": {
                    "description": "The priority code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "changeReasonCode": {
                    "description": "The change reason code.",
                    "enum": [
                        "NoChange",
                        "Irop",
                        "ScheduleChange",
                        "Move",
                        "VoluntaryFlyAhead",
                        "InvoluntaryFlyAhead"
                    ],
                    "type": "string"
                },
                "segmentType": {
                    "description": "The type of the segment.",
                    "enum": [
                        "Normal",
                        "CodeShareOperating",
                        "CodeShareMarketing",
                        "InterlineOutbound",
                        "InterlineInbound",
                        "Passive"
                    ],
                    "type": "string"
                },
                "salesDate": {
                    "format": "date-time",
                    "description": "The segment sales date.",
                    "type": "string"
                },
                "international": {
                    "description": "The value indicating if this segment is international.",
                    "type": "boolean",
                    "example": false
                },
                "flightReference": {
                    "description": "The flight reference which signifies a link to a segment and or leg.",
                    "maxLength": 22,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "legs": {
                    "description": "The legs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Leg"
                    }
                }
            }
        },
        "PaymentDetails": {
            "description": "Defines the payment details.",
            "type": "object",
            "properties": {
                "accountNumberId": {
                    "format": "int64",
                    "description": "The reference of an encrypted account number.",
                    "minimum": 0,
                    "type": "integer"
                },
                "parentPaymentId": {
                    "format": "int64",
                    "description": "ID of the parent of refunds or divide. Null if none exists.",
                    "minimum": 0,
                    "type": "integer"
                },
                "accountName": {
                    "description": "The account holder name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "accountNumber": {
                    "description": "The account number.",
                    "maxLength": 34,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The expiration date.",
                    "type": "string"
                },
                "text": {
                    "description": "The payment added text.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "installments": {
                    "format": "int32",
                    "description": "The number of installments to be applied.",
                    "maximum": 999,
                    "minimum": 0,
                    "type": "integer"
                },
                "binRange": {
                    "format": "int32",
                    "description": "The first 6 digits of the credit card number.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "fields": {
                    "description": "The collection of payment fields.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                }
            }
        },
        "PaymentAmounts": {
            "description": "Defines the different applied payment amounts for a single payment.",
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "description": "The amount in the booking currency (based off the origin).",
                    "type": "number"
                },
                "currencyCode": {
                    "description": "The payment amount currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "collected": {
                    "format": "double",
                    "description": "The collected amount post DCC or MCC.",
                    "type": "number"
                },
                "collectedCurrencyCode": {
                    "description": "The collected amounts currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "quoted": {
                    "format": "double",
                    "description": "The pre DCC or MCC amount (maybe different than the booking).",
                    "type": "number"
                },
                "quotedCurrencyCode": {
                    "description": "The quoted currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DirectCurrencyConversion": {
            "description": "Defines a direct currency conversion.",
            "type": "object",
            "properties": {
                "rateId": {
                    "format": "uuid",
                    "description": "The rate ID.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The currency code converted to.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "rateValue": {
                    "format": "double",
                    "description": "The conversion rate value.",
                    "type": "number"
                },
                "amount": {
                    "format": "double",
                    "description": "The conversion rate amount.",
                    "type": "number"
                },
                "putInState": {
                    "description": "The put in state value.",
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "The conversion status.",
                    "enum": [
                        "DccNotOffered",
                        "DccOfferRejected",
                        "DccOfferAccepted",
                        "DccInitialValue",
                        "MccInUse"
                    ],
                    "type": "string"
                },
                "applicable": {
                    "description": "Flag indicating if DCC is applicable.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ThreeDSecure": {
            "description": "Defines three D secure.",
            "type": "object",
            "properties": {
                "browserUserAgent": {
                    "description": "The browser agent being used.",
                    "type": "string",
                    "example": ""
                },
                "browserAccept": {
                    "description": "The browser agent accept.",
                    "type": "string",
                    "example": ""
                },
                "remoteIpAddress": {
                    "description": "The remote IP address.",
                    "type": "string",
                    "example": ""
                },
                "termUrl": {
                    "description": "The return URL from the bank.",
                    "type": "string",
                    "example": ""
                },
                "paReq": {
                    "description": "The payload that will be sent to the bank site.",
                    "type": "string",
                    "example": ""
                },
                "acsUrl": {
                    "description": "The URL to redirect to for TDS (aka the bank).",
                    "type": "string",
                    "example": ""
                },
                "paRes": {
                    "description": "The response that comes back from the bank.",
                    "type": "string",
                    "example": ""
                },
                "authResult": {
                    "description": "The result of 3DS.",
                    "type": "string",
                    "example": ""
                },
                "cavv": {
                    "description": "The encrypted string of prof that 3DS was processed.",
                    "type": "string",
                    "example": ""
                },
                "cavvAlgorithm": {
                    "description": "The algorithm that created the Cavv.",
                    "type": "string",
                    "example": ""
                },
                "eci": {
                    "description": "The electronic commerce indicator (the level of 3DS).",
                    "type": "string",
                    "example": ""
                },
                "xid": {
                    "description": "The transaction ID specific to the 3DS 3rd party processing.",
                    "type": "string",
                    "example": ""
                },
                "applicable": {
                    "description": "Flag that indicates if more validation is needed.",
                    "type": "boolean",
                    "example": false
                },
                "successful": {
                    "description": "Flag indicating if 3DS was successful.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PaymentAttachment": {
            "description": "Defines a payment attachment.",
            "type": "object",
            "properties": {
                "id": {
                    "format": "int64",
                    "description": "The attachment ID.",
                    "minimum": 0,
                    "type": "integer"
                },
                "paymentId": {
                    "format": "int64",
                    "description": "The payment ID attached to.",
                    "minimum": 0,
                    "type": "integer"
                },
                "attachment": {
                    "format": "byte",
                    "description": "The attachment data.",
                    "type": "string"
                }
            }
        },
        "PaymentVoucherDetails": {
            "description": "Payment voucher details. This describes a voucher applied to a payment.",
            "type": "object",
            "properties": {
                "id": {
                    "format": "int64",
                    "description": "The voucher ID.",
                    "minimum": 0,
                    "type": "integer"
                },
                "transactionId": {
                    "format": "int64",
                    "description": "The vouchers transactions ID.",
                    "minimum": 0,
                    "type": "integer"
                },
                "overrideRestrictions": {
                    "description": "Flag indicating if the voucher restrictions were overridden.",
                    "type": "boolean",
                    "example": false
                },
                "overrideAmount": {
                    "description": "The amount applied of the voucher.",
                    "type": "boolean",
                    "example": false
                },
                "recordLocator": {
                    "description": "The record locator attached to the voucher.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ChargeBreakdown": {
            "description": "Defines a charge breakdown.",
            "type": "object",
            "properties": {
                "total": {
                    "format": "double",
                    "description": "The total amount.",
                    "type": "number"
                },
                "taxes": {
                    "format": "double",
                    "description": "The total fee taxes amount.",
                    "type": "number"
                },
                "adjustments": {
                    "format": "double",
                    "description": "The total adjusted amount.",
                    "type": "number"
                },
                "charges": {
                    "description": "The collection of charges within the calculation.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCharge"
                    }
                }
            }
        },
        "InfantFee": {
            "description": "Defines the infant fee information.",
            "required": [
                "code"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "description": "The fee code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "detail": {
                    "description": "The fee detail.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerFeeKey": {
                    "description": "The passenger fee key.",
                    "type": "string",
                    "example": ""
                },
                "override": {
                    "description": "The fee override.",
                    "type": "boolean",
                    "example": false
                },
                "flightReference": {
                    "description": "The flight reference which signifies a link to a segment and or leg.",
                    "maxLength": 22,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The fee notes.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The created date for the fee.",
                    "type": "string"
                },
                "isProtected": {
                    "description": "Indicates if the fee is protected.",
                    "type": "boolean",
                    "example": false
                },
                "serviceCharges": {
                    "description": "The list of service charges for the fee.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCharge"
                    }
                }
            }
        },
        "Fare": {
            "description": "Model describing a fare.",
            "type": "object",
            "properties": {
                "isGoverning": {
                    "description": "Flag that indicates if the fare is the governing fare.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "downgradeAvailable": {
                    "description": "Flag indicating if a downgrade is available.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "carrierCode": {
                    "description": "The fares carrier code.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "fareKey": {
                    "description": "Unique key for this type of fare.",
                    "type": "string",
                    "example": ""
                },
                "classOfService": {
                    "description": "The class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "classType": {
                    "description": "The fares type of the class.",
                    "type": "string",
                    "example": ""
                },
                "fareApplicationType": {
                    "description": "The type of the fare application.",
                    "enum": [
                        "Route",
                        "Sector",
                        "Governing"
                    ],
                    "type": "string"
                },
                "fareClassOfService": {
                    "description": "The fare class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fareBasisCode": {
                    "description": "The fare basis code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fareSequence": {
                    "format": "int32",
                    "description": "The fare sequence.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "inboundOutBound": {
                    "description": "The inbound and outbound.",
                    "enum": [
                        "None",
                        "Inbound",
                        "Outbound",
                        "Both",
                        "RoundFrom",
                        "RoundTo"
                    ],
                    "type": "string"
                },
                "fareStatus": {
                    "description": "The fare status.",
                    "enum": [
                        "Default",
                        "SameDayStandBy",
                        "FareOverrideConfirming",
                        "FareOverrideConfirmed",
                        "PublishedFareOverrideConfirming",
                        "PublishedFareOverrideConfirmed"
                    ],
                    "type": "string"
                },
                "isAllotmentMarketFare": {
                    "description": "Gets or sets a value indicating whether this fare is an allotment marker.",
                    "type": "boolean",
                    "example": false
                },
                "originalClassOfService": {
                    "description": "The original class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ruleNumber": {
                    "description": "The rule number.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "productClass": {
                    "description": "The product class.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ruleTariff": {
                    "description": "The rule tariff.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "travelClassCode": {
                    "description": "The travel class code.",
                    "type": "string"
                },
                "crossReferenceClassOfService": {
                    "description": "The cross reference class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerFares": {
                    "description": "The collection of passenger fares.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerFare"
                    }
                },
                "fareLink": {
                    "format": "int32",
                    "description": "The fare link.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "PassengerSegment": {
            "description": "Model data for the passenger on the booking for the specific segment.",
            "type": "object",
            "properties": {
                "seats": {
                    "description": "The seat details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerSeat"
                    }
                },
                "passengerKey": {
                    "description": "The unique key of the passenger on the segment",
                    "type": "string",
                    "example": ""
                },
                "activityDate": {
                    "format": "date-time",
                    "description": "The activity date.",
                    "type": "string"
                },
                "baggageAllowanceUsed": {
                    "description": "A value indicating whether the passenger segment baggage allowance is used.",
                    "type": "boolean",
                    "example": false
                },
                "baggageAllowanceWeight": {
                    "format": "int32",
                    "description": "The passenger segment baggage allowance weight.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "baggageAllowanceWeightType": {
                    "description": "The type of passenger segment baggage allowance weight.",
                    "enum": [
                        "Default",
                        "Pounds",
                        "Kilograms"
                    ],
                    "type": "string"
                },
                "boardingSequence": {
                    "description": "The passenger segment boarding sequence.",
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The created date.",
                    "type": "string"
                },
                "liftStatus": {
                    "description": "The lift status.",
                    "enum": [
                        "Default",
                        "CheckedIn",
                        "Boarded",
                        "NoShow"
                    ],
                    "type": "string"
                },
                "modifiedDate": {
                    "format": "date-time",
                    "description": "The modified date.",
                    "type": "string"
                },
                "overBookIndicator": {
                    "description": "The over book indicator.",
                    "enum": [
                        "NormalSell",
                        "Oversold",
                        "ClassOrCabinOversold"
                    ],
                    "type": "string"
                },
                "priorityDate": {
                    "format": "date-time",
                    "description": "The priority date.",
                    "type": "string"
                },
                "timeChanged": {
                    "description": "Gets or sets a value indicating whether the passenger segment time has changed.",
                    "type": "boolean",
                    "example": false
                },
                "verifiedTravelDocs": {
                    "description": "The verified travel docs. Please use VerifiedTravelDocuments instead.",
                    "maxLength": 44,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourcePointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The source point of sale."
                },
                "pointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The point of sale."
                },
                "ssrs": {
                    "description": "The Ssr information for both the leg and segment.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerSsr"
                    }
                },
                "tickets": {
                    "description": "The ticket information.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Ticket"
                    }
                },
                "bags": {
                    "description": "The baggage information.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerSegmentBag"
                    }
                },
                "scores": {
                    "description": "The collection of passenger scores.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerScore"
                    }
                },
                "boardingPassDetail": {
                    "$ref": "#/definitions/PassengerBoardingPassDetail",
                    "description": "The passengers boardin pass details."
                },
                "hasInfant": {
                    "description": "Flag indicating if the passenger has an infant for the specific segment.",
                    "type": "boolean",
                    "example": false
                },
                "seatPreferences": {
                    "$ref": "#/definitions/SeatPreferences",
                    "description": "The passenger seat preferences."
                },
                "bundleCode": {
                    "description": "The bundle code associated with the passenger segment.",
                    "type": "string",
                    "example": ""
                },
                "verifiedTravelDocuments": {
                    "description": "The travel document keys that have been verified at checkin.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "PassengerFare": {
            "description": "Model that represents the passenger fare details.",
            "required": [
                "passengerType"
            ],
            "type": "object",
            "properties": {
                "serviceCharges": {
                    "description": "The service charges.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCharge"
                    }
                },
                "discountCode": {
                    "description": "The passenger discount code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fareDiscountCode": {
                    "description": "The fare discount code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerType": {
                    "description": "The type of the passenger.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerSeat": {
            "description": "Model for a passenger seat for a segment.",
            "type": "object",
            "properties": {
                "compartmentDesignator": {
                    "description": "The passenger seat compartment designator.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "penalty": {
                    "format": "int32",
                    "description": "The passenger seat penalty.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "unitDesignator": {
                    "description": "The passenger seat unit designator.",
                    "type": "string",
                    "example": ""
                },
                "seatInformation": {
                    "$ref": "#/definitions/SeatInfo",
                    "description": "The passenger seat seat information."
                },
                "arrivalStation": {
                    "description": "The leg arrival station.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "departureStation": {
                    "description": "The leg departure station.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "passengerKey": {
                    "description": "The passenger key associated with the seat.",
                    "type": "string",
                    "example": ""
                },
                "unitKey": {
                    "description": "The seat's unique unit key.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerSsr": {
            "description": "The model for a passengers Ssr details.",
            "type": "object",
            "properties": {
                "note": {
                    "description": "The passenger SSR note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrDuration": {
                    "description": "The length of the Ssr duration.",
                    "enum": [
                        "Segment",
                        "Journey",
                        "Leg"
                    ],
                    "type": "string"
                },
                "ssrKey": {
                    "description": "The key that uniquely identifies the Ssr, passenger, and leg or segment.",
                    "type": "string",
                    "example": ""
                },
                "count": {
                    "format": "int32",
                    "description": "The passenger SSR unit value.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "ssrCode": {
                    "description": "The passenger SSR code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "feeCode": {
                    "description": "The SSR fee code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inBundle": {
                    "description": "Indicates if the SSR is part of a bundle.",
                    "type": "boolean",
                    "example": false
                },
                "passengerKey": {
                    "description": "The unique passenger key.",
                    "type": "string",
                    "example": ""
                },
                "ssrDetail": {
                    "description": "The passenger SSR detail.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrNumber": {
                    "format": "int32",
                    "description": "The passenger SSR number.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "market": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "The market for either the leg or segment depending on the Ssr type."
                }
            }
        },
        "Ticket": {
            "description": "Model for a ticket applied to a passenger.",
            "type": "object",
            "properties": {
                "ticketNumber": {
                    "description": "The ticket number.",
                    "maxLength": 14,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "infantTicketNumber": {
                    "description": "The infant ticket number.",
                    "maxLength": 14,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ticketIndicator": {
                    "description": "The ticket indicator.",
                    "enum": [
                        "Unknown",
                        "TicketRequired",
                        "AutomatedTicketLiftRequired",
                        "ManualTicketLiftRequired",
                        "AutomatedTicketNoLiftRequired",
                        "ManualTicketNoLiftRequired",
                        "HostETicketNoLiftRequired",
                        "ElectronicTicketNoLiftRequired"
                    ],
                    "type": "string"
                },
                "ticketStatus": {
                    "description": "The ticket status.",
                    "enum": [
                        "Unknown",
                        "TicketAvailableForUse",
                        "TicketUnavailableForUse",
                        "TicketReissueRequiredForPassenger",
                        "TicketReissueRequiredForInfant",
                        "TicketReissueRequiredForBoth"
                    ],
                    "type": "string"
                },
                "passengerKey": {
                    "description": "The passenger key the ticket is associated with.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerSegmentBag": {
            "description": "Model information about the baggage a passenger has on a segment.",
            "required": [
                "passengerKey",
                "arrivalStation",
                "departureStation"
            ],
            "type": "object",
            "properties": {
                "baggageKey": {
                    "description": "Unique key for the baggage.",
                    "type": "string",
                    "example": ""
                },
                "passengerKey": {
                    "description": "The passenger key associated to this bag.",
                    "type": "string",
                    "example": ""
                },
                "arrivalStation": {
                    "description": "The bag segment arrival station.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "The bag status.",
                    "enum": [
                        "Default",
                        "Checked",
                        "Removed",
                        "Added",
                        "AddedPrinted"
                    ],
                    "type": "string"
                },
                "departureStation": {
                    "description": "The bag segment departure station.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "osTag": {
                    "description": "The bag OS tag.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerScore": {
            "description": "Defines a passenger score.",
            "required": [
                "guestValueCode"
            ],
            "type": "object",
            "properties": {
                "guestValueCode": {
                    "description": "The guest value code.",
                    "maxLength": 8,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "score": {
                    "format": "int32",
                    "description": "The score.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "passengerKey": {
                    "description": "The passenger key associated with the score.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerBoardingPassDetail": {
            "description": "Defines information used to populate the printed boarding pass and 2D bar codes.",
            "type": "object",
            "properties": {
                "gateInformation": {
                    "description": "The gate information from the boarding pass.",
                    "type": "string",
                    "example": ""
                },
                "priorityInformation": {
                    "description": "The priority information from the boarding pass.",
                    "type": "string",
                    "example": ""
                },
                "cabinClass": {
                    "description": "The cabin class as seen from the boarding pass.",
                    "type": "string",
                    "example": ""
                },
                "compartmentLevel": {
                    "description": "The compartment level as seen from the boarding pass.",
                    "type": "string",
                    "example": ""
                },
                "boardingZone": {
                    "description": "The assigned boarding zone from the boarding pass.",
                    "type": "string",
                    "example": ""
                },
                "seatAssignment": {
                    "description": "The seat assignment as seen from the boarding pass.",
                    "type": "string",
                    "example": ""
                },
                "sequenceNumber": {
                    "description": "The boarding sequence number as seen from the boarding pass.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SeatInfo": {
            "description": "The model for the seat information such as deck, seat properties, etc.",
            "type": "object",
            "properties": {
                "deck": {
                    "format": "int32",
                    "description": "Gets or sets the deck.",
                    "type": "integer"
                },
                "seatSet": {
                    "format": "int32",
                    "description": "Gets or sets the seat set.",
                    "type": "integer"
                },
                "propertyList": {
                    "description": "The property list by type code and value.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                }
            }
        },
        "MarketInformation": {
            "description": "Model information about the market arrival and destination details.",
            "required": [
                "identifier",
                "destination",
                "origin",
                "departureDate"
            ],
            "type": "object",
            "properties": {
                "identifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "Gets or sets the leg arrival station."
                },
                "destination": {
                    "description": "Gets or sets the leg arrival station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "Gets or sets the leg departure station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "departureDate": {
                    "format": "date-time",
                    "description": "The departure date.",
                    "type": "string"
                }
            }
        },
        "BookingQueueRequest": {
            "description": "The booking request base model.",
            "required": [
                "queueCode"
            ],
            "type": "object",
            "properties": {
                "queueCode": {
                    "description": "The code for the booking queue.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "subQueueCode": {
                    "description": "The optional sub queue code.",
                    "type": "string",
                    "example": ""
                },
                "authorizedBy": {
                    "description": "The authorizing agent.",
                    "type": "string",
                    "example": ""
                },
                "startDate": {
                    "format": "date-time",
                    "description": "Begin priority date.",
                    "type": "string"
                },
                "notes": {
                    "description": "The notes for the booking request.",
                    "type": "string",
                    "example": ""
                },
                "endDate": {
                    "format": "date-time",
                    "description": "End priority date.",
                    "type": "string"
                },
                "password": {
                    "description": "The Password needed to access the queue.  Required if queue\r\nis set to password-protected in Sky Manager.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Account": {
            "description": "The account model.",
            "type": "object",
            "properties": {
                "collections": {
                    "description": "The list of account collections.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccountCollection"
                    }
                },
                "accountKey": {
                    "description": "The account key.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "totalAvailable": {
                    "format": "double",
                    "description": "The summed total of all currently available credit amounts for the account.",
                    "type": "number"
                },
                "owner": {
                    "description": "The account owner type.",
                    "enum": [
                        "Organization",
                        "Personnal",
                        "Booking",
                        "Unknown"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "The account type.",
                    "enum": [
                        "Credit",
                        "Prepaid",
                        "Supplementary",
                        "Dependent",
                        "Unknown"
                    ],
                    "type": "string"
                },
                "status": {
                    "description": "The account status.",
                    "enum": [
                        "Open",
                        "Closed",
                        "AgencyInactive",
                        "Unknown"
                    ],
                    "type": "string"
                },
                "totalAmount": {
                    "format": "double",
                    "description": "The total amount.",
                    "type": "number"
                },
                "foreignAvailable": {
                    "format": "double",
                    "description": "The foreign currency available.",
                    "type": "number"
                },
                "foreignCurrencyCode": {
                    "description": "The foreign currency code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AccountCollection": {
            "description": "The account collection model.",
            "type": "object",
            "properties": {
                "transactionCode": {
                    "description": "The transaction code.",
                    "type": "string",
                    "example": ""
                },
                "accountCollectionKey": {
                    "description": "The unique account collection key.",
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The expiration date.",
                    "type": "string"
                },
                "available": {
                    "format": "double",
                    "description": "The available amount.",
                    "type": "number"
                },
                "amount": {
                    "format": "double",
                    "description": "The total amount.",
                    "type": "number"
                }
            }
        },
        "PreCancelDetail": {
            "description": "Defines the pre cancel details for a specific component.",
            "type": "object",
            "properties": {
                "total": {
                    "format": "double",
                    "description": "The total fee cost.",
                    "type": "number",
                    "readOnly": true
                },
                "componentKey": {
                    "description": "The unique component key associated with the pre cancel.",
                    "type": "string",
                    "example": ""
                },
                "fees": {
                    "description": "The collection of cancellation fees.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderFee"
                    }
                },
                "status": {
                    "description": "The status of the pre cancel.",
                    "enum": [
                        "Unknown",
                        "CancelAvailable",
                        "ExternalCancelAvailable",
                        "ImmediateCancel",
                        "CancelDenied",
                        "RemoveFromBooking",
                        "CancelPending"
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "The pre cancel description.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AddOnSettings": {
            "description": "Defines a add ons field validation requirements.",
            "type": "object",
            "properties": {
                "addOnKey": {
                    "description": "The unique add on key.",
                    "type": "string",
                    "example": ""
                },
                "customer": {
                    "$ref": "#/definitions/CustomerSettings",
                    "description": "The order customers field validation."
                },
                "primaryParticipant": {
                    "$ref": "#/definitions/ParticipantSettings",
                    "description": "The order primary participant field validation."
                },
                "participant": {
                    "$ref": "#/definitions/ParticipantSettings",
                    "description": "The order participant field validation."
                }
            }
        },
        "CustomerSettings": {
            "description": "Defines the order customers field validation levels.",
            "type": "object",
            "properties": {
                "customerNumber": {
                    "description": "The field usage for the customer number.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "title": {
                    "description": "The title field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "firstName": {
                    "description": "The first name field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "middleName": {
                    "description": "The middle name field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "lastName": {
                    "description": "The last name field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "lineOne": {
                    "description": "The address line one field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "lineTwo": {
                    "description": "The address line two field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "city": {
                    "description": "The address city field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "postalCode": {
                    "description": "The address postal code field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "provinceState": {
                    "description": "The address province state field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "countryCode": {
                    "description": "The address country code field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "county": {
                    "description": "The address county field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "homePhone": {
                    "description": "The home phone number field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "workPhone": {
                    "description": "The work phone field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "fax": {
                    "description": "The fax number field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "email": {
                    "description": "The email address field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "The consumer type field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "companyName": {
                    "description": "The company name field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "birthDate": {
                    "description": "The date of birth field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                }
            }
        },
        "ParticipantSettings": {
            "description": "Defines the order participant field validation levels.",
            "type": "object",
            "properties": {
                "typeCode": {
                    "description": "The field usage for the type code.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "title": {
                    "description": "The title field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "documentNumber": {
                    "description": "The field usage for the document number.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "firstName": {
                    "description": "The first name field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "documentIssueBy": {
                    "description": "The field usage for the document issue by.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "middleName": {
                    "description": "The middle name field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "documentTypeCode": {
                    "description": "The field usage for the document type code.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "lastName": {
                    "description": "The last name field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "lineOne": {
                    "description": "The address line one field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "lineTwo": {
                    "description": "The address line two field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "city": {
                    "description": "The address city field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "postalCode": {
                    "description": "The address postal code field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "provinceState": {
                    "description": "The address province state field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "countryCode": {
                    "description": "The address country code field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "county": {
                    "description": "The address county field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "homePhone": {
                    "description": "The home phone number field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "workPhone": {
                    "description": "The work phone field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "fax": {
                    "description": "The fax number field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "email": {
                    "description": "The email address field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "The consumer type field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "companyName": {
                    "description": "The company name field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "birthDate": {
                    "description": "The date of birth field usage.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                }
            }
        },
        "Consumer": {
            "description": "Defines a consumer.",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name of the consumer."
                },
                "address": {
                    "$ref": "#/definitions/ConsumerAddress",
                    "description": "The address of the consumer."
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth of the consumer.",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The email address of the consumer.",
                    "type": "string",
                    "example": ""
                },
                "companyName": {
                    "description": "The company name of the consumer.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of consumer (business or residental).",
                    "type": "string",
                    "example": ""
                },
                "homePhone": {
                    "description": "The home phone number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "workPhone": {
                    "description": "The work phone number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fax": {
                    "description": "The fax phone number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeltaMapper[Consumer]": {
            "$ref": "#/definitions/Consumer"
        },
        "DeltaMapperPatch": {
            "description": "Delta mapper patch updates a specific property of an object using non dynamic information useful in languages like\r\nGraph Ql.",
            "type": "object",
            "properties": {
                "stringValue": {
                    "description": "Value in string form.",
                    "type": "string",
                    "example": ""
                },
                "numericValue": {
                    "format": "double",
                    "description": "Value in string form.",
                    "type": "number"
                },
                "path": {
                    "description": "The property route ex name or name\\first.",
                    "type": "string",
                    "example": ""
                },
                "jsonValue": {
                    "description": "The string representation of the objects value.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrderParticipantUpdateRequest": {
            "description": "Represents changes that can be made to a component order participant.",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/OrderParticipantNameUpdateRequest",
                    "description": "The name of the participant."
                },
                "address": {
                    "$ref": "#/definitions/ConsumerAddress",
                    "description": "The address of the participant."
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth of the participant.",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The email address of the participant.",
                    "type": "string",
                    "example": ""
                },
                "companyName": {
                    "description": "The company name of the participant.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of participant (business or residental).",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The participant description.",
                    "type": "string",
                    "example": ""
                },
                "document": {
                    "$ref": "#/definitions/ParticipantDocument",
                    "description": "The participant document."
                }
            }
        },
        "OrderParticipantNameUpdateRequest": {
            "description": "Model representing changes that can be made to a component order\r\nparticipant name.",
            "required": [
                "first",
                "last"
            ],
            "type": "object",
            "properties": {
                "first": {
                    "description": "The given first name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "middle": {
                    "description": "The given middle name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "last": {
                    "description": "The given last name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "title": {
                    "description": "The title.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeltaMapper[OrderParticipantUpdateRequest]": {
            "$ref": "#/definitions/OrderParticipantUpdateRequest"
        },
        "OrderPaymentBase": {
            "description": "Defines the order payment base details.",
            "required": [
                "type",
                "number"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The payment type.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name on the payment."
                },
                "number": {
                    "description": "The number on the payment.",
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The expiration date.",
                    "type": "string"
                },
                "cvv": {
                    "description": "The CVV on the payment.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The applied payment amount.",
                    "type": "number"
                },
                "description": {
                    "description": "The payment description.",
                    "type": "string",
                    "example": ""
                },
                "issueNumber": {
                    "description": "The payment issue number.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The payments address."
                },
                "emailAddress": {
                    "description": "The provided email address.",
                    "type": "string",
                    "example": ""
                },
                "phoneNumbers": {
                    "description": "The collection of phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                }
            }
        },
        "AddOnAllowedPayments": {
            "description": "Defines a components allowed payment types.",
            "type": "object",
            "properties": {
                "componentKey": {
                    "description": "The unique component key.",
                    "type": "string",
                    "example": ""
                },
                "payments": {
                    "description": "The collection of allowed payment types.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ComponentPaymentType"
                    }
                }
            }
        },
        "ComponentPaymentType": {
            "description": "Defines a component allowed payment type.",
            "type": "object",
            "properties": {
                "type": {
                    "description": "The payment method type code.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The payment description.",
                    "type": "string",
                    "example": ""
                },
                "modType": {
                    "description": "The modulus check to perform.",
                    "enum": [
                        "None",
                        "Mod10",
                        "Mod11"
                    ],
                    "type": "string"
                },
                "expiration": {
                    "description": "The field usage for expiration date.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "cvv": {
                    "description": "The field usage for CVV.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "The field usage for card holder name.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                },
                "issueNumber": {
                    "description": "The field usage for issue number.",
                    "enum": [
                        "Prompt",
                        "DoNotPrompt",
                        "Required"
                    ],
                    "type": "string"
                }
            }
        },
        "CheckinPassengerLiftStatus": {
            "description": "Defines a single passengers checkin status for a specific segment.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "The lift status of the passenger for a specific segment.",
                    "enum": [
                        "Default",
                        "CheckedIn",
                        "Boarded",
                        "NoShow"
                    ],
                    "type": "string"
                },
                "identifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The transportation identifier."
                }
            }
        },
        "CheckinRequirements": {
            "description": "Defines the pre checkin requirements.",
            "type": "object",
            "properties": {
                "isValid": {
                    "description": "Flag indicating if the ability to checkin is valid.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "passengers": {
                    "description": "The collection of passengers and there requirements to checkin.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/CheckinPassengerRequirements"
                        }
                    }
                },
                "governmentProgramRequirements": {
                    "description": "The collection of government programs requirements.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/GovernmentProgramRequirements"
                        }
                    }
                },
                "restrictions": {
                    "description": "    The list of any non passenger related checkin restrictions that will restrict the desired segments to be checked in. \r\nThe checkin restriction type = ('Closed', 'NotOpened', 'PnrLocked', 'MarketingCodeShareNotAllowed', 'NotPaidInFull', 'PaymentsPending', \r\n'PaymentsPendingCustomerAction', 'RestrictedOnAnotherSystem', 'NotAllowed', 'ApisNotAllowed', 'AppsNotAllowed', 'SegmentNotFound', 'InvalidPrice').",
                    "type": "array",
                    "items": {
                        "enum": [
                            "Closed",
                            "NotOpened",
                            "PnrLocked",
                            "MarketingCodeShareNotAllowed",
                            "NotPaidInFull",
                            "PaymentsPending",
                            "PaymentsPendingCustomerAction",
                            "RestrictedOnAnotherSystem",
                            "NotAllowed",
                            "ApisNotAllowed",
                            "AppsNotAllowed",
                            "SegmentNotFound",
                            "InvalidPrice",
                            "MissingEMDCoupon"
                        ],
                        "type": "string"
                    }
                }
            }
        },
        "CheckinPassengerRequirements": {
            "description": "Defines an individual passengers checkin requirements.",
            "type": "object",
            "properties": {
                "isValid": {
                    "description": "Flag indicating if the specific passenger checkin is valid.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "passengerKey": {
                    "description": "The associated passenger key.",
                    "type": "string",
                    "example": ""
                },
                "documentRequirements": {
                    "$ref": "#/definitions/CheckinDocumentRequirements",
                    "description": "The passengers document requirements."
                },
                "addressRequirements": {
                    "$ref": "#/definitions/CheckinAddressRequirements",
                    "description": "The passengers address requirements."
                },
                "invalidSsrs": {
                    "description": "The collection of checkin restricted/invalid SSR's the passenger contains.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "requiredSsrs": {
                    "description": "The collection of checkin required SSR's the passenger is missing for each segment.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinMissingSegmentRequiredSsr"
                    }
                },
                "restrictions": {
                    "description": "The list of passengers restrictions that will restrict passenger from checkin.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerRestriction"
                    }
                }
            }
        },
        "GovernmentProgramRequirements": {
            "description": "Defines a government programs document requirements.",
            "type": "object",
            "properties": {
                "governmentInstance": {
                    "description": "Identifies which instance of government security is associated with these specific requirements.",
                    "type": "string",
                    "example": ""
                },
                "requiredDocumentFields": {
                    "description": "The collection of required document fields to be collected.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "FirstName",
                            "MiddleName",
                            "LastName",
                            "Title",
                            "Suffix",
                            "DateOfBirth",
                            "BirthCountry",
                            "Gender",
                            "Nationality",
                            "Number",
                            "IssuingCountry",
                            "ExpirationDate",
                            "IssuedDate",
                            "Verified"
                        ],
                        "type": "string"
                    }
                },
                "additionalDataRequired": {
                    "description": "The collection of additional data that is required that are not related to documents.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "CountryOfResidence",
                            "InTransitOrigin",
                            "InTransitDestination",
                            "DateOfBirth",
                            "Gender",
                            "FirstName",
                            "LastName"
                        ],
                        "type": "string"
                    }
                }
            }
        },
        "CheckinDocumentRequirements": {
            "description": "Defines a passenger checkin document requirements.",
            "type": "object",
            "properties": {
                "isValid": {
                    "description": "Flag indicating if the checkin document requirements are all meet and ready/valid for checkin.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "documentsOnFile": {
                    "description": "The collection of document type codes that already exist on the passenger.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "unhandledDocuments": {
                    "description": "The collection of unhandled documents at each acting government entity.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GovernmentPassengerDocumentRequirement"
                    }
                }
            }
        },
        "CheckinAddressRequirements": {
            "description": "Defines a passenger checkin address requirements.",
            "type": "object",
            "properties": {
                "isValid": {
                    "description": "Flag indicating if the checkin address requirements are meet and ready/valid for checkin.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "addressesOnFile": {
                    "description": "The collection of addresses that are tagged to a station code that already exist on the passenger.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "unhandledAddresses": {
                    "description": "The collection of unhandled tagged to station addresses required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "CheckinMissingSegmentRequiredSsr": {
            "description": "Defines the a segments collection of missing SSR's.",
            "type": "object",
            "properties": {
                "codes": {
                    "description": "The collection of SSR's missing.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "The transportation designator that the SSR codes are missing from."
                }
            }
        },
        "CheckinPassengerRestriction": {
            "description": "Defines a passengers restriction for the current segment trying to be checked into.",
            "type": "object",
            "properties": {
                "restriction": {
                    "description": "The passenger restriction type.",
                    "enum": [
                        "NotFound",
                        "MissingDestinationAddress",
                        "MissingCountryOrResidence",
                        "OnLockQueue",
                        "MissingRequiredSsrs",
                        "ContainsRestrictedSsrs",
                        "IsSelectee",
                        "MissingSeat",
                        "NotConfirmed",
                        "NotStandby",
                        "ContainsUnknownSsr",
                        "MissingApisRequirement",
                        "MissingDocuments",
                        "MissingName",
                        "MissingInfantName",
                        "MissingDateOfBirth",
                        "MissingInfantDateOfBirth"
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "The description of the restriction.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "GovernmentPassengerDocumentRequirement": {
            "description": "Defines a specific government document requirements for a specific passenger.",
            "type": "object",
            "properties": {
                "governmentInstance": {
                    "description": "Identifies which instance of government security is associated with these specific requirements.",
                    "type": "string",
                    "example": ""
                },
                "numberOfMissingDocuments": {
                    "format": "int32",
                    "description": "The number of documents still missing.",
                    "type": "integer"
                },
                "eligibleDocuments": {
                    "description": "The collection of eligible documents that have not already been added by the passenger.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GovernmentDocumentRequirement"
                    }
                }
            }
        },
        "GovernmentDocumentRequirement": {
            "description": "Defines a certain document requirement reguarding a specific government instance.",
            "type": "object",
            "properties": {
                "group": {
                    "description": "The document group.",
                    "enum": [
                        "Unknown",
                        "AlienRegistrationCard",
                        "PermanentResidentCard",
                        "FacilitationDocument",
                        "InsPass",
                        "MilitaryId",
                        "Passport",
                        "ReEntryPermit",
                        "CreditCard",
                        "TravelVisa",
                        "OaFrequentFlyer",
                        "ParoleLetter",
                        "NoticeOfAction",
                        "TransportationLetter",
                        "BorderCrossingCard",
                        "PilotLicense",
                        "UsNaturalizationCertificate",
                        "RefugeeTravelDocument",
                        "GovernmentId",
                        "DriversLicense",
                        "RedressNumber",
                        "KnownTravelerId",
                        "FormOfId",
                        "Nexus",
                        "SecondaryExempt"
                    ],
                    "type": "string"
                },
                "documentTypeCode": {
                    "description": "The documents type code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "CheckinPassengersRequest": {
            "description": "Defines the checkin passengers request.",
            "required": [
                "passengers"
            ],
            "type": "object",
            "properties": {
                "passengers": {
                    "description": "The collection of passengers to checkin.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerRequest"
                    }
                },
                "seatsRequired": {
                    "description": "The flag indicating whether a seat is required for checkin.",
                    "type": "boolean"
                },
                "skipSecurityChecks": {
                    "description": "The flag indicating whether checkin requirement validation will be skipped.",
                    "type": "boolean"
                },
                "isStandby": {
                    "description": "The flag indicating whether the collection of passengers are for sandby checkin.",
                    "type": "boolean"
                }
            }
        },
        "CheckinPassengerRequest": {
            "description": "Defines the individual passenger checkin request.",
            "required": [
                "passengerKey"
            ],
            "type": "object",
            "properties": {
                "passengerKey": {
                    "description": "The unique passenger key being checked in.",
                    "type": "string",
                    "example": ""
                },
                "transitType": {
                    "description": "The passengers transit type.",
                    "enum": [
                        "Default",
                        "Origin",
                        "Destination",
                        "Both"
                    ],
                    "type": "string"
                },
                "processApps": {
                    "description": "Flag indicating to process APPS.",
                    "type": "boolean"
                },
                "verifiedReference": {
                    "description": "The value specifying the verified travel document(s) associated with this checkin.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "CheckinPassengersRequestv2": {
            "description": "Defines the checkin passengers request.",
            "required": [
                "passengers"
            ],
            "type": "object",
            "properties": {
                "passengers": {
                    "description": "The collection of passengers to checkin.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerRequestv2"
                    }
                },
                "seatsRequired": {
                    "description": "The flag indicating whether a seat is required for checkin.",
                    "type": "boolean"
                },
                "skipSecurityChecks": {
                    "description": "The flag indicating whether checkin requirement validation will be skipped.",
                    "type": "boolean"
                },
                "isStandby": {
                    "description": "The flag indicating whether the collection of passengers are for sandby checkin.",
                    "type": "boolean"
                }
            }
        },
        "CheckinPassengerRequestv2": {
            "description": "Defines the individual passenger checkin request.",
            "required": [
                "passengerKey"
            ],
            "type": "object",
            "properties": {
                "passengerKey": {
                    "description": "The unique passenger key being checked in.",
                    "type": "string",
                    "example": ""
                },
                "transitType": {
                    "description": "The passengers transit type.",
                    "enum": [
                        "Default",
                        "Origin",
                        "Destination",
                        "Both"
                    ],
                    "type": "string"
                },
                "processApps": {
                    "description": "Flag indicating to process APPS.",
                    "type": "boolean"
                },
                "verifiedTravelDocumentKeys": {
                    "description": "The value specifying the verified travel document(s) associated with this checkin.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "BookingCommentsRequest": {
            "description": "Defines booking comments.",
            "required": [
                "comments"
            ],
            "type": "object",
            "properties": {
                "comments": {
                    "description": "The comments to add.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BookingCommentRequest"
                    }
                }
            }
        },
        "BookingCommentRequest": {
            "description": "Defines a booking comment.",
            "type": "object",
            "properties": {
                "type": {
                    "description": "Indicates where the comment will be seen.",
                    "enum": [
                        "Default",
                        "Itinerary",
                        "Manifest",
                        "Alert",
                        "Archive"
                    ],
                    "type": "string"
                },
                "text": {
                    "description": "The text of the comment.",
                    "maxLength": 1024,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The created date of the comment.",
                    "type": "string"
                }
            }
        },
        "CommitRequestv2": {
            "description": "Represents version two of the booking commit request.",
            "type": "object",
            "properties": {
                "receivedBy": {
                    "description": "The received by name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "restrictionOverride": {
                    "description": "If set to true, booking will be committed even if Price is not valid, granted that agent's role\r\nhas permission to override.",
                    "type": "boolean",
                    "example": false
                },
                "hold": {
                    "$ref": "#/definitions/BookingHold",
                    "description": "The booking hold date."
                },
                "notifyContacts": {
                    "description": "The notify contacts flag.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "CreditAccount": {
            "description": "Defines a credit account information.",
            "type": "object",
            "properties": {
                "accountReference": {
                    "description": "The account reference.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code of the account.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount of credit.",
                    "type": "number"
                },
                "foreignAmount": {
                    "format": "double",
                    "description": "The foreign amount of credit.",
                    "type": "number"
                },
                "foreignCurrencyCode": {
                    "description": "The foreign currency code of the account.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ApplyBookingCreditRequest": {
            "description": "Defines a request to apply credit from state.",
            "required": [
                "request",
                "validation"
            ],
            "type": "object",
            "properties": {
                "request": {
                    "$ref": "#/definitions/ApplyCreditRequest",
                    "description": "The credit details requested."
                },
                "validation": {
                    "$ref": "#/definitions/RetrieveBooking",
                    "description": "The query to retrieve the booking."
                }
            }
        },
        "ApplyCreditRequest": {
            "description": "Defines a request to apply credit from state.",
            "required": [
                "amount"
            ],
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "description": "The amount of credit.",
                    "type": "number"
                },
                "currencyCode": {
                    "description": "The currency code of the account.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "RetrieveBooking": {
            "description": "Model representing the retrieve booking data.",
            "required": [
                "recordLocator"
            ],
            "type": "object",
            "properties": {
                "recordLocator": {
                    "description": "Record locator being requested.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "emailAddress": {
                    "description": "The email address of a contact.",
                    "maxLength": 266,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "destination": {
                    "description": "The destination station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "The origin station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "firstName": {
                    "description": "The first name of a passenger or contact.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lastName": {
                    "description": "The last name of a passenger or contact.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "agentName": {
                    "description": "The agent name that created the booking.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "contactCustomerNumber": {
                    "description": "One of the contacts customer number applied.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "creditCardNumber": {
                    "description": "The last 4 digits of one of the credit card number applied.",
                    "maxLength": 34,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "customerNumber": {
                    "description": "One of the passengers customer numbers applied.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "document": {
                    "$ref": "#/definitions/RetrieveByDocument",
                    "description": "One of the passengers travel document information."
                },
                "flightNumber": {
                    "description": "One of the journeys flight number.",
                    "type": "string",
                    "example": ""
                },
                "osTag": {
                    "description": "One of the OS tag number.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "phoneNumber": {
                    "description": "One of the applied phone numbers to a passenger or contact.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "osTagEndDate": {
                    "format": "date-time",
                    "description": "The OS tag end date.",
                    "type": "string"
                },
                "osTagStartDate": {
                    "format": "date-time",
                    "description": "The OS tag start date.",
                    "type": "string"
                },
                "departureDate": {
                    "format": "date-time",
                    "description": "The first journeys departure date.",
                    "type": "string"
                }
            }
        },
        "RetrieveByDocument": {
            "description": "Model containing information required to retrieve by a document.",
            "required": [
                "documentNumber",
                "documentTypeCode"
            ],
            "type": "object",
            "properties": {
                "documentNumber": {
                    "description": "One of the passengers applied travel document number.",
                    "maxLength": 35,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "documentTypeCode": {
                    "description": "One of the passengers applied travel document type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DivideRequestv2": {
            "description": "Defines the booking divide request.",
            "type": "object",
            "properties": {
                "crsRecordLocators": {
                    "description": "The CRS record locators.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecordLocator"
                    }
                },
                "passengerKeys": {
                    "description": "The passengers to include specified by their respective keys.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "autoDividePayments": {
                    "description": "Allow the divide to automatically divide payments between bookings.",
                    "type": "boolean",
                    "example": false
                },
                "bookingPaymentTransfers": {
                    "description": "Specific amounts to split between the bookings. This is applied if auto divide payments is set to false.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BookingPaymentTransfer"
                    }
                },
                "receivedBy": {
                    "description": "Specify the user requesting the booking divide.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "overrideRestrictions": {
                    "description": "Override any restrictions that may prevent divide.",
                    "type": "boolean",
                    "example": false
                },
                "childEmail": {
                    "description": "The email address for the child booking.",
                    "type": "string",
                    "example": ""
                },
                "cancelSourceBooking": {
                    "description": "Cancel the created booking after divide. If this is set to true the cancelled booking\r\nis not returned and its PNR is not easily available.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BookingPaymentTransfer": {
            "description": "Defines a booking payment transfer transaction",
            "type": "object",
            "properties": {
                "bookingPaymentId": {
                    "format": "int64",
                    "description": "The booking payment id to transfer.",
                    "minimum": 0,
                    "type": "integer"
                },
                "transferAmount": {
                    "format": "double",
                    "description": "The amount to include in the transfer",
                    "type": "number"
                }
            }
        },
        "FareRule": {
            "description": "Defines a fare rule and its data.",
            "type": "object",
            "properties": {
                "fareSellKey": {
                    "description": "The fare sell key that is in reference to the fare rule.",
                    "type": "string",
                    "example": ""
                },
                "content": {
                    "description": "The fare rule content.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "HistoryResponse": {
            "description": "Defines a booking history response.",
            "type": "object",
            "properties": {
                "histories": {
                    "description": "The booking history list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BookingHistory"
                    }
                },
                "pageKey": {
                    "description": "The key of the last item in the history list.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SeatAssignmentHistoryResponse": {
            "description": "Defines a seat assignment history response.",
            "type": "object",
            "properties": {
                "histories": {
                    "description": "The seat assignment history list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SeatAssignmentHistory"
                    }
                },
                "pageKey": {
                    "description": "The key of the last item in the history list.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SeatAssignmentHistory": {
            "description": "Defines a seat assignment history log entry.",
            "type": "object",
            "properties": {
                "designator": {
                    "$ref": "#/definitions/MarketDesignator",
                    "description": "The market designator."
                },
                "identifier": {
                    "description": "The unique transportation identifier.",
                    "type": "string",
                    "example": ""
                },
                "pointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The point of sale."
                },
                "seatAssignment": {
                    "description": "The seat assignment.",
                    "type": "string",
                    "example": ""
                },
                "sourcePointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The source point of sale."
                },
                "compartment": {
                    "description": "The compartment containing the seat.",
                    "type": "string",
                    "example": ""
                },
                "receivedBy": {
                    "description": "The received by name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The passenger name."
                },
                "receivedByReference": {
                    "description": "The received by reference number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The the history entry was created.",
                    "type": "string"
                }
            }
        },
        "MarketDesignator": {
            "description": "Model information about the date market which identifies a market and the departure date.",
            "required": [
                "destination",
                "origin",
                "departureDate"
            ],
            "type": "object",
            "properties": {
                "destination": {
                    "description": "Gets or sets the leg arrival station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "Gets or sets the leg departure station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "departureDate": {
                    "format": "date-time",
                    "description": "The departure date.",
                    "type": "string"
                }
            }
        },
        "SegmentChangeHistoryResponse": {
            "description": "Defines a segment change history response.",
            "type": "object",
            "properties": {
                "histories": {
                    "description": "The segment change history list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SegmentChangeHistory"
                    }
                },
                "pageKey": {
                    "description": "The key of the last item in the history list.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SegmentChangeHistory": {
            "description": "Defines a segment change history log entry.",
            "type": "object",
            "properties": {
                "daysOfWeek": {
                    "description": "The days of the week of the operation.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "type": "string"
                    }
                },
                "segmentNumber": {
                    "format": "int32",
                    "description": "The segment number.",
                    "type": "integer"
                },
                "pointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The point of sale."
                },
                "classOfService": {
                    "description": "The class of service.",
                    "type": "string",
                    "example": ""
                },
                "sourcePointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The source point of sale."
                },
                "market": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "The market information."
                },
                "receivedBy": {
                    "description": "The received by name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "stopCount": {
                    "format": "int32",
                    "description": "The number of stops in the reservation.",
                    "type": "integer"
                },
                "receivedByReference": {
                    "description": "The received by reference number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "connectionIndicator": {
                    "description": "The connection indicator.",
                    "type": "string"
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The the history entry was created.",
                    "type": "string"
                },
                "passengerCount": {
                    "format": "int32",
                    "description": "The number of passengers on the booking.",
                    "type": "integer"
                },
                "scheduledArrivalTime": {
                    "format": "date-time",
                    "description": "The scheduled time of arrival local to the arrival station.",
                    "type": "string"
                },
                "scheduledDepartureTime": {
                    "format": "date-time",
                    "description": "The scheduled time of departure local to the arrival station.",
                    "type": "string"
                },
                "fareBasis": {
                    "description": "An alphanumeric identifier assigned to a fare.",
                    "type": "string",
                    "example": ""
                },
                "fareAmount": {
                    "format": "double",
                    "description": "The cash value of the fare.",
                    "type": "number"
                }
            }
        },
        "FlightMoveHistoryResponse": {
            "description": "Defines a flight move history response.",
            "type": "object",
            "properties": {
                "histories": {
                    "description": "The flight move history list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FlightMoveHistory"
                    }
                },
                "pageKey": {
                    "description": "The key of the last item in the history list.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "FlightMoveHistory": {
            "description": "Defines a flight move history log entry.",
            "type": "object",
            "properties": {
                "previousMarket": {
                    "$ref": "#/definitions/MarketDesignator",
                    "description": "The previous market designator for the journey the passenger \r\nwas moved from."
                },
                "newMarket": {
                    "$ref": "#/definitions/MarketDesignator",
                    "description": "The new market designator for the journey the passenger \r\nwas moved to."
                },
                "pointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The point of sale."
                },
                "previousIdentifier": {
                    "description": "The previous transporation identifier for the journey the passenger \r\nwas moved from.",
                    "type": "string",
                    "example": ""
                },
                "sourcePointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The source point of sale."
                },
                "newIdentifier": {
                    "description": "The new transporation identifier for the journey the passenger \r\nwas moved to.",
                    "type": "string",
                    "example": ""
                },
                "receivedBy": {
                    "description": "The received by name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "changeReason": {
                    "description": "The reason for the move operation.",
                    "enum": [
                        "NoChange",
                        "Irop",
                        "ScheduleChange",
                        "Move",
                        "VoluntaryFlyAhead",
                        "InvoluntaryFlyAhead"
                    ],
                    "type": "string"
                },
                "receivedByReference": {
                    "description": "The received by reference number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The the history entry was created.",
                    "type": "string"
                }
            }
        },
        "DeltaMapper[BookingPointOfSale]": {
            "$ref": "#/definitions/BookingPointOfSale"
        },
        "PromotionRequest": {
            "description": "Defines the simple request to apply a promotion code.",
            "required": [
                "promotionCode"
            ],
            "type": "object",
            "properties": {
                "promotionCode": {
                    "description": "The promotion code to be applied.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "organizationCode": {
                    "description": "The point of sale organization code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BookingQueueItem": {
            "description": "Defines a Booking Queue item.",
            "type": "object",
            "properties": {
                "bookingQueueItemKey": {
                    "description": "Unique identifier booking queue item key.",
                    "type": "string",
                    "example": ""
                },
                "processStatus": {
                    "description": "Process status.",
                    "enum": [
                        "Ready",
                        "Pending"
                    ],
                    "type": "string"
                },
                "bookingKey": {
                    "description": "Booking key of the booking queue entry.",
                    "type": "string",
                    "example": ""
                },
                "processState": {
                    "description": "Process state.",
                    "enum": [
                        "Default",
                        "SegmentsConfirmed",
                        "BookingBalanced",
                        "Other",
                        "Complete"
                    ],
                    "type": "string"
                },
                "segmentKey": {
                    "description": "The segment key of the flight associated with the booking queue entry.",
                    "type": "string",
                    "example": ""
                },
                "inProgress": {
                    "description": "Status.",
                    "type": "boolean",
                    "example": false
                },
                "watchListId": {
                    "format": "int64",
                    "description": "The WatchList Id of the booking queue entry.",
                    "type": "integer"
                },
                "statusReset": {
                    "format": "date-time",
                    "description": "Date status reset.",
                    "type": "string"
                },
                "passengerId": {
                    "format": "int64",
                    "description": "Passenger key if associated to a passenger.",
                    "type": "integer"
                },
                "domainCode": {
                    "description": "Domain code of the booking queue entry.",
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "Free-from note field of the booking queue entry.",
                    "type": "string",
                    "example": ""
                },
                "passengerName": {
                    "$ref": "#/definitions/Name",
                    "description": "Passenger name of the booking queue entry."
                },
                "priorityDate": {
                    "format": "date-time",
                    "description": "Priority date of the booking queue entry.",
                    "type": "string"
                },
                "eventType": {
                    "description": "The booking queue event type that caused the booking queue entry to be created.",
                    "enum": [
                        "Default",
                        "BookingBalanceDue",
                        "BookingNegativeBalance",
                        "BookingCustomerComment",
                        "DeclinedPaymentInitial",
                        "DeclinedPaymentChange",
                        "FareOverride",
                        "ScheduleTimeChange",
                        "ScheduleTimeChangeMisconnect",
                        "ScheduleCancellation",
                        "FlightDesignatorChange",
                        "ReaccommodationMove",
                        "GdsCancelWithPendingPayment",
                        "InvalidPriceStatusOverride",
                        "FareRestrictionOverride",
                        "HeldBookings",
                        "InvalidPriceStatus",
                        "Watchlist",
                        "NonFlightServiceFee",
                        "NotAllTicketNumbersReceived",
                        "BookingSegmentOversold",
                        "ReaccommodationCancel",
                        "ExternalSsrAutoConfirmed",
                        "OpCarrierSegUpdate",
                        "OpCarrierSsrUpdate",
                        "OpCarrierOtherUpdate",
                        "NameChangeNotAllowed",
                        "InboundAscNotProcessed",
                        "OpCarrierInformationChange",
                        "BookingComponentUpdate",
                        "GroupBookings",
                        "BankDirectPnrOutOfBalance",
                        "NoSeatAssigned",
                        "SeatNumberChange",
                        "SsrNotSupportedOnNewSeat",
                        "FewerSeatPreferencesMetOnNewSeat",
                        "AosUnableToConfirmCancel",
                        "ETicketIssue",
                        "ETicketFollowup",
                        "InvoluntaryFlyAhead",
                        "ManualClearanceOnOutage",
                        "UnbalancedPoints",
                        "OpCarrierTimeChange",
                        "OaCarrierTimeChange",
                        "VoluntaryFlightChange",
                        "InvoluntaryFlightChange",
                        "HoldCancellationFailed",
                        "ScheduleTimeChangeWithDynamicQueueCode",
                        "ReaccommodationMoveWithDynamicQueueCode",
                        "ItineraryIntegrity",
                        "ReducePartyNotProcessed",
                        "CheckedPassengerUpdate",
                        "NameChangeWithinRule",
                        "IncompletePassengerEMDCoupon",
                        "ASVCUpdateFailed",
                        "ScheduleTimeChangeMisconnectBelowMinimum",
                        "ScheduleTimeChangeMisconnectAboveMaximum"
                    ],
                    "type": "string"
                },
                "restriction": {
                    "description": "The restrictions associated with the booking queue.",
                    "enum": [
                        "Restricted",
                        "AddAllowedOnly",
                        "Allowed"
                    ],
                    "type": "string"
                },
                "recordLocator": {
                    "description": "The booking record locator associated with the booking queue entry.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeleteBookingQueueItemBaseRequest": {
            "description": "API request object used to delete a booking queue item.",
            "required": [
                "authorizedBy",
                "notes"
            ],
            "type": "object",
            "properties": {
                "authorizedBy": {
                    "description": "Information about who authorized the deletion of the booking queue item.",
                    "type": "string",
                    "example": ""
                },
                "notes": {
                    "description": "Notes associated with the deletion of the booking queue item.",
                    "type": "string",
                    "example": ""
                },
                "password": {
                    "description": "The password if needed for the booking queue.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "MoveBookingQueueItemBase": {
            "description": "Defines a move booking queue item request",
            "required": [
                "bookingKey",
                "newQueueCode"
            ],
            "type": "object",
            "properties": {
                "bookingKey": {
                    "description": "The existing booking key.",
                    "type": "string",
                    "example": ""
                },
                "password": {
                    "description": "The current password if required for the queue.",
                    "maxLength": 16,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "newQueueCode": {
                    "description": "The new booking queue the item will be moved to.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "newQueuePassword": {
                    "description": "The password if required for the new queue.",
                    "maxLength": 16,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BookingQueueHistoryRequest": {
            "description": "The booking queue history request model.",
            "type": "object",
            "properties": {
                "password": {
                    "description": "The password needed to access the queue.  Required if queue\r\nis set to password-protected in Sky Manager.",
                    "type": "string",
                    "example": ""
                },
                "lastPageIndex": {
                    "format": "int64",
                    "description": "Indicates the last item number in the history list that was returned.",
                    "minimum": 1,
                    "type": "integer"
                },
                "pageSize": {
                    "format": "int32",
                    "description": "Used to specify the number of records to return when paging is supported.\r\nThis is optional.",
                    "maximum": 5000,
                    "minimum": 10,
                    "type": "integer"
                },
                "fromArchive": {
                    "description": "Gets or sets the from archive flag needed to access the queue.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BookingQueueHistory": {
            "description": "Represents a booking queue history item.",
            "type": "object",
            "properties": {
                "alternatePassengerKey": {
                    "description": "The alternate passenger key.",
                    "type": "string",
                    "example": ""
                },
                "historyId": {
                    "format": "int64",
                    "description": "The booking queue history ID.",
                    "type": "integer"
                },
                "historyEvent": {
                    "description": "The booking queue history event type.",
                    "enum": [
                        "Unknown",
                        "Add",
                        "Remove",
                        "Update"
                    ],
                    "type": "string"
                },
                "queueCode": {
                    "description": "The booking queue code.",
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The booking queue note.",
                    "type": "string",
                    "example": ""
                },
                "dequeueNote": {
                    "description": "The note associated with a dequeue action.",
                    "type": "string",
                    "example": ""
                },
                "authorizedBy": {
                    "description": "The booking queue authorized by field.",
                    "type": "string",
                    "example": ""
                },
                "priorityDate": {
                    "format": "date-time",
                    "description": "The booking queue priority date.",
                    "type": "string"
                },
                "queueAction": {
                    "description": "The booking queue action.",
                    "enum": [
                        "Default",
                        "Warning",
                        "Lock",
                        "DefaultAndNotify",
                        "WarningAndNotify",
                        "LockAndNotify"
                    ],
                    "type": "string"
                },
                "domainCode": {
                    "description": "The booking queue domain code.",
                    "type": "string",
                    "example": ""
                },
                "createdByUserKey": {
                    "description": "The key of the user that created the booking queue event.",
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The booking queue item created date.",
                    "type": "string"
                },
                "queueType": {
                    "description": "The booking queue item event type.",
                    "enum": [
                        "Default",
                        "BookingBalanceDue",
                        "BookingNegativeBalance",
                        "BookingCustomerComment",
                        "DeclinedPaymentInitial",
                        "DeclinedPaymentChange",
                        "FareOverride",
                        "ScheduleTimeChange",
                        "ScheduleTimeChangeMisconnect",
                        "ScheduleCancellation",
                        "FlightDesignatorChange",
                        "ReaccommodationMove",
                        "GdsCancelWithPendingPayment",
                        "InvalidPriceStatusOverride",
                        "FareRestrictionOverride",
                        "HeldBookings",
                        "InvalidPriceStatus",
                        "Watchlist",
                        "NonFlightServiceFee",
                        "NotAllTicketNumbersReceived",
                        "BookingSegmentOversold",
                        "ReaccommodationCancel",
                        "ExternalSsrAutoConfirmed",
                        "OpCarrierSegUpdate",
                        "OpCarrierSsrUpdate",
                        "OpCarrierOtherUpdate",
                        "NameChangeNotAllowed",
                        "InboundAscNotProcessed",
                        "OpCarrierInformationChange",
                        "BookingComponentUpdate",
                        "GroupBookings",
                        "BankDirectPnrOutOfBalance",
                        "NoSeatAssigned",
                        "SeatNumberChange",
                        "SsrNotSupportedOnNewSeat",
                        "FewerSeatPreferencesMetOnNewSeat",
                        "AosUnableToConfirmCancel",
                        "ETicketIssue",
                        "ETicketFollowup",
                        "InvoluntaryFlyAhead",
                        "ManualClearanceOnOutage",
                        "UnbalancedPoints",
                        "OpCarrierTimeChange",
                        "OaCarrierTimeChange",
                        "VoluntaryFlightChange",
                        "InvoluntaryFlightChange",
                        "HoldCancellationFailed",
                        "ScheduleTimeChangeWithDynamicQueueCode",
                        "ReaccommodationMoveWithDynamicQueueCode",
                        "ItineraryIntegrity",
                        "ReducePartyNotProcessed",
                        "CheckedPassengerUpdate",
                        "NameChangeWithinRule",
                        "IncompletePassengerEMDCoupon",
                        "ASVCUpdateFailed",
                        "ScheduleTimeChangeMisconnectBelowMinimum",
                        "ScheduleTimeChangeMisconnectAboveMaximum"
                    ],
                    "type": "string"
                },
                "pointOfSale": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The booking queue item point of sale."
                },
                "segmentKey": {
                    "description": "The booking queue item segment key.",
                    "type": "string",
                    "example": ""
                },
                "watchListId": {
                    "format": "int64",
                    "description": "The watch list ID of the booking queue entry.",
                    "type": "integer"
                }
            }
        },
        "QueueResults": {
            "description": "Base class for all queue model objects",
            "type": "object",
            "properties": {
                "queues": {
                    "description": "Queues.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Queue"
                    }
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total available count.",
                    "type": "integer"
                },
                "lastPageIndex": {
                    "format": "int64",
                    "description": "Last page index used for paging.",
                    "type": "integer"
                }
            }
        },
        "Queue": {
            "description": "Base class for all queue model objects",
            "type": "object",
            "properties": {
                "queueCode": {
                    "description": "QueueCode of the particular BookingQueue",
                    "type": "string",
                    "example": ""
                },
                "subQueueCode": {
                    "description": "SubQueueCode of the particular BookingQueue",
                    "type": "string",
                    "example": ""
                },
                "queueCategoryCode": {
                    "description": "Category of the BookingQueue, used by routing logic",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the BookingQueue",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "CreateAccountRequest": {
            "description": "The create account request model.",
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AccountCollectionRequest": {
            "description": "The account collection request model.",
            "required": [
                "amount",
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "transactionCode": {
                    "description": "The transaction code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The credit account transaction amount.",
                    "type": "number"
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The account collection expiration.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The credit account transaction currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The credit account transaction note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ItineraryQuoteRequest": {
            "description": "Defines the itinerary booking quote request.",
            "required": [
                "passengers",
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "ssrs": {
                    "description": "Sell service requests to quote.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrsStatelessRequest"
                    }
                },
                "keys": {
                    "description": "The list of selected sell keys to be added to the booking.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SellKey"
                    }
                },
                "passengers": {
                    "$ref": "#/definitions/PassengerTypeCriteria",
                    "description": "The list of passengers."
                },
                "currencyCode": {
                    "description": "The desired currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "infantCount": {
                    "format": "int32",
                    "description": "The number of infants to be added.",
                    "type": "integer"
                },
                "promotionCode": {
                    "description": "The promo code to apply.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceOrganization": {
                    "description": "The acting source organization code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SsrsStatelessRequest": {
            "description": "Ssrs by type model allows multiple Ssr requests for a specific type.",
            "required": [
                "market"
            ],
            "type": "object",
            "properties": {
                "market": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "Market for the segment."
                },
                "items": {
                    "description": "SSR request items.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrRequestByPassengerType"
                    }
                }
            }
        },
        "SellKey": {
            "description": "Sell key represents the journey and the fare sell keys to combine to what journey and fare will be sold.",
            "required": [
                "journeyKey",
                "fareAvailabilityKey"
            ],
            "type": "object",
            "properties": {
                "journeyKey": {
                    "description": "The journey sell key.",
                    "type": "string",
                    "example": ""
                },
                "fareAvailabilityKey": {
                    "description": "The fare sell key.",
                    "type": "string",
                    "example": ""
                },
                "standbyPriorityCode": {
                    "description": "The stand by priority code.",
                    "type": "string",
                    "example": ""
                },
                "inventoryControl": {
                    "description": "The reserving inventory action of the journey once sold by the system.",
                    "enum": [
                        "HoldSpace",
                        "SoftHoldSpace",
                        "ClaimSpace",
                        "OversellSpace",
                        "StandBy"
                    ],
                    "type": "string"
                }
            }
        },
        "SsrRequestByPassengerType": {
            "description": "SSR request for a single passenger type.",
            "required": [
                "passengerType"
            ],
            "type": "object",
            "properties": {
                "passengerType": {
                    "description": "The passenger type.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrs": {
                    "description": "The Ssr code.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrDesignatorRequest"
                    }
                }
            }
        },
        "SsrDesignatorRequest": {
            "description": "SSR request for a Ssr designator request.",
            "required": [
                "ssrCode"
            ],
            "type": "object",
            "properties": {
                "ssrCode": {
                    "description": "The Ssr code.",
                    "type": "string",
                    "example": ""
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items to include. Defaults to 1.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "designator": {
                    "$ref": "#/definitions/MarketDesignator",
                    "description": "The designator if different than the segment. This will only be passed to select a unique leg on flights with\r\nmultiple legs."
                }
            }
        },
        "ItineraryQuote": {
            "description": "Defines the itinerary quote model.",
            "type": "object",
            "properties": {
                "passengers": {
                    "description": "The dictionary of passengers.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/Passenger"
                        }
                    }
                },
                "journeys": {
                    "description": "The list of journeys.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Journey"
                    }
                },
                "breakdown": {
                    "$ref": "#/definitions/BookingPriceBreakdown",
                    "description": "The itinerary pricing breakdown."
                }
            }
        },
        "SeatMapAvailability": {
            "description": "Defines the equipment availability.",
            "type": "object",
            "properties": {
                "seatMap": {
                    "$ref": "#/definitions/SeatMap",
                    "description": "The seat map."
                },
                "fees": {
                    "description": "The collection passenger seat group fees to go along with the collection of seat maps.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/PassengerSeatGroupInfo"
                        }
                    }
                },
                "ssrLookup": {
                    "description": "The list of SSR's available.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/Ssr"
                        }
                    }
                }
            }
        },
        "SeatMap": {
            "description": "Defines a single equipment type and all it's units.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the equipment.",
                    "type": "string",
                    "example": ""
                },
                "arrivalStation": {
                    "description": "The arrival station.",
                    "type": "string",
                    "example": ""
                },
                "departureStation": {
                    "description": "The departure station.",
                    "type": "string",
                    "example": ""
                },
                "marketingCode": {
                    "description": "The marketing code on the inventory equipment.",
                    "type": "string",
                    "example": ""
                },
                "equipmentType": {
                    "description": "The equipment label.",
                    "type": "string",
                    "example": ""
                },
                "equipmentTypeSuffix": {
                    "description": "The equipment code/suffix.",
                    "type": "string",
                    "example": ""
                },
                "category": {
                    "description": "The categorization of the equipment.",
                    "enum": [
                        "None",
                        "JetAircraft",
                        "PistonAircraft",
                        "TurbopropAircraft",
                        "Helicopter",
                        "Surface",
                        "Train",
                        "Bus",
                        "AllCategories"
                    ],
                    "type": "string"
                },
                "availableUnits": {
                    "format": "int32",
                    "description": "Number of available units on the inventory equipment.",
                    "type": "integer"
                },
                "decks": {
                    "description": "The collection of decks/levels for the equipment.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/DeckInformation"
                        }
                    }
                },
                "seatmapReference": {
                    "description": "The reference identifying what seatmap the leg is in associated to.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerSeatGroupInfo": {
            "description": "Defines the equipment seat group details for a specific passenger.",
            "type": "object",
            "properties": {
                "passengerKey": {
                    "description": "The associated passenger key.",
                    "type": "string",
                    "example": ""
                },
                "groups": {
                    "description": "The collection of seat group fees.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/SeatGroupInfo"
                        }
                    }
                }
            }
        },
        "Ssr": {
            "description": "The sell service request (SSR) model.",
            "type": "object",
            "properties": {
                "ssrCode": {
                    "description": "The Ssr code.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "feeCode": {
                    "description": "The fee code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrNestCode": {
                    "description": "The Ssr nest code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "traceQueueCode": {
                    "description": "The trace queue code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrType": {
                    "description": "The Ssr type.",
                    "enum": [
                        "Standard",
                        "Infant",
                        "Meal",
                        "BaggageAllowance",
                        "TravelLineMeal"
                    ],
                    "type": "string"
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                },
                "unitValue": {
                    "format": "int32",
                    "description": "The unit value.",
                    "type": "integer"
                },
                "limitPerPassenger": {
                    "format": "int32",
                    "description": "The limit per passenger.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "boardingZone": {
                    "format": "int32",
                    "description": "The boarding zone.",
                    "maximum": 99,
                    "minimum": 0,
                    "type": "integer"
                },
                "allowed": {
                    "description": "<b>Deprecated</b> - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.",
                    "type": "boolean",
                    "example": false
                },
                "seatMapCode": {
                    "description": "The seat map code.",
                    "type": "string"
                },
                "seatRestriction": {
                    "description": "The seat restriction.",
                    "enum": [
                        "Undefined",
                        "AlwaysAllowed",
                        "DefaultAllowed",
                        "DefaultRestricted"
                    ],
                    "type": "string"
                },
                "ruleSetName": {
                    "description": "The rule set name.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeckInformation": {
            "description": "Defines a deck within an equipment.",
            "type": "object",
            "properties": {
                "number": {
                    "format": "int32",
                    "description": "The deck number.",
                    "type": "integer"
                },
                "compartments": {
                    "description": "The collection of compartments within the deck.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/CompartmentInformation"
                        }
                    }
                }
            }
        },
        "SeatGroupInfo": {
            "description": "Information about a equipment seat group.",
            "type": "object",
            "properties": {
                "group": {
                    "format": "int32",
                    "description": "The seat group number.",
                    "type": "integer"
                },
                "fees": {
                    "description": "The list of seat group fees.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerFee"
                    }
                }
            }
        },
        "CompartmentInformation": {
            "description": "Defines a compartment within an equipment -&gt; deck.",
            "type": "object",
            "properties": {
                "availableUnits": {
                    "format": "int32",
                    "description": "The number of available units in the compartment.",
                    "type": "integer"
                },
                "designator": {
                    "description": "The unique designator for the compartment.",
                    "type": "string",
                    "example": ""
                },
                "length": {
                    "format": "int32",
                    "description": "The length of the compartment.",
                    "type": "integer"
                },
                "width": {
                    "format": "int32",
                    "description": "The width of the compartment.",
                    "type": "integer"
                },
                "sequence": {
                    "format": "int32",
                    "description": "The compartment's sequence number in the equipments deck.",
                    "type": "integer"
                },
                "orientation": {
                    "format": "int32",
                    "description": "The facing orientation this compartment is in.",
                    "type": "integer"
                },
                "units": {
                    "description": "The list of units contained in the compartment.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UnitInformation"
                    }
                }
            }
        },
        "UnitInformation": {
            "description": "Defines a unit within an equipment -&gt; decks -&gt; compartment.",
            "type": "object",
            "properties": {
                "unitKey": {
                    "description": "The key used to assign the unit to a passenger.",
                    "type": "string",
                    "example": ""
                },
                "assignable": {
                    "description": "Flag indicating if the unit is assignable (aka is a seat). If false this means that the unit is a fixture.",
                    "type": "boolean",
                    "example": false
                },
                "availability": {
                    "description": "The availability of the seat.",
                    "enum": [
                        "Unknown",
                        "Reserved",
                        "Blocked",
                        "HeldForAnotherSession",
                        "HeldForThisSession",
                        "Open",
                        "Missing",
                        "CheckedIn",
                        "FleetBlocked",
                        "Restricted",
                        "Broken",
                        "ReservedForPnr",
                        "SoftBlocked",
                        "Unavailable"
                    ],
                    "type": "string"
                },
                "compartmentDesignator": {
                    "description": "Defines compartment designator of the compartment to which unit belongs to.",
                    "type": "string",
                    "example": ""
                },
                "designator": {
                    "description": "Defines unique designator for the unit within the compartment.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of the unit.",
                    "enum": [
                        "None",
                        "NormalSeat",
                        "LargeSeat",
                        "Couchette",
                        "Compartment",
                        "Table",
                        "Wall",
                        "Window",
                        "Door",
                        "Stairs",
                        "Wing",
                        "Other",
                        "Bulkhead",
                        "BedOneOfThree",
                        "BedTwoOfThree",
                        "BedThreeOfThree",
                        "BedOneOfTwo",
                        "BedTwoOfTwo",
                        "Bed",
                        "Exit",
                        "LabelRuler",
                        "GenericUnitResizableArea",
                        "Lavatory",
                        "LavatoryWithHandicappedFacilities",
                        "Luggage",
                        "MovableCompartmentDivider",
                        "Bar",
                        "Closet",
                        "Galley",
                        "MovieScreen",
                        "Storage"
                    ],
                    "type": "string"
                },
                "travelClassCode": {
                    "description": "The designated travel class code.",
                    "type": "string",
                    "example": ""
                },
                "set": {
                    "format": "int32",
                    "description": "The designator of the group the unit belongs to.",
                    "type": "integer"
                },
                "group": {
                    "format": "int32",
                    "description": "Indicates the logical group where this unit belongs. Also indicating the pricing value of this unit via seat fees.",
                    "type": "integer"
                },
                "priority": {
                    "format": "int32",
                    "description": "Indicates the priority level of this unit, if this unit is among the best seats computed by the seat assignment\r\nalgorithm.",
                    "type": "integer"
                },
                "text": {
                    "description": "The text associated to a unit.",
                    "type": "string",
                    "example": ""
                },
                "setVacancy": {
                    "format": "int32",
                    "description": "The number of available units in the group.",
                    "type": "integer"
                },
                "angle": {
                    "format": "int32",
                    "description": "This angle of the unit in the grid.",
                    "type": "integer"
                },
                "width": {
                    "format": "int32",
                    "description": "The grid width of the unit.",
                    "type": "integer"
                },
                "height": {
                    "format": "int32",
                    "description": "The grid height of the unit.",
                    "type": "integer"
                },
                "zone": {
                    "format": "int32",
                    "description": "Indicates the location of this unit, thereby controlling bookings and reservations on this unit based on customer\r\nrecognition levels and user role settings.",
                    "type": "integer"
                },
                "x": {
                    "format": "int32",
                    "description": "The horizontal position of the unit in the grid.",
                    "type": "integer"
                },
                "y": {
                    "format": "int32",
                    "description": "This vertical position of the unit in the grid.",
                    "type": "integer"
                },
                "allowedSsrs": {
                    "description": "The collection of allowed SSR's.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "properties": {
                    "description": "The collection of properties for the specific unit.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SeatMapProperty"
                    }
                }
            }
        },
        "SeatMapProperty": {
            "description": "Defines a property of a equipment unit.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The dynamic equipment property code.",
                    "type": "string",
                    "example": ""
                },
                "value": {
                    "description": "The dynamic equipment property value.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BookingSearchResult": {
            "description": "Booking model data.",
            "type": "object",
            "properties": {
                "bookingKey": {
                    "description": "The booking key.",
                    "type": "string",
                    "example": ""
                },
                "allowedToModifyGdsBooking": {
                    "description": "Indicates whether it is allowed to modify GDS booking.",
                    "type": "boolean",
                    "example": false
                },
                "bookingStatus": {
                    "description": "The booking status.",
                    "enum": [
                        "Default",
                        "Hold",
                        "Confirmed",
                        "Closed",
                        "HoldCanceled",
                        "PendingArchive",
                        "Archived"
                    ],
                    "type": "string"
                },
                "channelType": {
                    "description": "The type of the channel.",
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                },
                "editable": {
                    "description": "Indicates whether this is editable.",
                    "type": "boolean",
                    "example": false
                },
                "expiredDate": {
                    "format": "date-time",
                    "description": "The expired date.",
                    "type": "string"
                },
                "flightDate": {
                    "format": "date-time",
                    "description": "Flight date.",
                    "type": "string"
                },
                "flightNumber": {
                    "description": "The flight number.",
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "Origin.",
                    "type": "string",
                    "example": ""
                },
                "passengerId": {
                    "format": "int64",
                    "description": "The passenger id.",
                    "type": "integer"
                },
                "recordLocator": {
                    "description": "The record locator.",
                    "type": "string",
                    "example": ""
                },
                "sourceAgentCode": {
                    "description": "The source agent code.",
                    "type": "string",
                    "example": ""
                },
                "sourceDomainCode": {
                    "description": "The source domain code.",
                    "type": "string",
                    "example": ""
                },
                "sourceOrganizationCode": {
                    "description": "The source organization code.",
                    "type": "string",
                    "example": ""
                },
                "systemCode": {
                    "description": "The system code.",
                    "type": "string",
                    "example": ""
                },
                "destination": {
                    "description": "Destination.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name on the booking."
                }
            }
        },
        "Transaction": {
            "description": "The transaction model.",
            "required": [
                "amount",
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "recordLocator": {
                    "description": "The record locator from the refunded booking payment.",
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "transactionKey": {
                    "description": "The unique transaction key.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The credit account transaction amount.",
                    "type": "number"
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The created date associated with the transaction.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The credit account transaction currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "foreignAmount": {
                    "format": "double",
                    "description": "The transaction foreign amount.",
                    "type": "number"
                },
                "note": {
                    "description": "The credit account transaction note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "foreignCurrencyCode": {
                    "description": "The transaction foreign currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The transaction type.",
                    "enum": [
                        "Default",
                        "Payment",
                        "Adjustment",
                        "Supplementary",
                        "Transfer",
                        "Spoilage",
                        "StatementDateAndBalance",
                        "PayableCommission",
                        "Commission",
                        "ChildCommissionTransfer",
                        "ParentCommissionTransfer"
                    ],
                    "type": "string"
                },
                "paymentId": {
                    "format": "int64",
                    "description": "The payment ID of the transaction. This will only be non zero on refunded booking payments. A zero signifies that\r\nno payment ID is found.",
                    "type": "integer"
                },
                "accountCollectionKey": {
                    "description": "The account collection key associated with the transaction.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TransactionRequest": {
            "description": "The create transaction request.",
            "required": [
                "amount",
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "description": "The credit account transaction amount.",
                    "type": "number"
                },
                "currencyCode": {
                    "description": "The credit account transaction currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The credit account transaction note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BundleApplicationDetails": {
            "description": "The bundle application details model.",
            "type": "object",
            "properties": {
                "carrierCodes": {
                    "description": "The list of appplicable carrier codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "productClasses": {
                    "description": "The list of appplicable product classes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "classesOfService": {
                    "description": "The list of appplicable classes of service.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "BundleApplication": {
            "description": "The bundle application model.",
            "type": "object",
            "properties": {
                "bundleApplicationKey": {
                    "description": "The bundle application key.",
                    "type": "string",
                    "example": ""
                },
                "bundleSetCode": {
                    "description": "The code of the bundle set to which the \r\nbundle application applies.",
                    "type": "string",
                    "example": ""
                },
                "regionFilter": {
                    "$ref": "#/definitions/RegionFilter",
                    "description": "The details related to the region filter for the bundle application."
                },
                "passengerCounts": {
                    "$ref": "#/definitions/DataRange",
                    "description": "The minimum and maximum passenger counts."
                },
                "travelMinutes": {
                    "$ref": "#/definitions/DataRange",
                    "description": "The minimum and maximum travel minutes."
                },
                "advancedPurchaseHours": {
                    "$ref": "#/definitions/DataRange",
                    "description": "The minimum and maximum advanced purchase hours."
                },
                "dates": {
                    "$ref": "#/definitions/BundleDates",
                    "description": "The important dates associated with a bundle application."
                },
                "appliesToAllSegments": {
                    "description": "Indicates if the service bundle applies to all segments or not.",
                    "type": "boolean",
                    "example": false
                },
                "codeShareType": {
                    "description": "The code share type.",
                    "type": "string"
                },
                "sequenceNumber": {
                    "format": "int32",
                    "description": "The sequence number.",
                    "type": "integer"
                }
            }
        },
        "RegionFilter": {
            "description": "The region filter model.",
            "type": "object",
            "properties": {
                "origin": {
                    "$ref": "#/definitions/RegionIdentifier",
                    "description": "The details related to the region of origin for the bundle application."
                },
                "destination": {
                    "$ref": "#/definitions/RegionIdentifier",
                    "description": "The details related to the destination region for the bundle application."
                }
            }
        },
        "DataRange": {
            "description": "The data range model.",
            "type": "object",
            "properties": {
                "minimum": {
                    "format": "int32",
                    "description": "The minimum range.",
                    "type": "integer"
                },
                "maximum": {
                    "format": "int32",
                    "description": "The maximum range.",
                    "type": "integer"
                }
            }
        },
        "BundleDates": {
            "description": "The bundle dates model.",
            "type": "object",
            "properties": {
                "effective": {
                    "format": "date-time",
                    "description": "The start date when the bundle application is effective.",
                    "type": "string"
                },
                "effectiveSales": {
                    "format": "date-time",
                    "description": "The effective sales date.",
                    "type": "string"
                },
                "discontinue": {
                    "format": "date-time",
                    "description": "The date when the bundle application is discontinued.",
                    "type": "string"
                },
                "discontinueSales": {
                    "format": "date-time",
                    "description": "The discontinued sales date.",
                    "type": "string"
                }
            }
        },
        "RegionIdentifier": {
            "description": "The region identifier model.",
            "type": "object",
            "properties": {
                "regionTypeCode": {
                    "description": "The region type code.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "regionType": {
                    "description": "The region type.",
                    "enum": [
                        "Default",
                        "Station",
                        "City",
                        "ProvinceState",
                        "Country",
                        "FeeZone",
                        "SubZone",
                        "Area",
                        "All",
                        "Mac"
                    ],
                    "type": "string"
                },
                "exclude": {
                    "description": "The flag to indicate if this is not in the travel region.",
                    "type": "boolean"
                }
            }
        },
        "BundleAvailabilityRequest": {
            "description": "Represents a bundle availability request.",
            "type": "object",
            "properties": {
                "bundleCode": {
                    "description": "The optional bundle code to look for.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "journeyKey": {
                    "description": "The optional journey key to get bundle availability for.",
                    "type": "string",
                    "example": ""
                },
                "residentCountry": {
                    "description": "The country of residence for the passengers.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceOrganization": {
                    "description": "The organization to use when evaluating availability of private fares (ATPCO faring\r\ncategory 15).",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerKeys": {
                    "description": "The passenger keys for the bundle availability requests.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "filterBundles": {
                    "description": "A flag to indicate if the results should be filtered such that only\r\nbundles with ssr availability will be returned.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BundleAvailability": {
            "description": "Model containing the bundle ssr availability information.",
            "type": "object",
            "properties": {
                "hasPrice": {
                    "description": "Indicates if the bundle has a cost associated with it.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "pricesByJourney": {
                    "description": "The available in-state booking bundle prices per journey.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/BundlePricesByJourney"
                        }
                    }
                },
                "bundleCode": {
                    "description": "The bundle code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BundlePricesByJourney": {
            "description": "The bundle prices by journey model.",
            "type": "object",
            "properties": {
                "journeyKey": {
                    "description": "The journey key associated with the bundle prices.",
                    "type": "string",
                    "example": ""
                },
                "prices": {
                    "description": "The bundle price availabilities.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundlePriceAvailability"
                    }
                }
            }
        },
        "BundlePriceAvailability": {
            "description": "The bundle price availability model.",
            "type": "object",
            "properties": {
                "includedSsrs": {
                    "description": "The included ssr availability.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IncludedSsrAvailability"
                    }
                },
                "totalPrice": {
                    "format": "double",
                    "description": "The total price for the service bundle, minus taxes.",
                    "type": "number"
                },
                "upgradableSsrs": {
                    "description": "The upgradable bundle ssr availability.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UpgradableSsrAvailability"
                    }
                },
                "taxTotal": {
                    "format": "double",
                    "description": "The total sales taxes that are applicable to the\r\nservice bundle.",
                    "type": "number"
                },
                "additionalSsrs": {
                    "description": "The additional bundle ssr availability.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AdditionalSsrAvailability"
                    }
                },
                "passengerType": {
                    "description": "The passenger type that is applicable to the service\r\nbundle.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "program": {
                    "$ref": "#/definitions/BundleProgramDetails",
                    "description": "The program details that are applicable to the service\r\nbundle."
                }
            }
        },
        "IncludedSsrAvailability": {
            "description": "The included ssr availability model.",
            "type": "object",
            "properties": {
                "ssrCode": {
                    "description": "The ssr code for the in-bundle ssr availability.",
                    "type": "string",
                    "example": ""
                },
                "bundleSsrPrice": {
                    "format": "double",
                    "description": "The total price of the applied fee.",
                    "type": "number"
                },
                "legSsrs": {
                    "description": "The available bundle leg ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundleLegSsr"
                    }
                },
                "taxTotal": {
                    "format": "double",
                    "description": "The applied sales tax.",
                    "type": "number"
                },
                "segmentSsrs": {
                    "description": "The available bundle segment ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundleSegmentSsr"
                    }
                },
                "journeySsr": {
                    "$ref": "#/definitions/BundleJourneySsr",
                    "description": "The available bundle journey ssr."
                }
            }
        },
        "UpgradableSsrAvailability": {
            "description": "The upgradable bundle ssr availability model.",
            "type": "object",
            "properties": {
                "legSsrs": {
                    "description": "The available bundle leg ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundleLegSsr"
                    }
                },
                "upgradeFromSsrCode": {
                    "description": "The ssr code that was upgraded.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrCode": {
                    "description": "The ssr code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "segmentSsrs": {
                    "description": "The available bundle segment ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundleSegmentSsr"
                    }
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "journeySsr": {
                    "$ref": "#/definitions/BundleJourneySsr",
                    "description": "The available bundle journey ssr."
                },
                "discountPercent": {
                    "format": "double",
                    "description": "The discount percent.",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                },
                "ssrNumber": {
                    "format": "int32",
                    "description": "The SSR number.",
                    "type": "integer"
                },
                "isFeeWaived": {
                    "description": "Indicates if the service fee is waived.",
                    "type": "boolean",
                    "example": false
                },
                "amounts": {
                    "description": "The service bundle SSR discount amounts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundleDiscountAmount"
                    }
                }
            }
        },
        "AdditionalSsrAvailability": {
            "description": "The additional ssr availability model.",
            "type": "object",
            "properties": {
                "legSsrs": {
                    "description": "The available bundle leg ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundleLegSsr"
                    }
                },
                "ssrCode": {
                    "description": "The ssr code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "segmentSsrs": {
                    "description": "The available bundle segment ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundleSegmentSsr"
                    }
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "journeySsr": {
                    "$ref": "#/definitions/BundleJourneySsr",
                    "description": "The available bundle journey ssr."
                },
                "discountPercent": {
                    "format": "double",
                    "description": "The discount percent.",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                },
                "ssrNumber": {
                    "format": "int32",
                    "description": "The SSR number.",
                    "type": "integer"
                },
                "isFeeWaived": {
                    "description": "Indicates if the service fee is waived.",
                    "type": "boolean",
                    "example": false
                },
                "amounts": {
                    "description": "The service bundle SSR discount amounts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundleDiscountAmount"
                    }
                }
            }
        },
        "BundleProgramDetails": {
            "description": "Represents the bundle program details model.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "level": {
                    "description": "The program level.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BundleLegSsr": {
            "description": "Model information for a bundle sell service request (SSR) tied to a specific leg.",
            "type": "object",
            "properties": {
                "legKey": {
                    "description": "The unique identifier for the leg.",
                    "type": "string",
                    "example": ""
                },
                "ssrCode": {
                    "description": "Gets the SSR code.",
                    "type": "string",
                    "example": ""
                },
                "legDetails": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "The leg's market information."
                },
                "passengersAvailability": {
                    "description": "Get the passenger keys this is available for",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/PassengerSsrAvailability"
                        }
                    }
                },
                "ssrType": {
                    "description": "Gets the SSR type.",
                    "enum": [
                        "Standard",
                        "Infant",
                        "Meal",
                        "BaggageAllowance",
                        "TravelLineMeal"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Gets the SSR name.",
                    "type": "string",
                    "example": ""
                },
                "limitPerPassenger": {
                    "format": "int32",
                    "description": "Gets the limit per passenger.",
                    "type": "integer"
                },
                "available": {
                    "format": "int32",
                    "description": "Gets the amount available.",
                    "type": "integer"
                },
                "inventoryControlled": {
                    "description": "Gets the SSR availability types of inventory controlled.",
                    "type": "boolean",
                    "example": false
                },
                "seatDependent": {
                    "description": "Gets the SSR availability type of seat dependent.",
                    "type": "boolean",
                    "example": false
                },
                "feeCode": {
                    "description": "Gets the fee code.",
                    "type": "string",
                    "example": ""
                },
                "nest": {
                    "description": "Gets the SSR nest.",
                    "type": "string",
                    "example": ""
                },
                "seatRestriction": {
                    "description": "Gets the seat restriction.",
                    "enum": [
                        "Undefined",
                        "AlwaysAllowed",
                        "DefaultAllowed",
                        "DefaultRestricted"
                    ],
                    "type": "string"
                }
            }
        },
        "BundleSegmentSsr": {
            "description": "Model information for a bundle sell service request (SSR) tied to a specific segment.",
            "type": "object",
            "properties": {
                "segmentKey": {
                    "description": "The unique identifier for the segment.",
                    "type": "string",
                    "example": ""
                },
                "ssrCode": {
                    "description": "Gets the SSR code.",
                    "type": "string",
                    "example": ""
                },
                "segmentDetails": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "The segment market information."
                },
                "passengersAvailability": {
                    "description": "Get the passenger keys this is available for",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/PassengerSsrAvailability"
                        }
                    }
                },
                "ssrType": {
                    "description": "Gets the SSR type.",
                    "enum": [
                        "Standard",
                        "Infant",
                        "Meal",
                        "BaggageAllowance",
                        "TravelLineMeal"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Gets the SSR name.",
                    "type": "string",
                    "example": ""
                },
                "limitPerPassenger": {
                    "format": "int32",
                    "description": "Gets the limit per passenger.",
                    "type": "integer"
                },
                "available": {
                    "format": "int32",
                    "description": "Gets the amount available.",
                    "type": "integer"
                },
                "inventoryControlled": {
                    "description": "Gets the SSR availability types of inventory controlled.",
                    "type": "boolean",
                    "example": false
                },
                "seatDependent": {
                    "description": "Gets the SSR availability type of seat dependent.",
                    "type": "boolean",
                    "example": false
                },
                "feeCode": {
                    "description": "Gets the fee code.",
                    "type": "string",
                    "example": ""
                },
                "nest": {
                    "description": "Gets the SSR nest.",
                    "type": "string",
                    "example": ""
                },
                "seatRestriction": {
                    "description": "Gets the seat restriction.",
                    "enum": [
                        "Undefined",
                        "AlwaysAllowed",
                        "DefaultAllowed",
                        "DefaultRestricted"
                    ],
                    "type": "string"
                }
            }
        },
        "BundleJourneySsr": {
            "description": "Model information for a bundle sell service request (SSR) tied to a specific journey.",
            "type": "object",
            "properties": {
                "journeyKey": {
                    "description": "The unique identifier for the journey.",
                    "type": "string",
                    "example": ""
                },
                "ssrCode": {
                    "description": "Gets the SSR code.",
                    "type": "string",
                    "example": ""
                },
                "journeyDetails": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "The journey's market information."
                },
                "passengersAvailability": {
                    "description": "Get the passenger keys this is available for",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/PassengerSsrAvailability"
                        }
                    }
                },
                "ssrType": {
                    "description": "Gets the SSR type.",
                    "enum": [
                        "Standard",
                        "Infant",
                        "Meal",
                        "BaggageAllowance",
                        "TravelLineMeal"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Gets the SSR name.",
                    "type": "string",
                    "example": ""
                },
                "limitPerPassenger": {
                    "format": "int32",
                    "description": "Gets the limit per passenger.",
                    "type": "integer"
                },
                "available": {
                    "format": "int32",
                    "description": "Gets the amount available.",
                    "type": "integer"
                },
                "inventoryControlled": {
                    "description": "Gets the SSR availability types of inventory controlled.",
                    "type": "boolean",
                    "example": false
                },
                "seatDependent": {
                    "description": "Gets the SSR availability type of seat dependent.",
                    "type": "boolean",
                    "example": false
                },
                "feeCode": {
                    "description": "Gets the fee code.",
                    "type": "string",
                    "example": ""
                },
                "nest": {
                    "description": "Gets the SSR nest.",
                    "type": "string",
                    "example": ""
                },
                "seatRestriction": {
                    "description": "Gets the seat restriction.",
                    "enum": [
                        "Undefined",
                        "AlwaysAllowed",
                        "DefaultAllowed",
                        "DefaultRestricted"
                    ],
                    "type": "string"
                }
            }
        },
        "BundleDiscountAmount": {
            "description": "The discount amount details for an SSR bundle.",
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The discount amount.",
                    "type": "number"
                },
                "ssrNumber": {
                    "format": "int32",
                    "description": "The SSR number.",
                    "type": "integer"
                }
            }
        },
        "PassengerSsrAvailability": {
            "description": "Model containing the details about the availability and price of the Ssr for a specific passenger.",
            "type": "object",
            "properties": {
                "ssrKey": {
                    "description": "The Ssr key that identifies the ssr, passenger and trip information.",
                    "type": "string",
                    "example": ""
                },
                "passengerKey": {
                    "description": "The passenger key.",
                    "type": "string",
                    "example": ""
                },
                "price": {
                    "format": "double",
                    "description": "Gets the SSR price.",
                    "type": "number"
                }
            }
        },
        "BundleConfiguration": {
            "description": "The bundle configuration model.",
            "type": "object",
            "properties": {
                "bundleCode": {
                    "description": "The service bundle code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "feeCode": {
                    "description": "The SSR fee code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "bookingQueueCode": {
                    "description": "The booking queue code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "programCode": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "programLevel": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The bundle name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The bundle description.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "hasPrice": {
                    "description": "Indicates if the bundle type has a cost associated with it.",
                    "type": "boolean",
                    "example": false
                },
                "rank": {
                    "format": "int32",
                    "description": "The bundle rank.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "inActive": {
                    "description": "Indicates if the bundle is active.",
                    "type": "boolean",
                    "example": false
                },
                "allSsrsRequired": {
                    "description": "Indicates if all SSR's are required.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BundleSsrConfiguration": {
            "description": "The bundle ssr configuration model.",
            "type": "object",
            "properties": {
                "bundleCode": {
                    "description": "The service bundle code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrCode": {
                    "description": "The ssr code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "upgradeFromSsrCode": {
                    "description": "The ssr code that was upgraded.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "bundleSsrType": {
                    "description": "The bundle ssr type.",
                    "enum": [
                        "InBundle",
                        "InBundleUpgrade",
                        "NotInBundle"
                    ],
                    "type": "string"
                },
                "discountPercent": {
                    "format": "double",
                    "description": "The discount percent.",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                },
                "ssrNumber": {
                    "format": "int32",
                    "description": "The SSR number.",
                    "type": "integer"
                },
                "isFeeWaived": {
                    "description": "Indicates if the service fee is waived.",
                    "type": "boolean",
                    "example": false
                },
                "amounts": {
                    "description": "The service bundle SSR discount amounts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BundleDiscountAmount"
                    }
                }
            }
        },
        "BundleRule": {
            "description": "The bundle rule model.",
            "type": "object",
            "properties": {
                "bundleRuleCode": {
                    "description": "The bundle rule code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The bundle rule name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BundleSellRequest": {
            "description": "The bundle sell request.",
            "required": [
                "bundleCode"
            ],
            "type": "object",
            "properties": {
                "bundleCode": {
                    "description": "The bundle code to sell.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerKeys": {
                    "description": "A list of passengers to sell the bundle for.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "upgradeRequest": {
                    "$ref": "#/definitions/SsrByKeysRequestv2",
                    "description": "The optional ssr upgrade request.  If left blank,\r\nthe default bundle ssr(s) will be sold (if available)."
                }
            }
        },
        "SsrByKeysRequestv2": {
            "description": "Request to add a leg, segment, or journey Ssr.",
            "required": [
                "keys"
            ],
            "type": "object",
            "properties": {
                "keys": {
                    "description": "Keys for the request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrByKeyRequest"
                    }
                },
                "forceWaveOnSell": {
                    "description": "Force wave on sell. Default value is false.",
                    "type": "boolean"
                },
                "currencyCode": {
                    "description": "Set the Currency Code if different than the booking currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SsrByKeyRequest": {
            "description": "SSR detail for a specific passenger number.",
            "required": [
                "ssrKey"
            ],
            "type": "object",
            "properties": {
                "ssrKey": {
                    "description": "The Ssr key.",
                    "type": "string",
                    "example": ""
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items to include. Defaults to 1.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "note": {
                    "description": "Notes associated with this Ssr.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BundleSetDetails": {
            "description": "The bundle set details model.",
            "type": "object",
            "properties": {
                "bundleCodes": {
                    "description": "The list of bundle codes associated with the bundle set.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "BundleSet": {
            "description": "The bundle set model.",
            "type": "object",
            "properties": {
                "bundleSetCode": {
                    "description": "The service bundle code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The bundle set name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Indicates if the set is inactive or not.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ProductRequest": {
            "description": "Defines the query for a destionation request used in car and insurance types.",
            "required": [
                "origin",
                "beginDate",
                "endDate"
            ],
            "type": "object",
            "properties": {
                "origin": {
                    "description": "The origin station code for the city.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "vendorCode": {
                    "description": "The specific vendor code.",
                    "type": "string",
                    "example": ""
                },
                "companyCode": {
                    "description": "The company code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "destination": {
                    "description": "The destination station code if different than the origin.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The specific culture code.",
                    "type": "string",
                    "example": ""
                },
                "discountCode": {
                    "description": "The discount code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The begin date.",
                    "type": "string"
                },
                "sort": {
                    "description": "The search sort order.",
                    "enum": [
                        "SupplierDefined",
                        "Price",
                        "Rating",
                        "Name",
                        "Category",
                        "VendorDescription",
                        "Preferred",
                        "Relevance"
                    ],
                    "type": "string"
                },
                "promotionCode": {
                    "description": "The promotion code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The end date.",
                    "type": "string"
                },
                "countryCode": {
                    "description": "The country code with which to search (source or market of the customer).",
                    "type": "string",
                    "example": ""
                },
                "participants": {
                    "description": "The collection of participants with which to search.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParticipantCriteria"
                    }
                },
                "catalogCode": {
                    "description": "The catalog code to with which to search.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "categoryCode": {
                    "description": "The category code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "departmentCode": {
                    "description": "The department code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "ratingCode": {
                    "description": "The rating code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "keyword": {
                    "description": "The keywork with which to search.",
                    "type": "string",
                    "example": ""
                },
                "maxPrice": {
                    "format": "double",
                    "description": "The maximum price with which to search.",
                    "type": "number"
                },
                "minPrice": {
                    "format": "double",
                    "description": "The minimum price with which to search.",
                    "type": "number"
                },
                "quantity": {
                    "format": "int32",
                    "description": "The quantity with which to search.",
                    "type": "integer"
                },
                "parameters": {
                    "description": "The collection of additional search input parameters.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                }
            }
        },
        "CarProduct": {
            "description": "Defines a car product result.",
            "type": "object",
            "properties": {
                "productKey": {
                    "description": "The unique product result key.",
                    "type": "string",
                    "example": ""
                },
                "isPreferred": {
                    "description": "Flag indicating this item is preferred.",
                    "type": "boolean",
                    "example": false
                },
                "isNew": {
                    "description": "Flag indicating this item is new.",
                    "type": "boolean",
                    "example": false
                },
                "externalLocator": {
                    "description": "The external system locator code.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code for everything.",
                    "type": "string",
                    "example": ""
                },
                "vendorCode": {
                    "description": "The specific vendor code.",
                    "type": "string",
                    "example": ""
                },
                "descriptions": {
                    "$ref": "#/definitions/Descriptions",
                    "description": "The various descriptions."
                },
                "thumbnailFileName": {
                    "description": "The provided thumbnail file name.",
                    "type": "string",
                    "example": ""
                },
                "amounts": {
                    "$ref": "#/definitions/ProductPriceBreakdown",
                    "description": "The search result amounts."
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The address of the result."
                },
                "phoneNumbers": {
                    "description": "The collection of phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                },
                "images": {
                    "description": "The collection of display images.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Image"
                    }
                },
                "origin": {
                    "description": "The origin station code for the city.",
                    "type": "string",
                    "example": ""
                },
                "destination": {
                    "description": "The destination station code if different than the origin.",
                    "type": "string",
                    "example": ""
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The begin date.",
                    "type": "string"
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The end date.",
                    "type": "string"
                },
                "participants": {
                    "description": "The collection of participating participants.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParticipantBase"
                    }
                },
                "productVariations": {
                    "description": "The collection of product variations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductVariation"
                    }
                },
                "criteria": {
                    "$ref": "#/definitions/AddOnCriteria",
                    "description": "The search criteria of the product."
                }
            }
        },
        "QuoteCarRequest": {
            "description": "Defines a product quote item request used for a singular catalog item.",
            "required": [
                "catalogKey",
                "productKey"
            ],
            "type": "object",
            "properties": {
                "catalogKey": {
                    "description": "The selected unique product variations catalog key.",
                    "type": "string",
                    "example": ""
                },
                "productKey": {
                    "description": "The selected unique product key.",
                    "type": "string",
                    "example": ""
                },
                "personalizations": {
                    "description": "The collection of desired personalizations to be quoted with the product.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SelectedPersonalization"
                    }
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SellCarRequest": {
            "description": "Defines a product quote item request used for a singular catalog item.",
            "required": [
                "catalogKey",
                "productKey"
            ],
            "type": "object",
            "properties": {
                "parameters": {
                    "description": "The collection of dynamic order parameters to include.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "catalogKey": {
                    "description": "The selected unique product variations catalog key.",
                    "type": "string",
                    "example": ""
                },
                "productKey": {
                    "description": "The selected unique product key.",
                    "type": "string",
                    "example": ""
                },
                "personalizations": {
                    "description": "The collection of desired personalizations to be quoted with the product.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SelectedPersonalization"
                    }
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Carrier": {
            "description": "The carrier model.",
            "required": [
                "carrierCode",
                "carrierInfo",
                "carrierName",
                "carrierShortName",
                "phone",
                "url"
            ],
            "type": "object",
            "properties": {
                "carrierCode": {
                    "description": "The carrier code for this carrier.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "carrierInfo": {
                    "description": "The carrier info for this carrier.",
                    "maxLength": 60,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "carrierName": {
                    "description": "The carrier name for this carrier.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "carrierShortName": {
                    "description": "The carrier short name for this carrier.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "carrierType": {
                    "description": "The carrier type for this carrier.",
                    "type": "string"
                },
                "eTicketIndicator": {
                    "description": "The e ticket indicator for this carrier.",
                    "type": "boolean",
                    "example": false
                },
                "inventoryIndicator": {
                    "description": "The inventory indicator for this carrier",
                    "type": "boolean",
                    "example": false
                },
                "phone": {
                    "description": "The phone number for this carrier.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "url": {
                    "description": "The Url for this carrier.",
                    "maxLength": 2048,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "baggageIndicator": {
                    "description": "The baggage indicator for this carrier.",
                    "type": "string"
                }
            }
        },
        "City": {
            "description": "The city model.",
            "type": "object",
            "properties": {
                "cityCode": {
                    "description": "Gets or sets the code for this city.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "Gets or sets the country code for this city",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Gets or sets the inactive flag for this city.",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "Gets or sets the name for this city",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceStateCode": {
                    "description": "Gets or sets the province/state code for this city.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "shortName": {
                    "description": "Gets or sets the short name for this city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ClassOfService": {
            "description": "The class of service model.",
            "type": "object",
            "properties": {
                "classOfServiceCode": {
                    "description": "The class of service code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The Name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "shortName": {
                    "description": "The short name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "nonRevenue": {
                    "description": "The non revenue.",
                    "type": "boolean",
                    "example": false
                },
                "traceQueueCode": {
                    "description": "The trace queue code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "gdsBookingOnly": {
                    "description": "The GDS booking only.",
                    "type": "boolean",
                    "example": false
                },
                "upgrade": {
                    "description": "The order.",
                    "type": "boolean",
                    "example": false
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                },
                "allowed": {
                    "description": "<b>Deprecated</b> - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.",
                    "type": "boolean",
                    "example": false
                },
                "standByAllowed": {
                    "description": "The stand by allowed.",
                    "type": "boolean",
                    "example": false
                },
                "seatGroup": {
                    "format": "int32",
                    "description": "The seat group.",
                    "type": "integer"
                }
            }
        },
        "CommissionRate": {
            "description": "The commission rate model.",
            "required": [
                "commissionRateCode"
            ],
            "type": "object",
            "properties": {
                "commissionRateCode": {
                    "description": "The commission rate code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ContactRequest": {
            "description": "Defines a contact create request.",
            "type": "object",
            "properties": {
                "phoneNumbers": {
                    "description": "The collection of phone numbers.\r\nSupported types: Home, Work, Fax, Other.\r\nThis collections can only contain one number for each supported type.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "maxLength": 17,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The contact address."
                },
                "emailAddress": {
                    "description": "The email address of the contact.",
                    "type": "string",
                    "example": ""
                },
                "customerNumber": {
                    "description": "The customer number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceOrganization": {
                    "description": "Source organization.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "distributionOption": {
                    "description": "The contact distribution option.",
                    "enum": [
                        "None",
                        "Mail",
                        "Email",
                        "Fax",
                        "MailFax",
                        "Airport",
                        "Hold",
                        "Print"
                    ],
                    "type": "string"
                },
                "notificationPreference": {
                    "description": "The notification preference of the contact.",
                    "enum": [
                        "None",
                        "Promotional"
                    ],
                    "type": "string"
                },
                "companyName": {
                    "description": "The company name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The contact's name."
                }
            }
        },
        "DeltaMapper[ContactBase]": {
            "$ref": "#/definitions/ContactBase"
        },
        "ContactBase": {
            "description": "Contact model describing a primary contact information.",
            "type": "object",
            "properties": {
                "cultureCode": {
                    "description": "The culture code.",
                    "maxLength": 17,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The contact address."
                },
                "emailAddress": {
                    "description": "The email address of the contact.",
                    "type": "string",
                    "example": ""
                },
                "customerNumber": {
                    "description": "The customer number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceOrganization": {
                    "description": "Source organization.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "distributionOption": {
                    "description": "The contact distribution option.",
                    "enum": [
                        "None",
                        "Mail",
                        "Email",
                        "Fax",
                        "MailFax",
                        "Airport",
                        "Hold",
                        "Print"
                    ],
                    "type": "string"
                },
                "notificationPreference": {
                    "description": "The notification preference of the contact.",
                    "enum": [
                        "None",
                        "Promotional"
                    ],
                    "type": "string"
                },
                "companyName": {
                    "description": "The company name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The contact's name."
                }
            }
        },
        "PhoneNumberBase": {
            "description": "Defines a common phone number base.",
            "required": [
                "number"
            ],
            "type": "object",
            "properties": {
                "number": {
                    "description": "The phone number without any formatting characters.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ContactType": {
            "description": "The booking contact type.",
            "required": [
                "contactTypeCode"
            ],
            "type": "object",
            "properties": {
                "contactTypeCode": {
                    "description": "The type code.",
                    "type": "string"
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "The name of the type.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ResourceContentItem": {
            "description": "Model representing a resource content item.",
            "required": [
                "contentId"
            ],
            "type": "object",
            "properties": {
                "contentId": {
                    "format": "int64",
                    "description": "The content id.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the content",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "Description of the content.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "Culture code of the data.",
                    "type": "string",
                    "example": ""
                },
                "size": {
                    "format": "int64",
                    "description": "Size in bytes of the data.",
                    "type": "integer"
                },
                "type": {
                    "description": "Specific content type.",
                    "enum": [
                        "GeneralReference",
                        "News",
                        "ConsoleHelp",
                        "FareRuleReference",
                        "ReviewWithCustomer",
                        "Notices",
                        "Literature",
                        "Links",
                        "Image",
                        "PromotionReference",
                        "SubscriptionReference"
                    ],
                    "type": "string"
                },
                "dataType": {
                    "description": "Content data type.",
                    "enum": [
                        "Default",
                        "Text",
                        "RichTextFormat",
                        "ImageJpg",
                        "ImageGif",
                        "ImageBmp",
                        "ImagePng",
                        "WordDoc",
                        "Html",
                        "Pdf",
                        "Uri",
                        "WordDocx",
                        "Unmapped"
                    ],
                    "type": "string"
                },
                "data": {
                    "format": "byte",
                    "description": "Data bytes.",
                    "type": "string"
                }
            }
        },
        "ResourceContentResult": {
            "description": "Model representing a resource content item.",
            "required": [
                "contentId"
            ],
            "type": "object",
            "properties": {
                "contentId": {
                    "format": "int64",
                    "description": "The content id.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the content",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "Description of the content.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "Specific content type.",
                    "enum": [
                        "GeneralReference",
                        "News",
                        "ConsoleHelp",
                        "FareRuleReference",
                        "ReviewWithCustomer",
                        "Notices",
                        "Literature",
                        "Links",
                        "Image",
                        "PromotionReference",
                        "SubscriptionReference"
                    ],
                    "type": "string"
                }
            }
        },
        "Countryv2": {
            "description": "Represents the country model, version two.",
            "required": [
                "countryCode",
                "countryCode3C"
            ],
            "type": "object",
            "properties": {
                "countryCode": {
                    "description": "Represents the two-digit country code.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "countryCode3C": {
                    "description": "Represents the three-digit country code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "cities": {
                    "description": "Gets or sets the list of cities in this country.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/City"
                    }
                },
                "defaultCurrencyCode": {
                    "description": "Gets or sets the default currency code of this country.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "hasProvinceStates": {
                    "description": "Gets or sets whether this country has province states.",
                    "type": "boolean",
                    "example": false
                },
                "inActive": {
                    "description": "Gets or sets whether this country is active.",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "Gets or sets the name of this country.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceStates": {
                    "description": "Gets or sets the province states for this country.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProvinceState"
                    }
                }
            }
        },
        "ProvinceState": {
            "description": "The province/state code model.",
            "required": [
                "provinceStateCode",
                "countryCode"
            ],
            "type": "object",
            "properties": {
                "cities": {
                    "description": "Gets or sets the list of cities associated with this province/state",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/City"
                    }
                },
                "provinceStateCode": {
                    "description": "Gets or sets the code of the province/state.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "Gets or sets the Name of the province/state.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Gets or sets the inactive flag of the province/state.",
                    "type": "boolean",
                    "example": false
                },
                "countryCode": {
                    "description": "Gets or sets the country code of the province/state.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Culture": {
            "description": "Defines a culture code.",
            "required": [
                "cultureCode"
            ],
            "type": "object",
            "properties": {
                "cultureCode": {
                    "description": "The unique code for the culture.",
                    "maxLength": 17,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The display name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The flag indicating if the resource is inactive.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ResourceEntries[Currencyv2]": {
            "description": "Model representing the resource entries.",
            "type": "object",
            "properties": {
                "expiration": {
                    "format": "date-time",
                    "description": "The expiration.",
                    "type": "string"
                },
                "values": {
                    "description": "The value.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Currencyv2"
                    }
                },
                "eTag": {
                    "description": "The ETag.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Currencyv2": {
            "description": "The currency model.",
            "required": [
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The unique currency code of currency.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description of currency.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "roundFactor": {
                    "format": "double",
                    "description": "The round factor of currency.",
                    "type": "number"
                },
                "displayDigits": {
                    "format": "int32",
                    "description": "The display digits of currency.",
                    "type": "integer"
                },
                "displayPrefix": {
                    "description": "The digit prefix of currency.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "displaySuffix": {
                    "description": "The digit suffix of currency.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The flag indicating if the currency is inactive.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Currency": {
            "description": "The currency model.",
            "required": [
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The unique currency code of currency.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description of currency.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "roundFactor": {
                    "format": "double",
                    "description": "The round factor of currency.",
                    "type": "number"
                },
                "displayDigits": {
                    "description": "The display digits of currency.",
                    "enum": [
                        "ZeroDigits",
                        "TwoDigits",
                        "ThreeDigits"
                    ],
                    "type": "string"
                },
                "displayPrefix": {
                    "description": "The digit prefix of currency.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "displaySuffix": {
                    "description": "The digit suffix of currency.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The flag indicating if the currency is inactive.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "CurrencyConversion": {
            "description": "Model with the information needed to calculate from one currency to another.",
            "required": [
                "convertedAmount",
                "fromCurrencyCode",
                "exchangeRate",
                "toCurrencyCode",
                "amount"
            ],
            "type": "object",
            "properties": {
                "convertedAmount": {
                    "format": "double",
                    "description": "The converted amount. This will be in the ToCurrencyCode currency.",
                    "type": "number"
                },
                "fromCurrencyCode": {
                    "description": "The currency code that the amount is currently in.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "exchangeRate": {
                    "format": "double",
                    "description": "Gets or sets the exchange rate for this external rate.",
                    "type": "number"
                },
                "toCurrencyCode": {
                    "description": "The currency code we want the amount converted to.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount to be converted. This will be in the FromCurrencyCode currency.",
                    "type": "number"
                }
            }
        },
        "DeltaMapper[Passenger]": {
            "$ref": "#/definitions/Passenger"
        },
        "BookingResultResponse": {
            "type": "object",
            "properties": {
                "allowedToModifyGdsBooking": {
                    "type": "boolean",
                    "example": false
                },
                "bookingKey": {
                    "type": "string",
                    "example": ""
                },
                "bookingStatus": {
                    "enum": [
                        "Default",
                        "Hold",
                        "Confirmed",
                        "Closed",
                        "HoldCanceled",
                        "PendingArchive",
                        "Archived"
                    ],
                    "type": "string"
                },
                "channelType": {
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                },
                "destination": {
                    "type": "string",
                    "example": ""
                },
                "editable": {
                    "type": "boolean",
                    "example": false
                },
                "expiredDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "flightDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "flightNumber": {
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name"
                },
                "origin": {
                    "type": "string",
                    "example": ""
                },
                "passengerId": {
                    "format": "int64",
                    "type": "integer"
                },
                "recordLocator": {
                    "type": "string",
                    "example": ""
                },
                "sourceAgentCode": {
                    "type": "string",
                    "example": ""
                },
                "sourceDomainCode": {
                    "type": "string",
                    "example": ""
                },
                "sourceOrganizationCode": {
                    "type": "string",
                    "example": ""
                },
                "systemCode": {
                    "type": "string",
                    "example": ""
                },
                "bookingHasCheckInStatus": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PaymentMethodRequest": {
            "description": "Defines information needed for a generic voucher payment requested to be added to the booking in state.",
            "required": [
                "paymentMethodCode",
                "amount"
            ],
            "type": "object",
            "properties": {
                "paymentMethodCode": {
                    "description": "Payment method code.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount to apply.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "number"
                },
                "paymentFields": {
                    "description": "Dynamic field information used for validation related to the specific payment type.\r\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "currencyCode": {
                    "description": "The currency code. This will default to the bookings currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "installments": {
                    "format": "int32",
                    "description": "The requested number of installments. Defaults to 1.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "PaymentValidation": {
            "description": "Payment Validation.",
            "type": "object",
            "properties": {
                "payment": {
                    "$ref": "#/definitions/Payment",
                    "description": "Payment Key."
                },
                "threeDSecure": {
                    "$ref": "#/definitions/ThreeDSecureResponse",
                    "description": "Three D Secure."
                }
            }
        },
        "ThreeDSecureResponse": {
            "description": "Defines three D secure response.",
            "type": "object",
            "properties": {
                "redirectUrl": {
                    "description": "The url to visit for 3DS verification.",
                    "type": "string",
                    "example": ""
                },
                "paReq": {
                    "description": "The 3DS standard PaReq verification token.",
                    "type": "string",
                    "example": ""
                },
                "responseUrl": {
                    "description": "The response url for the bank to use after verification.",
                    "type": "string",
                    "example": ""
                },
                "md": {
                    "description": "The 3DS standard MD field used for the merchant session tracker.",
                    "type": "string",
                    "example": ""
                },
                "raw": {
                    "description": "The raw html used for a form post as sent by sky pay.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PaypalCreateRequest": {
            "type": "object",
            "properties": {
                "getGoNumber": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "GenericResponse": {
            "type": "object",
            "properties": {
                "didSucceed": {
                    "type": "boolean",
                    "example": false
                },
                "statusCode": {
                    "format": "int32",
                    "type": "integer"
                },
                "responseObject": {
                    "type": "object"
                },
                "errorObject": {
                    "type": "object"
                }
            }
        },
        "PaypalExecuteRequest": {
            "type": "object",
            "properties": {
                "payerId": {
                    "type": "string",
                    "example": ""
                },
                "paymentId": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "GetGoRequest": {
            "type": "object",
            "properties": {
                "cardNumber": {
                    "type": "string",
                    "example": ""
                },
                "useHouseholdPoints": {
                    "type": "string",
                    "example": ""
                },
                "cabinClass": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "GetGoResponse": {
            "type": "object",
            "properties": {
                "didSucceed": {
                    "type": "boolean",
                    "example": false
                },
                "statusCode": {
                    "format": "int32",
                    "type": "integer"
                },
                "message": {
                    "type": "string",
                    "example": ""
                },
                "responseObject": {
                    "type": "object"
                },
                "errorObject": {
                    "type": "object"
                }
            }
        },
        "AddBookingRequest": {
            "required": [
                "recordLocator",
                "customerNumber"
            ],
            "type": "object",
            "properties": {
                "recordLocator": {
                    "type": "string",
                    "example": ""
                },
                "emailAddress": {
                    "type": "string",
                    "example": ""
                },
                "firstName": {
                    "type": "string",
                    "example": ""
                },
                "lastName": {
                    "type": "string",
                    "example": ""
                },
                "customerNumber": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AddBookingResponse": {
            "type": "object",
            "properties": {
                "statusCode": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ManualDeclineRequest": {
            "type": "object",
            "properties": {
                "paymentCode": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "IActionResult": {
            "type": "object",
            "properties": {}
        },
        "CustomerProgram": {
            "description": "The customer program such as loyalty programs.",
            "type": "object",
            "properties": {
                "programCode": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "programType": {
                    "description": "The program type.",
                    "enum": [
                        "Default",
                        "Internal",
                        "External"
                    ],
                    "type": "string"
                },
                "validationType": {
                    "description": "The validation type.",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Is in-active.",
                    "type": "boolean",
                    "example": false
                },
                "qualifyingSegments": {
                    "format": "int32",
                    "description": "The qualifying segments.",
                    "type": "integer"
                },
                "qualifyingPoints": {
                    "format": "int32",
                    "description": "The qualifying points.",
                    "type": "integer"
                },
                "pointBalance": {
                    "format": "int32",
                    "description": "The point balance.",
                    "type": "integer"
                },
                "customerProgramLevels": {
                    "description": "The customer program levels.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomerProgramLevel"
                    }
                }
            }
        },
        "CustomerProgramLevel": {
            "description": "The customer program level.",
            "type": "object",
            "properties": {
                "programCode": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "programLevelCode": {
                    "description": "The program level.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "shortName": {
                    "description": "The short name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "displayCode": {
                    "description": "The display code.",
                    "maxLength": 1,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "rank": {
                    "format": "int32",
                    "description": "The rank.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "inActive": {
                    "description": "The in active flag.",
                    "type": "boolean",
                    "example": false
                },
                "customerProgramSettings": {
                    "description": "The list of customer program settings.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomerProgramSetting"
                    }
                }
            }
        },
        "CustomerProgramSetting": {
            "description": "The customer program setting.",
            "type": "object",
            "properties": {
                "programCode": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "programLevel": {
                    "description": "The program level.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "settingCode": {
                    "description": "The setting code.",
                    "maxLength": 16,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sequenceNumber": {
                    "format": "int32",
                    "description": "The sequence number.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "settingValue": {
                    "description": "The setting value.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DirectCurrencyConversionAvailability": {
            "description": "Defines a direct currency conversion availability model.",
            "type": "object",
            "properties": {
                "dccKey": {
                    "description": "The direct currency conversion key.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code converting available to convert to.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "rate": {
                    "format": "double",
                    "description": "The conversion rate value.",
                    "type": "number"
                },
                "amount": {
                    "format": "double",
                    "description": "The conversion rate amount.",
                    "type": "number"
                }
            }
        },
        "DccRequestBasev2": {
            "description": "Model representing the DCC request without a unique key.",
            "type": "object",
            "properties": {
                "paymentFields": {
                    "description": "Dynamic field information used for validation related to the specific payment type.\r\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                }
            }
        },
        "Delay": {
            "description": "The delay model.",
            "type": "object",
            "properties": {
                "delayCode": {
                    "description": "The delay code.",
                    "type": "string",
                    "example": ""
                },
                "delayType": {
                    "description": "The delay type.",
                    "enum": [
                        "Unknown",
                        "AirlineInternalCodes",
                        "Others",
                        "Schedules",
                        "PassengerAndBaggage",
                        "CargoAndMail",
                        "MailOnly",
                        "AircraftAndRampHandling",
                        "TechnicalAndAircraftEquipment",
                        "DamageToAircraft",
                        "EdpAutomatedEquipmentFailure",
                        "FlightOperationsAndCrewing",
                        "Weather",
                        "AirTrafficFlowManagement",
                        "AirportAndGovernmentalAuthorities",
                        "Reactionary",
                        "Miscellaneous"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "The Name.",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The InActive of Delay.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Department": {
            "description": "The department model.",
            "type": "object",
            "properties": {
                "departmentCode": {
                    "description": "The department code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The department name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "DocumentType": {
            "description": "The document type model.",
            "required": [
                "documentTypeCode"
            ],
            "type": "object",
            "properties": {
                "documentTypeCode": {
                    "description": "The document type code.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The document type name.",
                    "type": "string",
                    "example": ""
                },
                "group": {
                    "description": "The document group.",
                    "enum": [
                        "Unknown",
                        "AlienRegistrationCard",
                        "PermanentResidentCard",
                        "FacilitationDocument",
                        "InsPass",
                        "MilitaryId",
                        "Passport",
                        "ReEntryPermit",
                        "CreditCard",
                        "TravelVisa",
                        "OaFrequentFlyer",
                        "ParoleLetter",
                        "NoticeOfAction",
                        "TransportationLetter",
                        "BorderCrossingCard",
                        "PilotLicense",
                        "UsNaturalizationCertificate",
                        "RefugeeTravelDocument",
                        "GovernmentId",
                        "DriversLicense",
                        "RedressNumber",
                        "KnownTravelerId",
                        "FormOfId",
                        "Nexus",
                        "SecondaryExempt"
                    ],
                    "type": "string"
                },
                "isExpirationDateRequired": {
                    "description": "Indicates if an expiration date is required.",
                    "type": "boolean",
                    "example": false
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Domain": {
            "description": "The domain model.",
            "required": [
                "domainCode"
            ],
            "type": "object",
            "properties": {
                "domainCode": {
                    "description": "The domain code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The domain name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "pattern": "^[^\\[\\]]*$",
                    "type": "string",
                    "example": ""
                },
                "passwordNeverExpires": {
                    "description": "Set to true if the password will never expire.",
                    "type": "boolean",
                    "example": false
                },
                "minimumPasswordAge": {
                    "format": "int32",
                    "description": "Minimum Password Age is the amount of days that a password must live before it can be\r\nchanged. This is to prevent an Agent from changing their password the required amount\r\nof times so that the system allows her to return to her original password. For\r\nexample, if my pwd (12345) expires, and I don't want to change it, without this\r\nMinimum Password Age I could change it manually the right number of times and then\r\nchange it back to 12345, thus defeating the purpose of requiring the change in the\r\nfirst place.\r\nIf the field is set to null, the system should never prevent an\r\nAgent from changing her password. The example above would be perfectly valid.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "maximumPasswordAge": {
                    "format": "int32",
                    "description": "The Maximum Password Age is the amount of time a password can live before the system\r\nforces it to be changed. If this is set to null, the system\r\nwould never force an Agent to change their password.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "maximumFaliedLogons": {
                    "format": "int32",
                    "description": "After failing logon the amount of times specified by this field the locked bit is\r\nflipped on the Agent. No more logon attempts from the UI will be accepted for that\r\nAgent name. This locked bit can be flipped (on or off) manually in the Agents dialog\r\nin SkyManager.\r\nSetting this field to null would also indicate that logon can be\r\nattempted an unlimited amount of times for an Agent.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "uniquePasswordCount": {
                    "format": "int32",
                    "description": "The system forces the Agent to not re-use a password that it remembers the Agent has\r\nused. This field defines how many passwords the system remembers for an Agent. So if\r\nthis field is set to two and if my password was 12345, then when my password is\r\nchanged I would have to have two other passwords before I could reuse 12345.\r\nThis field does NOT specify how many Agents can have the same password. As far as the\r\nsystem is concerned every Agent can have the same password.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "passwordPolicy": {
                    "$ref": "#/definitions/RegularExpressionPolicy",
                    "description": "The password policy."
                },
                "usernamePolicy": {
                    "$ref": "#/definitions/RegularExpressionPolicy",
                    "description": "The regular expression that defines the rules for the username policy."
                },
                "allowed": {
                    "description": "True if the domain is allowed to use.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "RegularExpressionPolicy": {
            "description": "The model describing regular expression policies for a string.",
            "required": [
                "policy"
            ],
            "type": "object",
            "properties": {
                "policy": {
                    "description": "The regular expression policy that will be evaluated.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The policy description.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "EmailType": {
            "description": "The email type.",
            "required": [
                "emailTypeCode"
            ],
            "type": "object",
            "properties": {
                "emailTypeCode": {
                    "description": "The email type code.",
                    "type": "string"
                },
                "name": {
                    "description": "The type name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The InActive.",
                    "type": "boolean",
                    "example": false
                },
                "dataSchema": {
                    "description": "The data schema.",
                    "maxLength": 2147483647,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ExternalRate": {
            "description": "External rate model.",
            "type": "object",
            "properties": {
                "rateId": {
                    "description": "The id for this external rate.",
                    "type": "string",
                    "example": ""
                },
                "quotedCurrency": {
                    "description": "The quoted currency for this external rate.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "collectedCurrency": {
                    "description": "The collected currency for this external rate.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "exchangeRate": {
                    "format": "double",
                    "description": "The exchange rate for this external rate.",
                    "type": "number"
                }
            }
        },
        "FareType": {
            "description": "The fare type model.",
            "required": [
                "fareTypeCode"
            ],
            "type": "object",
            "properties": {
                "fareTypeCode": {
                    "description": "The fare type code.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Is active.",
                    "type": "boolean",
                    "example": false
                },
                "allowed": {
                    "description": "<b>Deprecated</b> - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "CommitPassengerFeeRequest": {
            "description": "Defines the request to retrieve a service fee.",
            "required": [
                "feeCode"
            ],
            "type": "object",
            "properties": {
                "passengerKey": {
                    "description": "The passenger key.",
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "The origin station code.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "feeCode": {
                    "description": "The fee code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "collectedCurrencyCode": {
                    "description": "The collected currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "FeeRequestBase": {
            "description": "Defines the request to retrieve a service fee.",
            "required": [
                "amount"
            ],
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "description": "The override amount.",
                    "type": "number"
                },
                "collectedCurrencyCode": {
                    "description": "The collected currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "FeeDetail": {
            "description": "Fee detail model.",
            "type": "object",
            "properties": {
                "number": {
                    "format": "int32",
                    "description": "Gets or sets the fee option number of this fee option.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "feeRules": {
                    "description": "Gets or sets the fee rules for this fee option.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeeRule"
                    }
                },
                "name": {
                    "description": "Gets or sets the name for this fee option.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "regionFees": {
                    "description": "Gets or sets the region fees for this fee option.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RegionFee"
                    }
                },
                "taxApplicationOverride": {
                    "description": "Gets or sets the override of how to apply the taxes.",
                    "enum": [
                        "Unknown",
                        "Taxable",
                        "TaxableLocal",
                        "NonTaxable",
                        "NonTaxableApplyToBaseFareOnly",
                        "TaxableByTrip",
                        "TaxableByItinerary"
                    ],
                    "type": "string"
                },
                "travelComponentOverride": {
                    "description": "Gets or sets the override for the travel component.",
                    "enum": [
                        "Unknown",
                        "Itinerary",
                        "Trip",
                        "Journey",
                        "Segment",
                        "Leg",
                        "ItineraryWithJourneySalesDate",
                        "TripWithJourneySalesDate",
                        "JourneyWithBookingSalesDate",
                        "JourneyWithJourneySalesDate",
                        "SegmentWithJourneySalesDate",
                        "LegWithJourneySalesDate",
                        "Fare"
                    ],
                    "type": "string"
                },
                "useOverrides": {
                    "description": "Gets or sets the flag for using the overrides.",
                    "type": "boolean",
                    "example": false
                },
                "feeApplicationOverride": {
                    "description": "Gets or sets the override for where to apply this fee option.",
                    "enum": [
                        "Pnr",
                        "TravelComponent",
                        "EachPassenger",
                        "EachPassengerTravelComponent",
                        "SpecifyPassenger",
                        "AllPaxCheckingBagsTogether",
                        "PerBookingNoLimit"
                    ],
                    "type": "string"
                }
            }
        },
        "FeeRule": {
            "description": "Fee rule model.",
            "type": "object",
            "properties": {
                "number": {
                    "format": "int32",
                    "description": "Gets or sets the fee option number for this fee rule.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "ruleNumber": {
                    "format": "int32",
                    "description": "Gets or sets the fee rule number for this fee rule.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "properties": {
                    "description": "Gets or sets the list of fee rule properties for this fee rule.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeeRuleProperty"
                    }
                },
                "operator": {
                    "description": "Gets or sets the fee rule operator for this fee rule.",
                    "enum": [
                        "Default",
                        "MustBe",
                        "MustNotBe"
                    ],
                    "type": "string"
                }
            }
        },
        "RegionFee": {
            "description": "Region fee model.",
            "type": "object",
            "properties": {
                "controlLimit": {
                    "format": "int32",
                    "description": "Gets or sets the control limit of this region fee.",
                    "type": "integer"
                },
                "countryCode": {
                    "description": "Gets or sets the country code of this region fee.",
                    "type": "string",
                    "example": ""
                },
                "deducted": {
                    "description": "Gets or sets the deducted flag of this region fee.",
                    "type": "boolean",
                    "example": false
                },
                "deductionType": {
                    "description": "Gets or sets the deduction type of this region fee.",
                    "enum": [
                        "All",
                        "First",
                        "Last",
                        "ExceptForFirst",
                        "ExceptForLast",
                        "None"
                    ],
                    "type": "string"
                },
                "defaultCurrencyCode": {
                    "description": "Gets or sets the default currency code of this region fee.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "directionality": {
                    "description": "Gets or sets the directionality of this region fee.",
                    "enum": [
                        "None",
                        "To",
                        "From",
                        "Between"
                    ],
                    "type": "string"
                },
                "discontinueDate": {
                    "format": "date-time",
                    "description": "Gets or sets the discontinue date of this region fee.",
                    "type": "string"
                },
                "feeOptionNumber": {
                    "format": "int32",
                    "description": "Gets or sets the fee option number for this region fee.",
                    "type": "integer"
                },
                "ratePercent": {
                    "format": "double",
                    "description": "Gets or sets the rate percent for this region fee.",
                    "type": "number"
                },
                "regionCode": {
                    "description": "Gets or sets the region code for this region fee.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "baggage": {
                    "$ref": "#/definitions/RegionFeeBaggage",
                    "description": "Gets or sets the baggage for this region fee."
                },
                "id": {
                    "format": "int64",
                    "description": "Gets or sets the id for this region fee.",
                    "type": "integer"
                },
                "regionRates": {
                    "description": "Gets or sets the list for region rates for this region fee.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RegionRate"
                    }
                },
                "regionType": {
                    "description": "Gets or sets the region type for this region fee.",
                    "enum": [
                        "Default",
                        "Station",
                        "City",
                        "ProvinceState",
                        "Country",
                        "FeeZone",
                        "SubZone",
                        "Area",
                        "All",
                        "Mac"
                    ],
                    "type": "string"
                },
                "releaseDate": {
                    "format": "date-time",
                    "description": "Gets or sets the release date for this region fee.",
                    "type": "string"
                },
                "travelCountryCode": {
                    "description": "Gets or sets the travel country code for this region fee.",
                    "type": "string",
                    "example": ""
                },
                "travelDiscontinueDate": {
                    "format": "date-time",
                    "description": "Gets or sets the travel discount date for this region fee.",
                    "type": "string"
                },
                "travelRegionCode": {
                    "description": "Gets or sets the travel region code for this region.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "travelRegionType": {
                    "description": "Gets or sets the travel region type for this region.",
                    "enum": [
                        "Default",
                        "Station",
                        "City",
                        "ProvinceState",
                        "Country",
                        "FeeZone",
                        "SubZone",
                        "Area",
                        "All",
                        "Mac"
                    ],
                    "type": "string"
                },
                "travelReleaseDate": {
                    "format": "date-time",
                    "description": "Gets or sets the travel release date for this region.",
                    "type": "string"
                },
                "travelSegmentIndicator": {
                    "description": "Gets or sets the travel segment indicator for this region.",
                    "enum": [
                        "None",
                        "CheckAgainstJourney",
                        "CheckAgainstTrip",
                        "Departure",
                        "DepartureOfTripOrigin",
                        "DepartureAtConnection",
                        "DepartureWithinStopoverTime",
                        "DepartureAtPointOfTurnaround",
                        "DepartureOfTransOceanicSegment",
                        "DepartureFromGateway",
                        "DepartureOfLastSegment",
                        "DepartureExceedsStopoverTime",
                        "NotDepartingViaConnection",
                        "GroundTimeBeforeDepartureOfJourneyWithin",
                        "GroundTimeBeforeDepartureOfJourneyExceeds",
                        "Arrival",
                        "ArrivalOfTransOceanicSegment",
                        "ArrivalAtGateway",
                        "ArrivalAtPointOfTurnaround",
                        "ArrivalAtConnection",
                        "ArrivalAtTripOrigin",
                        "NotDepartingViaConnectionOnSameCalendarDay",
                        "CheckAgainstItinerary",
                        "GroundTimeAfterArrivalAtConnectionWithin",
                        "GroundTimeAfterArrivalAtConnectionExceeds",
                        "GroundTimeAfterArrivalOfJourneyWithin",
                        "GroundTimeAfterArrivalOfJourneyExceeds"
                    ],
                    "type": "string"
                }
            }
        },
        "FeeRuleProperty": {
            "description": "Fee rule property model.",
            "type": "object",
            "properties": {
                "propertyNumber": {
                    "format": "int32",
                    "description": "Gets or sets the fee property number of this fee rule property.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "ruleNumber": {
                    "format": "int32",
                    "description": "Gets or sets the fee rule number of this fee rule property.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "operator": {
                    "description": "Gets or sets the property operator of this fee rule property.",
                    "enum": [
                        "Default",
                        "MustBe",
                        "MustNotBe",
                        "AllMustBe"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "Gets or sets the property type of this fee rule property.",
                    "enum": [
                        "Default",
                        "PassengerType",
                        "FromStationClass",
                        "FareClass",
                        "PassengerResidentCountry",
                        "FeeCode",
                        "ToStationClass",
                        "EventChannel",
                        "OrganizationGroup",
                        "OrganizationCode",
                        "AgentRole",
                        "BestCustomerProgramLevel",
                        "WorstCustomerProgramLevel",
                        "ExactCustomerProgramLevel",
                        "CarrierCode",
                        "SeatGroup",
                        "FeeType",
                        "ProductClass",
                        "SystemCode",
                        "TripType",
                        "PaymentType",
                        "TicketAccountingCode",
                        "SoldChannel",
                        "ItineraryFullyWithinCountry",
                        "ChangeReasonCode",
                        "GuestRecognitionLevel",
                        "FlightType",
                        "FareType",
                        "DayOfWeek",
                        "StartTimeOfDay",
                        "EndTimeOfDay",
                        "StartFlightNumberRange",
                        "EndFlightNumberRange",
                        "MinAdvancedPurchaseDays",
                        "FareDiscount",
                        "BookingStatus",
                        "EarliestAdvancedPurchaseDays",
                        "SalesStartTimeOfDay",
                        "SalesEndTimeOfDay",
                        "BookingCurrency",
                        "CardSubType",
                        "PaymentMethodCode",
                        "ServiceBundle",
                        "CreatedAgentRoleCode",
                        "StartExtraBagRange",
                        "EndExtraBagRange",
                        "JourneyDepartureStation",
                        "JourneyDepartureCountry",
                        "GSTStateCode"
                    ],
                    "type": "string"
                },
                "propertyValue": {
                    "description": "Gets or sets the property value of this fee rule property.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "RegionFeeBaggage": {
            "description": "Region rate model.",
            "type": "object",
            "properties": {
                "weightDivisorKgs": {
                    "format": "int32",
                    "description": "Divisor value for weight in Kilograms.",
                    "type": "integer"
                },
                "weightDivisorLbs": {
                    "format": "int32",
                    "description": "Divisor value for weight in pounds.",
                    "type": "integer"
                }
            }
        },
        "RegionRate": {
            "description": "Region rate model.",
            "required": [
                "regionCode"
            ],
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The currency code of this region rate.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "rateAmount": {
                    "format": "double",
                    "description": "The rate amount of this region rate.",
                    "type": "number"
                },
                "regionCode": {
                    "description": "The region code of this region rate.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "regionFeeId": {
                    "format": "int64",
                    "description": "The region fee ID of this region rate.",
                    "type": "integer"
                },
                "regionRateId": {
                    "format": "int64",
                    "description": "The region rate ID of this region rate.",
                    "type": "integer"
                },
                "regionType": {
                    "description": "The type of this region rate.",
                    "enum": [
                        "Default",
                        "Station",
                        "City",
                        "ProvinceState",
                        "Country",
                        "FeeZone",
                        "SubZone",
                        "Area",
                        "All",
                        "Mac"
                    ],
                    "type": "string"
                }
            }
        },
        "Fee": {
            "description": "Fee Model.",
            "type": "object",
            "properties": {
                "canBeManuallyAdded": {
                    "description": "Returns true if this fee can be manually added.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "hasDefaultFeePrice": {
                    "description": "Returns true if this fee can be queried to check the default price.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isFeeChargedPerSegment": {
                    "description": "Returns true if the given fee code is charged per segment/leg.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "allowed": {
                    "description": "<b>Deprecated</b> - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.",
                    "type": "boolean",
                    "example": false
                },
                "chargeLimit": {
                    "format": "int32",
                    "description": "Gets or sets the charge limit of this fee.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "chargeLimitMode": {
                    "description": "Gets or sets when the charge limit is applied to this fee.",
                    "enum": [
                        "FirstOccurrences",
                        "LastOccurrences",
                        "FirstOutLastInOccurrences"
                    ],
                    "type": "string"
                },
                "chargeLimitTravelComponent": {
                    "description": "Gets or sets the charge limit for the travel component associated with this fee.",
                    "enum": [
                        "Unknown",
                        "Itinerary",
                        "Trip",
                        "Journey",
                        "Segment",
                        "Leg",
                        "ItineraryWithJourneySalesDate",
                        "TripWithJourneySalesDate",
                        "JourneyWithBookingSalesDate",
                        "JourneyWithJourneySalesDate",
                        "SegmentWithJourneySalesDate",
                        "LegWithJourneySalesDate",
                        "Fare"
                    ],
                    "type": "string"
                },
                "commissionable": {
                    "description": "Gets or sets the commissionable flag for this fee.",
                    "type": "boolean",
                    "example": false
                },
                "countryCode": {
                    "description": "Gets or sets the country code for this fee.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "Gets or sets the description for this fee.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "displayCode": {
                    "description": "Gets or sets the display code for this fee.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "feeApplication": {
                    "description": "Gets or sets how this fee is applied.",
                    "enum": [
                        "Pnr",
                        "TravelComponent",
                        "EachPassenger",
                        "EachPassengerTravelComponent",
                        "SpecifyPassenger",
                        "AllPaxCheckingBagsTogether",
                        "PerBookingNoLimit"
                    ],
                    "type": "string"
                },
                "feeCode": {
                    "description": "Gets or sets the code for this fee.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "feeOptionMode": {
                    "description": "Gets or sets the fee option mode for this fee.",
                    "enum": [
                        "Default",
                        "All",
                        "LowestCost",
                        "HighestCost"
                    ],
                    "type": "string"
                },
                "feeType": {
                    "description": "Gets or sets the fee type for this fee.",
                    "enum": [
                        "All",
                        "Tax",
                        "TravelFee",
                        "ServiceFee",
                        "PaymentFee",
                        "PenaltyFee",
                        "SsrFee",
                        "NonFlightServiceFee",
                        "UpgradeFee",
                        "SeatFee",
                        "BaseFare",
                        "SpoilageFee",
                        "NameChangeFee",
                        "ConvenienceFee",
                        "BaggageFee",
                        "FareSurcharge",
                        "PromotionDiscount",
                        "ServiceBundle",
                        "ExtraBagFee"
                    ],
                    "type": "string"
                },
                "inActive": {
                    "description": "Gets or sets the inactive flag for this fee.",
                    "type": "boolean",
                    "example": false
                },
                "itemizable": {
                    "description": "Gets or sets the itemizable flag for this fee.",
                    "type": "boolean",
                    "example": false
                },
                "minStopover": {
                    "format": "int32",
                    "description": "Gets or sets the MinStopover of this fee.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "minStopoverInternational": {
                    "format": "int32",
                    "description": "Gets or sets the International MinStopover of this fee.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "name": {
                    "description": "Gets or sets the name of this fee.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "taxApplication": {
                    "description": "Gets or sets how the taxes are applied for this fee.",
                    "enum": [
                        "Unknown",
                        "Taxable",
                        "TaxableLocal",
                        "NonTaxable",
                        "NonTaxableApplyToBaseFareOnly",
                        "TaxableByTrip",
                        "TaxableByItinerary"
                    ],
                    "type": "string"
                },
                "ticketable": {
                    "description": "Gets or sets the ticketable flag for this fee.",
                    "type": "boolean",
                    "example": false
                },
                "travelComponent": {
                    "description": "Gets or sets the travel component associated with this fee.",
                    "enum": [
                        "Unknown",
                        "Itinerary",
                        "Trip",
                        "Journey",
                        "Segment",
                        "Leg",
                        "ItineraryWithJourneySalesDate",
                        "TripWithJourneySalesDate",
                        "JourneyWithBookingSalesDate",
                        "JourneyWithJourneySalesDate",
                        "SegmentWithJourneySalesDate",
                        "LegWithJourneySalesDate",
                        "Fare"
                    ],
                    "type": "string"
                }
            }
        },
        "AvailabilityFlyAheadRequest": {
            "description": "Defines a fly ahead availability criteria search.",
            "required": [
                "stations",
                "journeyKey",
                "dates"
            ],
            "type": "object",
            "properties": {
                "passengerKeys": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "filters": {
                    "$ref": "#/definitions/AvailabilityMoveFilterCriteria",
                    "description": "The filtering criteria."
                },
                "stations": {
                    "$ref": "#/definitions/AvailabilityStationCriteria",
                    "description": "The station criteria."
                },
                "journeyKey": {
                    "description": "The journey sell key to move.",
                    "type": "string",
                    "example": ""
                },
                "dates": {
                    "$ref": "#/definitions/AvailabilityDateCriteria",
                    "description": "The date criteria."
                },
                "flightFilters": {
                    "$ref": "#/definitions/AvailabilityFlightCriteria",
                    "description": "The flight search criteria."
                },
                "type": {
                    "description": "Defines the type of fares to be returned.",
                    "enum": [
                        "Default",
                        "Standby",
                        "Overbook",
                        "NoPricing"
                    ],
                    "type": "string"
                }
            }
        },
        "AvailabilityMoveFilterCriteria": {
            "description": "Filter criteria filters the move availability responses results.",
            "type": "object",
            "properties": {
                "filter": {
                    "description": "Filters the type of journeys to return.",
                    "enum": [
                        "Default",
                        "ExcludeDeparted",
                        "ExcludeImminent",
                        "ExcludeUnavailable"
                    ],
                    "type": "string"
                },
                "sortKeys": {
                    "description": "The list of inventory journey sort keys. Used for filtering journeys on the response.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "ServiceType",
                            "ShortestTravelTime",
                            "LowestFare",
                            "HighestFare",
                            "EarliestDeparture",
                            "LatestDeparture",
                            "EarliestArrival",
                            "LatestArrival",
                            "NoSort",
                            "BiasOnlineCommercialDuplicates"
                        ],
                        "type": "string"
                    }
                }
            }
        },
        "GraphQlQuery": {
            "description": "Graph ql query object.",
            "required": [
                "query"
            ],
            "type": "object",
            "properties": {
                "query": {
                    "description": "Graph query.",
                    "type": "string",
                    "example": ""
                },
                "variables": {
                    "description": "Graph variables.",
                    "type": "string",
                    "example": ""
                },
                "cachedResults": {
                    "description": "Allow caching and the support of etags.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "HotCardReason": {
            "description": "The hot card reason model.",
            "required": [
                "hotCardReasonCode"
            ],
            "type": "object",
            "properties": {
                "hotCardReasonCode": {
                    "description": "The reason code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "HotelRequest": {
            "description": "Defines the query for a single station used for hotel travel commerce.",
            "required": [
                "station",
                "beginDate",
                "endDate",
                "participants"
            ],
            "type": "object",
            "properties": {
                "station": {
                    "description": "The station code for the city.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "vendorCode": {
                    "description": "The specific vendor code.",
                    "type": "string",
                    "example": ""
                },
                "companyCode": {
                    "description": "The company code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The begin date.",
                    "type": "string"
                },
                "cultureCode": {
                    "description": "The specific culture code.",
                    "type": "string",
                    "example": ""
                },
                "discountCode": {
                    "description": "The discount code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The end date.",
                    "type": "string"
                },
                "sort": {
                    "description": "The search sort order.",
                    "enum": [
                        "SupplierDefined",
                        "Price",
                        "Rating",
                        "Name",
                        "Category",
                        "VendorDescription",
                        "Preferred",
                        "Relevance"
                    ],
                    "type": "string"
                },
                "promotionCode": {
                    "description": "The promotion code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "participants": {
                    "description": "The collection of participants to with which to search.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParticipantCriteria"
                    }
                },
                "countryCode": {
                    "description": "The country code with which to search (source or market of the customer).",
                    "type": "string",
                    "example": ""
                },
                "catalogCode": {
                    "description": "The catalog code to with which to search.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "categoryCode": {
                    "description": "The category code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "departmentCode": {
                    "description": "The department code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "ratingCode": {
                    "description": "The rating code with which to search.",
                    "type": "string",
                    "example": ""
                },
                "keyword": {
                    "description": "The keywork with which to search.",
                    "type": "string",
                    "example": ""
                },
                "maxPrice": {
                    "format": "double",
                    "description": "The maximum price with which to search.",
                    "type": "number"
                },
                "minPrice": {
                    "format": "double",
                    "description": "The minimum price with which to search.",
                    "type": "number"
                },
                "quantity": {
                    "format": "int32",
                    "description": "The quantity with which to search.",
                    "type": "integer"
                },
                "parameters": {
                    "description": "The collection of additional search input parameters.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                }
            }
        },
        "HotelProduct": {
            "description": "Defines a availability search result.",
            "type": "object",
            "properties": {
                "productKey": {
                    "description": "The unique product result key.",
                    "type": "string",
                    "example": ""
                },
                "isPreferred": {
                    "description": "Flag indicating this item is preferred.",
                    "type": "boolean",
                    "example": false
                },
                "isNew": {
                    "description": "Flag indicating this item is new.",
                    "type": "boolean",
                    "example": false
                },
                "externalLocator": {
                    "description": "The external system locator code.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code for everything .",
                    "type": "string",
                    "example": ""
                },
                "vendorCode": {
                    "description": "The specific vendor code.",
                    "type": "string",
                    "example": ""
                },
                "descriptions": {
                    "$ref": "#/definitions/Descriptions",
                    "description": "The various descriptions."
                },
                "thumbnailFileName": {
                    "description": "The provided thumbnail file name.",
                    "type": "string",
                    "example": ""
                },
                "amounts": {
                    "$ref": "#/definitions/ProductPriceBreakdown",
                    "description": "The search result amounts."
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The address of the result."
                },
                "phoneNumbers": {
                    "description": "The collection of phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                },
                "images": {
                    "description": "The collection of display images.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Image"
                    }
                },
                "station": {
                    "description": "The station code for the city.",
                    "type": "string",
                    "example": ""
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The begin date.",
                    "type": "string"
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The end date.",
                    "type": "string"
                },
                "participants": {
                    "description": "The collection of participating participants.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParticipantBase"
                    }
                },
                "productVariations": {
                    "description": "The collection of product variations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductVariation"
                    }
                },
                "criteria": {
                    "$ref": "#/definitions/AddOnCriteria",
                    "description": "The search criteria of the product."
                }
            }
        },
        "QuoteHotelRequest": {
            "description": "Defines a product quote token request.",
            "required": [
                "quantity",
                "catalogKey",
                "productKey"
            ],
            "type": "object",
            "properties": {
                "quantity": {
                    "format": "int32",
                    "description": "The desired quantity.",
                    "type": "integer"
                },
                "catalogKey": {
                    "description": "The selected unique product variations catalog key.",
                    "type": "string",
                    "example": ""
                },
                "productKey": {
                    "description": "The selected unique product key.",
                    "type": "string",
                    "example": ""
                },
                "personalizations": {
                    "description": "The collection of desired personalizations to be quoted with the product.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SelectedPersonalization"
                    }
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SellHotelRequest": {
            "description": "Defines a product quote token request.",
            "required": [
                "quantity",
                "catalogKey",
                "productKey"
            ],
            "type": "object",
            "properties": {
                "parameters": {
                    "description": "The collection of dynamic order parameters to include.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "quantity": {
                    "format": "int32",
                    "description": "The desired quantity.",
                    "type": "integer"
                },
                "catalogKey": {
                    "description": "The selected unique product variations catalog key.",
                    "type": "string",
                    "example": ""
                },
                "productKey": {
                    "description": "The selected unique product key.",
                    "type": "string",
                    "example": ""
                },
                "personalizations": {
                    "description": "The collection of desired personalizations to be quoted with the product.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SelectedPersonalization"
                    }
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "InsuranceProduct": {
            "description": "Defines an insurance product result.",
            "type": "object",
            "properties": {
                "isGroup": {
                    "description": "Flag indicating if the insurance product is a group offer.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "productKey": {
                    "description": "The unique product result key.",
                    "type": "string",
                    "example": ""
                },
                "isPreferred": {
                    "description": "Flag indicating this item is preferred.",
                    "type": "boolean",
                    "example": false
                },
                "isNew": {
                    "description": "Flag indicating this item is new.",
                    "type": "boolean",
                    "example": false
                },
                "externalLocator": {
                    "description": "The external system locator code.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code for everything.",
                    "type": "string",
                    "example": ""
                },
                "vendorCode": {
                    "description": "The specific vendor code.",
                    "type": "string",
                    "example": ""
                },
                "descriptions": {
                    "$ref": "#/definitions/Descriptions",
                    "description": "The various descriptions."
                },
                "amounts": {
                    "$ref": "#/definitions/ProductPriceBreakdown",
                    "description": "The search result amounts."
                },
                "phoneNumbers": {
                    "description": "The collection of phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                },
                "origin": {
                    "description": "The origin station code for the city.",
                    "type": "string",
                    "example": ""
                },
                "destination": {
                    "description": "The destination station code if different than the origin.",
                    "type": "string",
                    "example": ""
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The begin date.",
                    "type": "string"
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The end date.",
                    "type": "string"
                },
                "participants": {
                    "description": "The collection of participating participants.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParticipantLinkedResult"
                    }
                },
                "declinedParticipants": {
                    "description": "The collection of declined participant names based on the participants from the search request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Name"
                    }
                },
                "productVariations": {
                    "description": "The collection of product variations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductVariation"
                    }
                }
            }
        },
        "ParticipantLinkedResult": {
            "description": "Defines the participant results.",
            "required": [
                "participantTypeCode"
            ],
            "type": "object",
            "properties": {
                "passengerKey": {
                    "description": "The passenger number of the participant.",
                    "type": "string",
                    "example": ""
                },
                "participantTypeCode": {
                    "description": "The participant's type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "isPrimary": {
                    "description": "The flag indicating the participant is the owner.",
                    "type": "boolean",
                    "example": false
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The participant's date of birth.",
                    "type": "string"
                },
                "residentCountry": {
                    "description": "The resident country.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SellInsuranceRequest": {
            "description": "Defines a specific item in an insurance request.",
            "required": [
                "catalogKey",
                "productKey",
                "primaryPassengerKey"
            ],
            "type": "object",
            "properties": {
                "catalogKey": {
                    "description": "The unique code for the specific catalog in the item.",
                    "type": "string",
                    "example": ""
                },
                "productKey": {
                    "description": "The selected unique product key.",
                    "type": "string",
                    "example": ""
                },
                "primaryPassengerKey": {
                    "description": "The passenger key used in grouped insurance items.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "IssuanceReason": {
            "description": "The issuance reason model.",
            "required": [
                "issuanceReasonCode"
            ],
            "type": "object",
            "properties": {
                "issuanceReasonCode": {
                    "description": "The reason code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "CancelJourneyRequest": {
            "description": "Defines the options available when canceling a journey.",
            "type": "object",
            "properties": {
                "waivePenaltyFee": {
                    "description": "Flag indicating to waive penalty fees if role permitting.",
                    "type": "boolean"
                },
                "waiveSpoilageFee": {
                    "description": "Flag indicating to waive spoilage fees if role permitting.",
                    "type": "boolean"
                },
                "preventReprice": {
                    "description": "Flag indicating to prevent reprice if role permitting.",
                    "type": "boolean"
                },
                "forceRefareForItineraryIntegrity": {
                    "description": "Flag indicating to invoke price with force refare itinerary set to true (default value is set to true).",
                    "type": "boolean"
                }
            }
        },
        "EnumResource": {
            "description": "Provide localization information about an enumeration.",
            "required": [
                "code"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "format": "int32",
                    "description": "The unique property code.",
                    "type": "integer"
                },
                "description": {
                    "description": "The description.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Location": {
            "description": "The location model.",
            "type": "object",
            "properties": {
                "locationCode": {
                    "description": "The Location Code.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The Name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "locationType": {
                    "description": "The location type.",
                    "enum": [
                        "Other",
                        "Station",
                        "City"
                    ],
                    "type": "string"
                },
                "paymentGroupId": {
                    "format": "int64",
                    "description": "The payment group id.",
                    "minimum": 0,
                    "type": "integer"
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "maxLength": 17,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Mac": {
            "description": "The MAC station model defines areas of related stations by region. //todo: Document and expand the MAC acronym",
            "required": [
                "macCode",
                "name"
            ],
            "type": "object",
            "properties": {
                "inActive": {
                    "description": "The inactive flag for this MAC station.",
                    "type": "boolean",
                    "example": false
                },
                "macCode": {
                    "description": "The code for this MAC station.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "macStations": {
                    "description": "The stations associated with this MAC.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "name": {
                    "description": "The name for this MAC.",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ManifestRequestBase": {
            "description": "Represents the manifest request base model.",
            "type": "object",
            "properties": {
                "baggageWeightType": {
                    "description": "Represents the weight type for all bags in the manifest.",
                    "enum": [
                        "Default",
                        "Pounds",
                        "Kilograms"
                    ],
                    "type": "string"
                },
                "iatciLookAhead": {
                    "description": "Specify whether the returned manifest includes \r\ndownline(.D)/inbound(.I) IATCI connections.",
                    "type": "boolean",
                    "example": false
                },
                "manifestFilters": {
                    "description": "The filters for the manifest.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "Baggage",
                            "PassengerTravelDoc",
                            "PassengerInfant",
                            "PassengerAddress",
                            "BookingComment",
                            "BookingQueue",
                            "PassengerJourneySegmentProperty",
                            "PassengerJourneySsr",
                            "InventoryLegOpComments",
                            "All"
                        ],
                        "type": "string"
                    }
                }
            }
        },
        "Manifest": {
            "description": "The flight manifest model.",
            "type": "object",
            "properties": {
                "arrivalCountry": {
                    "$ref": "#/definitions/CountryBase",
                    "description": "Information about the destination country regarding APIS and APPS."
                },
                "departureCountry": {
                    "$ref": "#/definitions/CountryBase",
                    "description": "Information about the country of origin regarding APIS and APPS."
                },
                "cabinPassengerCounts": {
                    "description": "The collection of Navitaire.NewSkies.Messages.Manifest.ManifestCabinPassengerCount.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ManifestCabinPassengerCount"
                    }
                },
                "market": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "The trip details for the flight being checked in."
                },
                "legStatus": {
                    "description": "The Status in Manifest object.",
                    "enum": [
                        "Normal",
                        "Closed",
                        "Canceled",
                        "Suspended",
                        "ClosedPending",
                        "BlockAllActivities",
                        "Mishap"
                    ],
                    "type": "string"
                },
                "inventoryLegCrossReferences": {
                    "description": "Collection of InventoryLegCrossReference objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LegCrossReference"
                    }
                },
                "legOperationComments": {
                    "description": "Collection of manifest leg operation comment objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ManifestLegOperationComment"
                    }
                },
                "passengerList": {
                    "description": "Gets collection of Manifest Passenger.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ManifestPassenger"
                    }
                },
                "arrivalTime": {
                    "format": "date-time",
                    "description": "The ArrivalTime in Manifest object.",
                    "type": "string"
                },
                "passengerCounts": {
                    "$ref": "#/definitions/PassengerCounts",
                    "description": "Represents passenger count data associated with the\r\nmanifest object."
                },
                "checkInLid": {
                    "format": "int32",
                    "description": "The CheckInLid in the manifest object.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "codeShareIndicator": {
                    "description": "The indicator on whether the leg/flight is a code-chare flight.",
                    "type": "string"
                },
                "departureGate": {
                    "description": "The departure gate number.",
                    "type": "string",
                    "example": ""
                },
                "departureTime": {
                    "format": "date-time",
                    "description": "The DepartureTime in Manifest object.",
                    "type": "string"
                },
                "internationalFlight": {
                    "description": "If true then this is a flight that departs from one country and arrives in.",
                    "type": "boolean",
                    "example": false
                },
                "inventoryLegId": {
                    "format": "int64",
                    "description": "The inventory leg ID.",
                    "minimum": 0,
                    "type": "integer"
                },
                "operatedByText": {
                    "description": "The operated by text.",
                    "type": "string",
                    "example": ""
                },
                "operatingIdentifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The operating transportation information, such as carrier code, \r\nflight number/identifier, etc."
                },
                "verified": {
                    "description": "Has this flight been verified for international travel?",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "CountryBase": {
            "description": "Represents the base class for a country model.",
            "required": [
                "countryCode",
                "countryCode3C"
            ],
            "type": "object",
            "properties": {
                "apisCheckDocuments": {
                    "description": "Are we required to check APIS documents.",
                    "type": "boolean",
                    "example": false
                },
                "apisRequiredInbound": {
                    "description": "Defines whether or not this Arrival Station requires APIS.",
                    "type": "boolean",
                    "example": false
                },
                "apisRequiredOutbound": {
                    "description": "Defines whether or not this departure station requires APIS.",
                    "type": "boolean",
                    "example": false
                },
                "appsRequiredInbound": {
                    "description": "Defines whether or not this arrival station requires APPS.",
                    "type": "boolean",
                    "example": false
                },
                "appsRequiredOutbound": {
                    "description": "Defines whether or not this departure station requires APPS.",
                    "type": "boolean",
                    "example": false
                },
                "countryCode": {
                    "description": "Represents the two-digit country code.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "countryCode3C": {
                    "description": "Represents the three-digit country code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ManifestCabinPassengerCount": {
            "description": "Manifest Cabin Passenger Count.",
            "type": "object",
            "properties": {
                "classRank": {
                    "format": "int32",
                    "description": "The cabin class rank.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "checkedIn": {
                    "format": "int32",
                    "description": "The checked-in passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "cabinOfService": {
                    "description": "The cabin of service.",
                    "type": "string"
                },
                "clearedStandBy": {
                    "format": "int32",
                    "description": "The cleared standby passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "clearedThruStandby": {
                    "format": "int32",
                    "description": "The cleared thru standby passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "manifested": {
                    "format": "int32",
                    "description": "The manifested passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "noShow": {
                    "format": "int32",
                    "description": "The passenger \"no-show\" count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "standBy": {
                    "format": "int32",
                    "description": "The standby passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "thruCheckedIn": {
                    "format": "int32",
                    "description": "The thru cheked-in passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "thruManifested": {
                    "format": "int32",
                    "description": "The thru manifested passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "thruNoShow": {
                    "format": "int32",
                    "description": "The thru \"no-show\" passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "thruStandBy": {
                    "format": "int32",
                    "description": "The thru standby passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "totalCheckedIn": {
                    "format": "int32",
                    "description": "The total checked-in passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "totalOnBoard": {
                    "format": "int32",
                    "description": "The total on-board passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "LegCrossReference": {
            "description": "Represents the inventory leg cross reference data.",
            "type": "object",
            "properties": {
                "legKey": {
                    "description": "The key for the manifest leg.",
                    "type": "string",
                    "example": ""
                },
                "number": {
                    "format": "int32",
                    "description": "The inventory leg cross reference number.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "marketInformation": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "Information about the market arrival and destination details."
                }
            }
        },
        "ManifestLegOperationComment": {
            "description": "Manifest leg operations comment model.",
            "type": "object",
            "properties": {
                "commentType": {
                    "description": "The comment type.",
                    "enum": [
                        "Default",
                        "Reservation",
                        "Operation",
                        "PitLoad",
                        "Irop",
                        "AppsOverride",
                        "ManualAppsOverride"
                    ],
                    "type": "string"
                },
                "agentId": {
                    "format": "int64",
                    "description": "The agentID.",
                    "minimum": 0,
                    "type": "integer"
                },
                "date": {
                    "format": "date-time",
                    "description": "The comment date.",
                    "type": "string"
                },
                "comment": {
                    "description": "The comment text.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ManifestPassenger": {
            "description": "Manifest Passenger.",
            "type": "object",
            "properties": {
                "balanceDue": {
                    "description": "If there is a balance due it returns true. This is the same as having an under paid, paid status.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "passengerKey": {
                    "description": "The unique identifier for the passenger.",
                    "type": "string",
                    "example": ""
                },
                "bookingDate": {
                    "format": "date-time",
                    "description": "The date the booking was created.",
                    "type": "string"
                },
                "checkInType": {
                    "description": "The type of flight that is being dealt with: Local = first leg of journey",
                    "enum": [
                        "Default",
                        "Local",
                        "Through",
                        "Connecting",
                        "NonLocal"
                    ],
                    "type": "string"
                },
                "comments": {
                    "description": "Manifest comments attached to the booking.  Gets collection of ManifestComment",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ManifestComment"
                    }
                },
                "createdAgentId": {
                    "format": "int64",
                    "description": "Agent that created the booking that this passenger is on.",
                    "minimum": 0,
                    "type": "integer"
                },
                "customerNumber": {
                    "description": "The string that represents the customer number of the person.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "discountCode": {
                    "description": "The discount code used by the passenger in booking this reservation.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "infant": {
                    "$ref": "#/definitions/ManifestInfant",
                    "description": "The information about the infant travelling with the passenger."
                },
                "manifestQueues": {
                    "description": "Queue that this passenger is listed on.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ManifestQueue"
                    }
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "Passengers Name."
                },
                "paidStatus": {
                    "description": "The PaidStatus property.",
                    "enum": [
                        "UnderPaid",
                        "PaidInFull",
                        "OverPaid"
                    ],
                    "type": "string"
                },
                "passengerAddresses": {
                    "description": "Travel documents for the passenger, i.e. Passports and Visas.\r\nNavitaire.NewSkies.Messages.Manifest.ManifestPassengerAddress",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ManifestPassengerAddress"
                    }
                },
                "passengersOnBooking": {
                    "format": "int32",
                    "description": "Total number of passengers on the booking.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "travelDocuments": {
                    "description": "Travel documents for the passenger, i.e. Passports and Visas.\r\nNavitaire.NewSkies.Messages.Manifest.ManifestPassengerDoc",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerTravelDocument"
                    }
                },
                "personId": {
                    "format": "int64",
                    "description": "The unique identifier for the registered person within the system.",
                    "minimum": 0,
                    "type": "integer"
                },
                "profileStatus": {
                    "description": "The ProfileStatus property.",
                    "enum": [
                        "Default",
                        "KnownIndividual",
                        "ResolutionGroup",
                        "SelecteeGroup",
                        "NotUsed",
                        "FailureGroup",
                        "RandomSelectee",
                        "Exempt"
                    ],
                    "type": "string"
                },
                "program": {
                    "$ref": "#/definitions/Program",
                    "description": "The passenger program data."
                },
                "recordLocator": {
                    "description": "The record locator for the booking.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "services": {
                    "description": "The flight service information for the passenger.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FlightService"
                    }
                },
                "sourcePos": {
                    "$ref": "#/definitions/PointOfSale",
                    "description": "The balance due on the passenger."
                },
                "status": {
                    "description": "The booking status.",
                    "enum": [
                        "Default",
                        "Hold",
                        "Confirmed",
                        "Closed",
                        "HoldCanceled",
                        "PendingArchive",
                        "Archived"
                    ],
                    "type": "string"
                },
                "passengerInformation": {
                    "$ref": "#/definitions/PassengerInformation",
                    "description": "Additional passenger information details."
                },
                "passengerId": {
                    "format": "int64",
                    "description": "The unique identifier for the passenger.",
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "PassengerCounts": {
            "description": "Represents various count data for passengers, such as checked-in, no-shows, etc.",
            "type": "object",
            "properties": {
                "checkedIn": {
                    "format": "int32",
                    "description": "The checked-in passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "clearedStandBy": {
                    "format": "int32",
                    "description": "The cleared standby passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "clearedThruStandby": {
                    "format": "int32",
                    "description": "The cleared thru standby passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "manifested": {
                    "format": "int32",
                    "description": "The manifested passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "noShow": {
                    "format": "int32",
                    "description": "The passenger \"no-show\" count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "standBy": {
                    "format": "int32",
                    "description": "The standby passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "thruCheckedIn": {
                    "format": "int32",
                    "description": "The thru cheked-in passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "thruManifested": {
                    "format": "int32",
                    "description": "The thru manifested passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "thruNoShow": {
                    "format": "int32",
                    "description": "The thru \"no-show\" passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "thruStandBy": {
                    "format": "int32",
                    "description": "The thru standby passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "totalCheckedIn": {
                    "format": "int32",
                    "description": "The total checked-in passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "totalOnBoard": {
                    "format": "int32",
                    "description": "The total on-board passenger count.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "ManifestComment": {
            "description": "Manifest Comment.",
            "type": "object",
            "properties": {
                "commentType": {
                    "description": "The comment type.",
                    "enum": [
                        "Default",
                        "Itinerary",
                        "Manifest",
                        "Alert",
                        "Archive"
                    ],
                    "type": "string"
                },
                "agentId": {
                    "format": "int64",
                    "description": "The agentID.",
                    "minimum": 0,
                    "type": "integer"
                },
                "domainCode": {
                    "description": "The domain code.",
                    "type": "string",
                    "example": ""
                },
                "date": {
                    "format": "date-time",
                    "description": "The comment date.",
                    "type": "string"
                },
                "organizationCode": {
                    "description": "The organization code.",
                    "type": "string",
                    "example": ""
                },
                "comment": {
                    "description": "The comment text.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "systemName": {
                    "description": "The system type.",
                    "enum": [
                        "Default",
                        "WinRez",
                        "FareManager",
                        "ScheduleManager",
                        "WinManager",
                        "ConsoleRez",
                        "WebRez",
                        "WebServicesApi",
                        "WebServicesEsc",
                        "InternalService",
                        "WebReporting",
                        "TaxAndFeeManager",
                        "Dcs"
                    ],
                    "type": "string"
                }
            }
        },
        "ManifestInfant": {
            "description": "Manifest Infant.",
            "type": "object",
            "properties": {
                "travelDocuments": {
                    "description": "The collection of travel documents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerTravelDocument"
                    }
                },
                "nationality": {
                    "description": "The nationality of the passenger.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth of the infant.",
                    "type": "string"
                },
                "residentCountry": {
                    "description": "The residentCountry of the passenger.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "gender": {
                    "description": "The gender of the passenger.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name of the passenger."
                }
            }
        },
        "ManifestQueue": {
            "description": "Manifest Queue.",
            "type": "object",
            "properties": {
                "manifestQueueKey": {
                    "description": "Represents the unique identifier for the manifest queue model.",
                    "type": "string",
                    "example": ""
                },
                "queueAction": {
                    "description": "The action that will be taken as a result of the placement in.",
                    "enum": [
                        "Default",
                        "Warning",
                        "Lock",
                        "DefaultAndNotify",
                        "WarningAndNotify",
                        "LockAndNotify"
                    ],
                    "type": "string"
                },
                "queueCategoryCode": {
                    "description": "The QueueCategoryCode property.",
                    "type": "string"
                },
                "queueCode": {
                    "description": "The identifier for the queue where the booking is placed.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "queueName": {
                    "description": "The name for the queue where the booking is placed.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ManifestPassengerAddress": {
            "description": "The Manifest Passenger Address.",
            "type": "object",
            "properties": {
                "countryName": {
                    "description": "The CountryName property.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "The addresses APIS status.",
                    "enum": [
                        "Residence",
                        "InCountry",
                        "Emergency"
                    ],
                    "type": "string"
                },
                "companyName": {
                    "description": "Company name associated with this address.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerId": {
                    "format": "int64",
                    "description": "The unique identifier for a passenger within a booking.",
                    "minimum": 0,
                    "type": "integer"
                },
                "passengerAddressKey": {
                    "description": "The unique address identifier.",
                    "type": "string",
                    "example": ""
                },
                "phone": {
                    "description": "Phone number associated with this address.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "stationCode": {
                    "description": "Station code associated with this address.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Program": {
            "description": "Model representing a passenger program.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "pattern": "^[^|]*$",
                    "type": "string",
                    "example": ""
                },
                "levelCode": {
                    "description": "The program level code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "pattern": "^[^|]*$",
                    "type": "string",
                    "example": ""
                },
                "number": {
                    "description": "The program number.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "FlightService": {
            "description": "Flight Service.",
            "type": "object",
            "properties": {
                "guestValueLevelCode": {
                    "description": "The GuestValueLevelCode property.",
                    "type": "string"
                },
                "guestValueScore": {
                    "format": "int32",
                    "description": "The GuestValueScore property.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "segments": {
                    "description": "The collection of Manifest Segment objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ManifestSegment"
                    }
                }
            }
        },
        "ManifestSegment": {
            "description": "Manifest Segment.",
            "type": "object",
            "properties": {
                "segmentKey": {
                    "description": "The unique identifier for the segment.",
                    "type": "string",
                    "example": ""
                },
                "market": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "Represents data relating to the manifest segment market."
                },
                "baggageAllowanceUsed": {
                    "description": "Baggage Allowance Used.",
                    "type": "boolean",
                    "example": false
                },
                "baggageAllowanceWeight": {
                    "format": "int32",
                    "description": "Baggage Allowance Weight.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "baggageAllowanceWeightType": {
                    "description": "Weight Type.",
                    "enum": [
                        "Default",
                        "Pounds",
                        "Kilograms"
                    ],
                    "type": "string"
                },
                "bookingStatus": {
                    "description": "The BookingStatus property.",
                    "type": "string",
                    "example": ""
                },
                "cabinOfService": {
                    "description": "The CabinOfService property.",
                    "type": "string"
                },
                "changeReasonCode": {
                    "description": "The ChangeReasonCode property.",
                    "type": "string",
                    "example": ""
                },
                "classOfService": {
                    "description": "The ClassOfService property.",
                    "type": "string",
                    "example": ""
                },
                "fareBasisCode": {
                    "description": "The FareBasisCode.",
                    "type": "string",
                    "example": ""
                },
                "infantTicketNumber": {
                    "description": "The infant ticket number.",
                    "type": "string",
                    "example": ""
                },
                "international": {
                    "description": "The International property.",
                    "type": "boolean",
                    "example": false
                },
                "legs": {
                    "description": "The Legs property.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ManifestLeg"
                    }
                },
                "productClassCode": {
                    "description": "The product class code.",
                    "type": "string",
                    "example": ""
                },
                "seatProperties": {
                    "description": "The Legs property.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ManifestSeatProperty"
                    }
                },
                "segmentType": {
                    "description": "The SegmentType.",
                    "type": "string",
                    "example": ""
                },
                "soldDate": {
                    "format": "date-time",
                    "description": "The date the segment was sold.",
                    "type": "string"
                },
                "ssrCodes": {
                    "description": "The SSRCodes property.",
                    "type": "string",
                    "example": ""
                },
                "ticketIndicator": {
                    "description": "The ticket indicator.",
                    "type": "string",
                    "example": ""
                },
                "ticketNumber": {
                    "description": "The ticket number.",
                    "type": "string",
                    "example": ""
                },
                "upgradeIndicator": {
                    "description": "The upgrade indicator property.",
                    "type": "boolean",
                    "example": false
                },
                "verifiedTravelDocs": {
                    "description": "The VerifiedTravelDocs property.",
                    "type": "string",
                    "example": ""
                },
                "xRefIdentifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The travel cross reference identifier information."
                }
            }
        },
        "ManifestLeg": {
            "description": "Manifest Leg.",
            "type": "object",
            "properties": {
                "arrivalDetail": {
                    "description": "The ArrivalDetail property.",
                    "type": "string",
                    "example": ""
                },
                "bags": {
                    "description": "The Bags property.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OperationBag"
                    }
                },
                "boardingSequence": {
                    "format": "int32",
                    "description": "The BoardingSequence property.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "boardingZone": {
                    "format": "int32",
                    "description": "Boarding Zone of ManifestLeg.",
                    "maximum": 99,
                    "minimum": 0,
                    "type": "integer"
                },
                "compartmentDesignator": {
                    "description": "The CompartmentDesignator property.",
                    "type": "string",
                    "example": ""
                },
                "departureDetail": {
                    "description": "The DepartureDetail property.",
                    "type": "string",
                    "example": ""
                },
                "market": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "The market property."
                },
                "legNumber": {
                    "format": "int32",
                    "description": "The LegNumber property.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "liftStatus": {
                    "description": "The LiftStatus property.",
                    "enum": [
                        "Default",
                        "CheckedIn",
                        "Boarded",
                        "NoShow"
                    ],
                    "type": "string"
                },
                "manifestOrigin": {
                    "description": "The ManifestOrigin property.",
                    "type": "boolean",
                    "example": false
                },
                "priorityCode": {
                    "description": "The PriorityCode property.",
                    "type": "string",
                    "example": ""
                },
                "priorityDate": {
                    "format": "date-time",
                    "description": "The PriorityDate property.",
                    "type": "string"
                },
                "promptToVerifyId": {
                    "description": "Indicates whether to prompt to verify the passenger id when checking in,",
                    "type": "boolean",
                    "example": false
                },
                "ssrs": {
                    "description": "The SSRs property.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrGlance"
                    }
                },
                "unitAssignmentWeight": {
                    "format": "int32",
                    "description": "The unit assignment weight. This value is used to determine \r\nthe satisfaction level of the passenger's seat assignment.",
                    "type": "integer"
                },
                "unitDesignator": {
                    "description": "The UnitDesignator property.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ManifestSeatProperty": {
            "description": "Manifest Seat Property.",
            "type": "object",
            "properties": {
                "preferenceStatus": {
                    "description": "The preference status field contains the current met/unmet or unknown status.",
                    "type": "string",
                    "example": ""
                },
                "propertyCode": {
                    "description": "The property code is a string value. The expected value is true.",
                    "type": "string",
                    "example": ""
                },
                "propertyTypeCode": {
                    "description": "The property type code indicates the type of seat preference requested.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TripInformationResponse": {
            "description": "A collection of journeys for a given departure date and market.",
            "type": "object",
            "properties": {
                "date": {
                    "format": "date-time",
                    "description": "Represents the date for the journey response.",
                    "type": "string",
                    "readOnly": true
                },
                "journeys": {
                    "description": "Represents the collection of journeys.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TripInformationJourney"
                    }
                }
            }
        },
        "TripInformationJourney": {
            "description": "Represents the trip information journey.",
            "type": "object",
            "properties": {
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "This is a summary of all the segments on the journey. It will contain the details\r\nof the transportation from the first and last segment.",
                    "readOnly": true
                },
                "journeyKey": {
                    "description": "Represents the journey key.",
                    "type": "string",
                    "example": ""
                },
                "segments": {
                    "description": "Represents the collection of itinerary segments for this journey.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ItinerarySegment"
                    }
                }
            }
        },
        "ItinerarySegment": {
            "description": "Represents the operation between board station and any subsequent off station\r\nwithin the same flight.",
            "type": "object",
            "properties": {
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "This is a summarry of all the legs on the segment. It will contain the details\r\nof the transportation from the first and last leg.",
                    "readOnly": true
                },
                "isSeatmapViewable": {
                    "description": "Indicates if the seatmaps associated with the segment are viewable.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "segmentKey": {
                    "description": "The unique identifier for the segment.",
                    "type": "string",
                    "example": ""
                },
                "identifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The transportation identifier."
                },
                "legs": {
                    "description": "The legs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ItineraryLeg"
                    }
                },
                "externalIdentifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The external transportation identifier."
                },
                "segmentType": {
                    "description": "The type of the segment.",
                    "enum": [
                        "Normal",
                        "CodeShareOperating",
                        "CodeShareMarketing",
                        "InterlineOutbound",
                        "InterlineInbound",
                        "Passive"
                    ],
                    "type": "string"
                }
            }
        },
        "ItineraryLeg": {
            "description": "Defines a single instance of non-stop travel between two stations.",
            "type": "object",
            "properties": {
                "legKey": {
                    "description": "The unique identifier for this leg sell information.",
                    "type": "string",
                    "example": ""
                },
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "Transportation information."
                }
            }
        },
        "AddUnitConfig": {
            "description": "Unit sell config defines the different configurations when selling units.",
            "type": "object",
            "properties": {
                "collectedCurrencyCode": {
                    "description": "Optional Currency code if different than booking currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "waiveFee": {
                    "description": "The flag indicating to waive the seat fees if permissions permit.",
                    "type": "boolean"
                },
                "inventoryControl": {
                    "description": "Indicates the type of hold placed on a unit.",
                    "enum": [
                        "Session",
                        "None"
                    ],
                    "type": "string"
                },
                "ignoreSeatSsrs": {
                    "description": "Flag indicating whether to ignore seat SSR's.",
                    "type": "boolean"
                }
            }
        },
        "SsrsRequest": {
            "description": "Request to add multiple leg, segment, or journey Ssr's.",
            "required": [
                "requests"
            ],
            "type": "object",
            "properties": {
                "requests": {
                    "description": "Ssr requests by type of request (Journey, Leg, Segment).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrsByType"
                    }
                },
                "forceWaveOnSell": {
                    "description": "Force wave on sell. Default value is false.",
                    "type": "boolean"
                },
                "currencyCode": {
                    "description": "Set the currency code if different than the booking currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SsrsByType": {
            "description": "Ssrs by type model allows multiple Ssr requests for a specific type.",
            "required": [
                "type",
                "market",
                "items"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "Defines the duration type of the Ssr.",
                    "enum": [
                        "Segment",
                        "Journey",
                        "Leg"
                    ],
                    "type": "string"
                },
                "market": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "Market for the corresponding type."
                },
                "items": {
                    "description": "SSR request items.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrRequest"
                    }
                }
            }
        },
        "SsrRequest": {
            "description": "SSR request for a single Ssr.",
            "required": [
                "passengerKey",
                "ssrCode"
            ],
            "type": "object",
            "properties": {
                "passengerKey": {
                    "description": "The passenger key.",
                    "type": "string",
                    "example": ""
                },
                "ssrCode": {
                    "description": "The Ssr code.",
                    "type": "string",
                    "example": ""
                },
                "inBundle": {
                    "description": "Indicates if the SSR is part of a bundle.",
                    "type": "boolean",
                    "example": false
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items to include. Defaults to 1.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "note": {
                    "description": "Notes associated with this Ssr.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerSsrKey": {
            "description": "The model for the data needed to identify a passenger ssr key.",
            "type": "object",
            "properties": {
                "ssrDuration": {
                    "description": "The length of the Ssr duration.",
                    "enum": [
                        "Segment",
                        "Journey",
                        "Leg"
                    ],
                    "type": "string"
                },
                "ssrCode": {
                    "description": "The passenger SSR code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerKey": {
                    "description": "The unique passenger key.",
                    "type": "string",
                    "example": ""
                },
                "ssrNumber": {
                    "format": "int32",
                    "description": "The passenger SSR number.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "market": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "The market for either the leg or segment depending on the Ssr type."
                }
            }
        },
        "Marketv2": {
            "description": "The market model, version 2.",
            "required": [
                "locationCode",
                "travelLocationCode"
            ],
            "type": "object",
            "properties": {
                "locationCode": {
                    "description": "The starting location code for this market.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "earliestCheckInFrom": {
                    "format": "int32",
                    "description": "The earliest check in from travel location for this market.",
                    "type": "integer"
                },
                "earliestCheckInTo": {
                    "format": "int32",
                    "description": "The earliest check in to travel location for this market.",
                    "type": "integer"
                },
                "inActive": {
                    "description": "The inactive flag for this market.",
                    "type": "boolean",
                    "example": false
                },
                "includesTaxesAndFees": {
                    "description": "The directions where taxes and fees are included in this market.",
                    "enum": [
                        "None",
                        "To",
                        "From",
                        "Between"
                    ],
                    "type": "string"
                },
                "latestCheckInFrom": {
                    "format": "int32",
                    "description": "The latest check in from travel location for this market.",
                    "type": "integer"
                },
                "latestCheckInTo": {
                    "format": "int32",
                    "description": "The latest check in to travel location for this market.",
                    "type": "integer"
                },
                "locationType": {
                    "description": "The location type of the starting location for this market.",
                    "enum": [
                        "Undefined",
                        "Station",
                        "Mac"
                    ],
                    "type": "string"
                },
                "travelLocationCode": {
                    "description": "The ending location code for this market.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "travelLocationType": {
                    "description": "The location type of the ending location for this market.",
                    "enum": [
                        "Undefined",
                        "Station",
                        "Mac"
                    ],
                    "type": "string"
                },
                "travelLocationsRequired": {
                    "description": "The market rules for requiring travel documents for this market.",
                    "enum": [
                        "None",
                        "FromTravel",
                        "ToTravel",
                        "BothTravel"
                    ],
                    "type": "string"
                }
            }
        },
        "Market": {
            "description": "The market model.",
            "required": [
                "locationCode",
                "travelLocationCode"
            ],
            "type": "object",
            "properties": {
                "locationCode": {
                    "description": "The starting location code for this market.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "earliestCheckInFrom": {
                    "format": "int32",
                    "description": "The earliest check in from travel location for this market.",
                    "type": "integer"
                },
                "earliestCheckInTo": {
                    "format": "int32",
                    "description": "The earliest check in to travel location for this market.",
                    "type": "integer"
                },
                "inActive": {
                    "description": "The inactive flag for this market.",
                    "type": "boolean",
                    "example": false
                },
                "includesTaxesAndFees": {
                    "description": "The directions where taxes and fees are included in this market.",
                    "enum": [
                        "None",
                        "To",
                        "From",
                        "Between"
                    ],
                    "type": "string"
                },
                "latestCheckInFrom": {
                    "format": "int32",
                    "description": "The latest check in from travel location for this market.",
                    "type": "integer"
                },
                "latestCheckInTo": {
                    "format": "int32",
                    "description": "The latest check in to travel location for this market.",
                    "type": "integer"
                },
                "locationType": {
                    "description": "The location type of the starting location for this market.",
                    "enum": [
                        "Undefined",
                        "Station",
                        "Mac"
                    ],
                    "type": "string"
                },
                "travelDocsRequired": {
                    "description": "The market rules for requiring travel documents for this market.",
                    "enum": [
                        "None",
                        "FromTravel",
                        "ToTravel",
                        "BothTravel",
                        "BothOverride",
                        "FromOverride",
                        "ToOverride",
                        "ToTravelToOverride",
                        "ToTravelBothOverride",
                        "ToTravelFromOverride",
                        "FromTravelToOverride",
                        "FromTravelBothOverride",
                        "FromTravelFromOverride",
                        "BothTravelToOverride",
                        "BothTravelBothOverride",
                        "BothTravelFromOverride"
                    ],
                    "type": "string"
                },
                "travelLocationCode": {
                    "description": "The ending location code for this market.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "travelLocationType": {
                    "description": "The location type of the ending location for this market.",
                    "enum": [
                        "Undefined",
                        "Station",
                        "Mac"
                    ],
                    "type": "string"
                }
            }
        },
        "MccCurrencyInformationv2": {
            "description": "Model with the Mcc curency and rate information.",
            "type": "object",
            "properties": {
                "rate": {
                    "$ref": "#/definitions/ExternalRate",
                    "description": "The external rate."
                },
                "currency": {
                    "$ref": "#/definitions/Currencyv2",
                    "description": "The currency."
                },
                "balanceDue": {
                    "format": "double",
                    "description": "The total balance due using this currency code.",
                    "type": "number"
                }
            }
        },
        "PaymentRequest": {
            "description": "Defines information needed for a generic voucher payment requested to be added to the booking in state.",
            "required": [
                "amount"
            ],
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "description": "The amount to apply.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "number"
                },
                "paymentFields": {
                    "description": "Dynamic field information used for validation related to the specific payment type.\r\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "currencyCode": {
                    "description": "The currency code. This will default to the bookings currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "installments": {
                    "format": "int32",
                    "description": "The requested number of installments. Defaults to 1.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "MessageType": {
            "description": "The message type model.",
            "required": [
                "messageTypeCode"
            ],
            "type": "object",
            "properties": {
                "messageTypeCode": {
                    "description": "The reason code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "MoveRequest": {
            "description": "Defines the move journey request for a booking in state.",
            "required": [
                "fromJourneyKey",
                "journeyKey",
                "fareKey"
            ],
            "type": "object",
            "properties": {
                "fromJourneyKey": {
                    "description": "The journey key to move from.",
                    "type": "string",
                    "example": ""
                },
                "journeyKey": {
                    "description": "The journey key to move to.",
                    "type": "string",
                    "example": ""
                },
                "fareKey": {
                    "description": "The fare key to move to.",
                    "type": "string",
                    "example": ""
                },
                "moveType": {
                    "description": "The type of move that is requested.",
                    "enum": [
                        "None",
                        "Irop",
                        "Diversion",
                        "FlightClose",
                        "FlyAhead",
                        "SplitJourney"
                    ],
                    "type": "string"
                },
                "keepWaitListStatus": {
                    "description": "If true and the FromJourney is waitlisted, then the newly moved-to journey will\r\nalso be waitlisted.  This interacts with ChangeStatus.  See documentation for\r\nChangeStatus for further details.",
                    "type": "boolean",
                    "example": false
                },
                "ignoreClosedFlightStatus": {
                    "description": "If true then the move will be allowed even if the legs of FromJourney have been\r\nmarked as Closed.\r\nIf false, the move will be disallowed if any one of the legs\r\nof FromJourney has been marked as Closed.",
                    "type": "boolean",
                    "example": false
                },
                "ignoreLiftStatus": {
                    "description": "Controls whether the Move is allowed to ignore boarded and/or\r\nchecked-in statuses.",
                    "enum": [
                        "IgnoreNotAllowed",
                        "IgnoreCheckin",
                        "IgnoreBoarded"
                    ],
                    "type": "string"
                },
                "changeStatus": {
                    "description": "Set ChangeStatus to false and KeepWaitListStatus to false if you wish the\r\nstatus of the new segments to be set based upon the ActionStatusCodes\r\nspecified in the ToJourney.\r\nSet ChangeStatus to false and KeepWaitListStatus to true if you wish the\r\nstatus of the new segments to be set based upon the ActionStatusCodes\r\nspecified in the ToJourney EXCEPT when the original segments (being moved\r\nfrom) are waitlisted.  If the original segments are waitlisted, then the\r\nnew segments will also be forced to be waitlisted, regardless of which\r\nActionStatusCodes were specified in ToJourney.\r\nIf ChangeStatus is true, the status of the new segments will be set to\r\nthe opposite of the status of the original (moving from) segment.  If the\r\noriginal segments were waitlisted, then new segments will not be.  If the\r\noriginal segments were not waitlisted, the new segments will be waitlisted.\r\nThis does not need to be set to true if moving to a standby journey that is\r\nalready part of the booking.",
                    "type": "boolean",
                    "example": false
                },
                "oversell": {
                    "description": "If set to true and the active Agent has appropriate permissions, the move will\r\nbe allowed even if no space is available on the ToJourney.",
                    "type": "boolean",
                    "example": false
                },
                "boardingSequenceOffset": {
                    "format": "int32",
                    "description": "If set to zero and MovePassengerJourneyType is not Diversion, the boarding sequence\r\nof the original segments will be copied to the new (moved to) segments.\r\nIf set to a value other than zero and MovePassengerJourneyType is not Diversion,\r\nthe boarding sequence of the original segments will be copied to the new (moved to)\r\nsegments and then incremented by the specified BoardingSequenceOffset.\r\nBoarding sequence is not preserved for Diversion moves.",
                    "type": "integer"
                },
                "moveSsrOption": {
                    "description": "Controls whether to move SSRs from FromJourney to ToJourney.",
                    "enum": [
                        "OverbookSsr",
                        "MoveAvailableSsr",
                        "MoveNone"
                    ],
                    "type": "string"
                }
            }
        },
        "AvailabilityMoveRequest": {
            "description": "Defines the availability move request.",
            "required": [
                "stations",
                "journeyKey",
                "dates"
            ],
            "type": "object",
            "properties": {
                "passengerMoveType": {
                    "description": "The passenger move type.",
                    "enum": [
                        "None",
                        "Irop",
                        "Diversion",
                        "FlightClose",
                        "FlyAhead",
                        "SplitJourney"
                    ],
                    "type": "string"
                },
                "filters": {
                    "$ref": "#/definitions/AvailabilityMoveFilterCriteria",
                    "description": "The filtering criteria."
                },
                "stations": {
                    "$ref": "#/definitions/AvailabilityStationCriteria",
                    "description": "The station criteria."
                },
                "journeyKey": {
                    "description": "The journey sell key to move.",
                    "type": "string",
                    "example": ""
                },
                "dates": {
                    "$ref": "#/definitions/AvailabilityDateCriteria",
                    "description": "The date criteria."
                },
                "flightFilters": {
                    "$ref": "#/definitions/AvailabilityFlightCriteria",
                    "description": "The flight search criteria."
                },
                "type": {
                    "description": "Defines the type of fares to be returned.",
                    "enum": [
                        "Default",
                        "Standby",
                        "Overbook",
                        "NoPricing"
                    ],
                    "type": "string"
                }
            }
        },
        "NskSessionContext": {
            "description": "Defines the nsk current session context.",
            "type": "object",
            "properties": {
                "isPendingLogin": {
                    "description": "Flag indicating if the session is pending login.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isVirtual": {
                    "description": "Flag indicating if the session is a virtual user.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "identity": {
                    "$ref": "#/definitions/UserIdentity",
                    "description": "The logged in users identity."
                },
                "serverContext": {
                    "$ref": "#/definitions/ServerContext",
                    "description": "The server's session context."
                },
                "roles": {
                    "$ref": "#/definitions/SessionRoles",
                    "description": "The roles applied to the current session."
                },
                "defaultCultureCode": {
                    "description": "The users default culture code.",
                    "type": "string",
                    "example": ""
                },
                "defaultCurrencyCode": {
                    "description": "The users default currency code.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of session permissions based on the logged in user.",
                    "enum": [
                        "Unknown",
                        "Customer",
                        "Anonymous",
                        "Agent"
                    ],
                    "type": "string"
                },
                "hasBookingInState": {
                    "description": "True if the booking exists in NewSkies for the session.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "UserIdentity": {
            "description": "Defines the logged in users identity.",
            "type": "object",
            "properties": {
                "userKey": {
                    "description": "The unique user key.",
                    "type": "string",
                    "example": ""
                },
                "personKey": {
                    "description": "The unique person key.",
                    "type": "string",
                    "example": ""
                },
                "domain": {
                    "description": "The domain code the user exists in.",
                    "type": "string",
                    "example": ""
                },
                "organization": {
                    "description": "The organization code the user is apart of.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ServerContext": {
            "description": "Defines the server context.",
            "type": "object",
            "properties": {
                "id": {
                    "format": "int64",
                    "description": "The servers session ID.",
                    "type": "integer"
                },
                "token": {
                    "description": "The servers secure token.",
                    "type": "string",
                    "example": ""
                },
                "systemName": {
                    "description": "The acting system name.",
                    "enum": [
                        "Default",
                        "WinRez",
                        "FareManager",
                        "ScheduleManager",
                        "WinManager",
                        "ConsoleRez",
                        "WebRez",
                        "WebServicesApi",
                        "WebServicesEsc",
                        "InternalService",
                        "WebReporting",
                        "TaxAndFeeManager",
                        "Dcs"
                    ],
                    "type": "string"
                },
                "channel": {
                    "description": "The acting channel type.",
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                }
            }
        },
        "SessionRoles": {
            "description": "Defines the roles being used within the session.",
            "type": "object",
            "properties": {
                "inBaseRole": {
                    "description": "Flag indicating if in the base role.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "acting": {
                    "$ref": "#/definitions/RoleBase",
                    "description": "The acting role."
                },
                "base": {
                    "$ref": "#/definitions/RoleBase",
                    "description": "The base/original role."
                }
            }
        },
        "RoleBase": {
            "description": "Defines the base role.",
            "type": "object",
            "properties": {
                "roleCode": {
                    "description": "The unique role code.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The role's name.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "NskTokenRequest": {
            "description": "Defines the nsk token request to gain access to the API.",
            "type": "object",
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/Credentials",
                    "description": "The nsk user login credentials."
                },
                "applicationName": {
                    "description": "The optional name of the calling application.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TokenResponse": {
            "description": "Defines the token response.",
            "type": "object",
            "properties": {
                "token": {
                    "description": "The generated token.",
                    "type": "string",
                    "example": ""
                },
                "idleTimeoutInMinutes": {
                    "format": "int32",
                    "description": "The number of minutes the token can be idle before it timesout.",
                    "type": "integer"
                }
            }
        },
        "OrganizationGroup": {
            "description": "The data for an organization group.",
            "required": [
                "organizationGroupCode"
            ],
            "type": "object",
            "properties": {
                "organizationGroupCode": {
                    "description": "The organization group code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The organization group name.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrganizationGroupDetails": {
            "description": "The data for an organization group including details.",
            "required": [
                "organizationGroupCode"
            ],
            "type": "object",
            "properties": {
                "organizations": {
                    "description": "The organizations included in the group.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationRecordMinimum"
                    }
                },
                "organizationGroupCode": {
                    "description": "The organization group code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The organization group name.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrganizationRecordMinimum": {
            "description": "The data for a simple organization record.",
            "required": [
                "organizationCode"
            ],
            "type": "object",
            "properties": {
                "organizationCode": {
                    "description": "The organization group code.",
                    "maxLength": 10,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The organization company name.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrganizationCreateRequest": {
            "description": "The data on the organization.",
            "required": [
                "organizationCode"
            ],
            "type": "object",
            "properties": {
                "sendNotification": {
                    "description": "Send agency activation notification.",
                    "type": "boolean",
                    "example": false
                },
                "organizationCode": {
                    "description": "The organization code.",
                    "maxLength": 10,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "externalAccounts": {
                    "description": "External accounts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationExternalAccountRequest"
                    }
                },
                "type": {
                    "description": "Organization type.",
                    "enum": [
                        "Default",
                        "Master",
                        "Carrier",
                        "TravelAgency",
                        "ThirdParty"
                    ],
                    "type": "string"
                },
                "commissionRates": {
                    "description": "Commission rates.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationCommissionRate"
                    }
                },
                "configuration": {
                    "$ref": "#/definitions/OrganizationConfigurationv2",
                    "description": "Advanced configuration values."
                },
                "company": {
                    "$ref": "#/definitions/CompanyDetails",
                    "description": "The company details."
                },
                "status": {
                    "description": "The organization status.",
                    "enum": [
                        "Default",
                        "Active",
                        "Cancelled",
                        "Pending"
                    ],
                    "type": "string"
                },
                "contact": {
                    "$ref": "#/definitions/ContactDetails",
                    "description": "The contact details."
                },
                "parentOrganizationCode": {
                    "description": "The parent organization code.",
                    "maxLength": 10,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "statementNote": {
                    "description": "The statement note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lastStatementDate": {
                    "format": "date-time",
                    "description": "The last statement date.",
                    "type": "string"
                }
            }
        },
        "OrganizationExternalAccountRequest": {
            "description": "The data for an organizations external account.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the external account.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "routingNumber": {
                    "description": "The routing number.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "accountNumber": {
                    "description": "The account number.",
                    "maxLength": 34,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "bankIdentifierCode": {
                    "description": "The band identifier code (BIC).",
                    "maxLength": 16,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "internationalBankAccountNumber": {
                    "description": "The international bank account number or IBAN.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "notes": {
                    "description": "The notes.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrganizationCommissionRate": {
            "description": "The commission rate details of an organization.",
            "type": "object",
            "properties": {
                "commissionRateCode": {
                    "description": "Commission rate code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "directRate": {
                    "format": "double",
                    "description": "The direct rate.",
                    "type": "number"
                },
                "gdsRate": {
                    "format": "double",
                    "description": "The Gds rate.",
                    "type": "number"
                },
                "webRate": {
                    "format": "double",
                    "description": "The web rate.",
                    "type": "number"
                },
                "apiRate": {
                    "format": "double",
                    "description": "The Api rate.",
                    "type": "number"
                },
                "addOnRate": {
                    "format": "double",
                    "description": "The add on rate.",
                    "type": "number"
                }
            }
        },
        "OrganizationConfigurationv2": {
            "description": "The configuration details of an organization.",
            "type": "object",
            "properties": {
                "cultureCode": {
                    "description": "The culture code.",
                    "maxLength": 17,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "commissionable": {
                    "description": "Commissionable.",
                    "type": "boolean",
                    "example": false
                },
                "recalculateCommission": {
                    "description": "Recalculate commission.",
                    "type": "boolean",
                    "example": false
                },
                "recallCommission": {
                    "description": "Recall commission.",
                    "type": "boolean",
                    "example": false
                },
                "nettedTotal": {
                    "description": "Netted total.",
                    "type": "boolean",
                    "example": false
                },
                "gdsEmailItinerary": {
                    "description": "Gds email itinerary.",
                    "enum": [
                        "NoDistribution",
                        "UseOrganizationEmailOnly",
                        "UseMessageEmailOnly",
                        "UseMessageEmail"
                    ],
                    "type": "string"
                },
                "sourceIsInternal": {
                    "description": "Organization source is internal. Otherwise its external.",
                    "type": "boolean",
                    "example": false
                },
                "sourceIsDeleted": {
                    "description": "Organization source is deleted. Otherwise its active.",
                    "type": "boolean",
                    "example": false
                },
                "traceQueueCode": {
                    "description": "The trace queue code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "referralType": {
                    "description": "Referral type.",
                    "enum": [
                        "Default",
                        "Allowed",
                        "AllowedWithUrlMatch",
                        "NotAllowed"
                    ],
                    "type": "string"
                }
            }
        },
        "CompanyDetails": {
            "description": "The organization company details of an organization.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The organization name.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The address of the organization."
                },
                "url": {
                    "description": "The website url of the organization.",
                    "maxLength": 2048,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "emailAddress": {
                    "description": "The email address.",
                    "type": "string",
                    "example": ""
                },
                "internalNote": {
                    "description": "Internal note.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "externalNote": {
                    "description": "External note.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "phoneNumbers": {
                    "description": "The available phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                }
            }
        },
        "ContactDetails": {
            "description": "The contact details for an organization.",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The contact name."
                },
                "phoneNumbers": {
                    "description": "The available contact phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                }
            }
        },
        "Organizationv2": {
            "description": "The base data on the organization.",
            "required": [
                "organizationCode"
            ],
            "type": "object",
            "properties": {
                "externalAccounts": {
                    "description": "External accounts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationExternalAccountv2"
                    }
                },
                "organizationCode": {
                    "description": "The organization code.",
                    "maxLength": 10,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "commissionRates": {
                    "description": "Commission rates.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationCommissionRate"
                    }
                },
                "type": {
                    "description": "Organization type.",
                    "enum": [
                        "Default",
                        "Master",
                        "Carrier",
                        "TravelAgency",
                        "ThirdParty"
                    ],
                    "type": "string"
                },
                "company": {
                    "$ref": "#/definitions/CompanyDetails",
                    "description": "The company details."
                },
                "configuration": {
                    "$ref": "#/definitions/OrganizationConfigurationv2",
                    "description": "Advanced configuration values."
                },
                "contact": {
                    "$ref": "#/definitions/ContactDetails",
                    "description": "The contact details."
                },
                "status": {
                    "description": "The organization status.",
                    "enum": [
                        "Default",
                        "Active",
                        "Cancelled",
                        "Pending"
                    ],
                    "type": "string"
                },
                "parentOrganizationCode": {
                    "description": "The parent organization code.",
                    "maxLength": 10,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "statementNote": {
                    "description": "The statement note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lastStatementDate": {
                    "format": "date-time",
                    "description": "The last statement date.",
                    "type": "string"
                }
            }
        },
        "OrganizationExternalAccountv2": {
            "description": "The data for an organizations external account.",
            "type": "object",
            "properties": {
                "externalAccountKey": {
                    "description": "The unique key for the external account.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name of the external account.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "routingNumber": {
                    "description": "The routing number.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "accountNumber": {
                    "description": "The account number.",
                    "maxLength": 34,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "bankIdentifierCode": {
                    "description": "The band identifier code (BIC).",
                    "maxLength": 16,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "internationalBankAccountNumber": {
                    "description": "The international bank account number or IBAN.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "notes": {
                    "description": "The notes.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrganizationEditRequest": {
            "description": "The base data on the organization.",
            "required": [
                "organizationCode"
            ],
            "type": "object",
            "properties": {
                "company": {
                    "$ref": "#/definitions/CompanyEditDetails",
                    "description": "The company details."
                },
                "organizationCode": {
                    "description": "The organization code.",
                    "maxLength": 10,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "contact": {
                    "$ref": "#/definitions/ContactEditDetails",
                    "description": "The contact details."
                },
                "type": {
                    "description": "Organization type.",
                    "enum": [
                        "Default",
                        "Master",
                        "Carrier",
                        "TravelAgency",
                        "ThirdParty"
                    ],
                    "type": "string"
                },
                "configuration": {
                    "$ref": "#/definitions/OrganizationConfigurationv2",
                    "description": "Advanced configuration values."
                },
                "status": {
                    "description": "The organization status.",
                    "enum": [
                        "Default",
                        "Active",
                        "Cancelled",
                        "Pending"
                    ],
                    "type": "string"
                },
                "parentOrganizationCode": {
                    "description": "The parent organization code.",
                    "maxLength": 10,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "statementNote": {
                    "description": "The statement note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lastStatementDate": {
                    "format": "date-time",
                    "description": "The last statement date.",
                    "type": "string"
                }
            }
        },
        "CompanyEditDetails": {
            "description": "The organization company details of an organization.",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The organization name.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The address of the organization."
                },
                "url": {
                    "description": "The website url of the organization.",
                    "maxLength": 2048,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "emailAddress": {
                    "description": "The email address.",
                    "type": "string",
                    "example": ""
                },
                "internalNote": {
                    "description": "Internal note.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "externalNote": {
                    "description": "External note.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ContactEditDetails": {
            "description": "The contact details for an organization.",
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The contact name."
                }
            }
        },
        "DeltaMapper[OrganizationEditRequest]": {
            "$ref": "#/definitions/OrganizationEditRequest"
        },
        "OrganizationAccount": {
            "description": "The organization account model.",
            "type": "object",
            "properties": {
                "collection": {
                    "$ref": "#/definitions/AccountCollectionBase",
                    "description": "The organization account collection."
                },
                "accountKey": {
                    "description": "The account key.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "totalAvailable": {
                    "format": "double",
                    "description": "The summed total of all currently available credit amounts for the account.",
                    "type": "number"
                },
                "owner": {
                    "description": "The account owner type.",
                    "enum": [
                        "Organization",
                        "Personnal",
                        "Booking",
                        "Unknown"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "The account type.",
                    "enum": [
                        "Credit",
                        "Prepaid",
                        "Supplementary",
                        "Dependent",
                        "Unknown"
                    ],
                    "type": "string"
                },
                "status": {
                    "description": "The account status.",
                    "enum": [
                        "Open",
                        "Closed",
                        "AgencyInactive",
                        "Unknown"
                    ],
                    "type": "string"
                },
                "totalAmount": {
                    "format": "double",
                    "description": "The total amount.",
                    "type": "number"
                },
                "foreignAvailable": {
                    "format": "double",
                    "description": "The foreign currency available.",
                    "type": "number"
                },
                "foreignCurrencyCode": {
                    "description": "The foreign currency code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "AccountCollectionBase": {
            "description": "The account collection base model.",
            "type": "object",
            "properties": {
                "accountCollectionKey": {
                    "description": "The unique account collection key.",
                    "type": "string",
                    "example": ""
                },
                "available": {
                    "format": "double",
                    "description": "The available amount.",
                    "type": "number"
                },
                "amount": {
                    "format": "double",
                    "description": "The total amount.",
                    "type": "number"
                }
            }
        },
        "CreateOrganizationAccountRequest": {
            "description": "The create organization account request model.",
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The account currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "totalAmount": {
                    "format": "double",
                    "description": "The total amount of the account.",
                    "type": "number"
                },
                "type": {
                    "description": "The allowed account types for account creation.",
                    "enum": [
                        "Credit",
                        "Prepaid",
                        "Supplementary"
                    ],
                    "type": "string"
                },
                "note": {
                    "description": "The optional note to associate with the account creation.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrganizationRecord": {
            "description": "The data on the user related agent's organization.",
            "required": [
                "organizationCode"
            ],
            "type": "object",
            "properties": {
                "organizationCode": {
                    "description": "The organization code.",
                    "maxLength": 10,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "Organization type.",
                    "enum": [
                        "Default",
                        "Master",
                        "Carrier",
                        "TravelAgency",
                        "ThirdParty"
                    ],
                    "type": "string"
                },
                "company": {
                    "$ref": "#/definitions/CompanyDetailsRecord",
                    "description": "The company details."
                },
                "contact": {
                    "$ref": "#/definitions/ContactDetails",
                    "description": "The contact details."
                },
                "status": {
                    "description": "The organization status.",
                    "enum": [
                        "Default",
                        "Active",
                        "Cancelled",
                        "Pending"
                    ],
                    "type": "string"
                },
                "parentOrganizationCode": {
                    "description": "The parent organization code.",
                    "maxLength": 10,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "CompanyDetailsRecord": {
            "description": "The organization company details record results.",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The organization name.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The address of the organization."
                },
                "url": {
                    "description": "The website url of the organization.",
                    "maxLength": 2048,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "emailAddress": {
                    "description": "The email address.",
                    "type": "string",
                    "example": ""
                },
                "phoneNumbers": {
                    "description": "The available phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhoneNumber"
                    }
                }
            }
        },
        "OrganizationRefundRequest": {
            "description": "Defines information needed for an organization account refund.",
            "required": [
                "parentPaymentKey",
                "amount",
                "organizationCode"
            ],
            "type": "object",
            "properties": {
                "parentPaymentKey": {
                    "description": "The payment identifier used if this refund is being reversed from an existing payment.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount to apply.",
                    "type": "number"
                },
                "paymentFields": {
                    "description": "Dynamic field information used for validation related to the specific payment type.\r\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "currencyCode": {
                    "description": "The currency code. This will default to the bookings currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "organizationCode": {
                    "description": "The organization code account number to credit to.",
                    "maxLength": 34,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "OrganizationTransactionRequest": {
            "description": "The organization account transaction request.",
            "required": [
                "amount",
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The transaction types for an organization account.",
                    "enum": [
                        "Default",
                        "Payment",
                        "Adjustment",
                        "Supplementary"
                    ],
                    "type": "string"
                },
                "amount": {
                    "format": "double",
                    "description": "The credit account transaction amount.",
                    "type": "number"
                },
                "currencyCode": {
                    "description": "The credit account transaction currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The credit account transaction note.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerDetails": {
            "description": "The passenger details model.",
            "type": "object",
            "properties": {
                "passengers": {
                    "description": "The list of passenger detail information.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerDetail"
                    }
                },
                "summary": {
                    "$ref": "#/definitions/PassengerDetailsSummary",
                    "description": "The manifest passenger details summary."
                }
            }
        },
        "PassengerDetail": {
            "description": "The passenger detail model.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "The current status of the booking.",
                    "enum": [
                        "Default",
                        "Hold",
                        "Confirmed",
                        "Closed",
                        "HoldCanceled",
                        "PendingArchive",
                        "Archived"
                    ],
                    "type": "string"
                },
                "recordLocator": {
                    "description": "The record locator.",
                    "type": "string",
                    "example": ""
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The initial date and time of the booking.",
                    "type": "string"
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The passenger name."
                },
                "profileStatus": {
                    "description": "The profile status on the booking.",
                    "enum": [
                        "Default",
                        "KnownIndividual",
                        "ResolutionGroup",
                        "SelecteeGroup",
                        "NotUsed",
                        "FailureGroup",
                        "RandomSelectee",
                        "Exempt"
                    ],
                    "type": "string"
                },
                "infantTicketNumber": {
                    "description": "The ticket number of the infant with the passenger.",
                    "type": "string",
                    "example": ""
                },
                "passengerId": {
                    "format": "int64",
                    "description": "The unique passenger ID.",
                    "type": "integer"
                },
                "ticketNumber": {
                    "description": "The ticket number of the passenger.",
                    "type": "string",
                    "example": ""
                },
                "weightCategory": {
                    "description": "The weight category assigned to this passenger.",
                    "enum": [
                        "Male",
                        "Female",
                        "Child"
                    ],
                    "type": "string"
                },
                "ticketIndicator": {
                    "description": "The ticket type of the passenger.",
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "The departure station code.",
                    "type": "string",
                    "example": ""
                },
                "ssrCodes": {
                    "description": "The list of SSR codes associated with this passenger.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "destination": {
                    "description": "The arrival station code.",
                    "type": "string",
                    "example": ""
                },
                "tripType": {
                    "description": "The current assigned trip type.",
                    "enum": [
                        "None",
                        "OneWay",
                        "RoundTrip",
                        "HalfRound",
                        "OpenJaw",
                        "CircleTrip",
                        "All"
                    ],
                    "type": "string"
                },
                "segmentBookingStatus": {
                    "description": "The passenger segment booking status.",
                    "type": "string",
                    "example": ""
                },
                "connectingFlight": {
                    "description": "The connecting flight number if appropriate.",
                    "type": "string",
                    "example": ""
                },
                "connectingStation": {
                    "description": "The connecting station code if appropriate.",
                    "type": "string",
                    "example": ""
                },
                "finalDestination": {
                    "description": "The final destination station code.",
                    "type": "string",
                    "example": ""
                },
                "paymentMethods": {
                    "description": "The list of payment codes for the booking.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "comments": {
                    "description": "The list of the manifest comments.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "infant": {
                    "$ref": "#/definitions/InfantBase",
                    "description": "The infant associated with the passenger."
                },
                "customerProgram": {
                    "$ref": "#/definitions/Program",
                    "description": "The customer program associated with the passenger."
                },
                "verifiedReference": {
                    "description": "The reference of who or what verified the passenger's documents.",
                    "type": "string",
                    "example": ""
                },
                "guestValueLevel": {
                    "description": "The passenger guest value level.",
                    "type": "string"
                },
                "paidStatus": {
                    "description": "The paid status for the passenger.",
                    "enum": [
                        "UnderPaid",
                        "PaidInFull",
                        "OverPaid"
                    ],
                    "type": "string"
                }
            }
        },
        "PassengerDetailsSummary": {
            "description": "The manifest passenger datails summary.",
            "type": "object",
            "properties": {
                "totalConfirmedMales": {
                    "format": "int32",
                    "description": "The total number of confirmed male passengers.",
                    "type": "integer"
                },
                "totalConfirmedFemales": {
                    "format": "int32",
                    "description": "The total number of confirmed female passengers.",
                    "type": "integer"
                },
                "totalConfirmedChildren": {
                    "format": "int32",
                    "description": "The total number of confirmed children.",
                    "type": "integer"
                },
                "totalConfirmedInfants": {
                    "format": "int32",
                    "description": "The total number of confirmed infants.",
                    "type": "integer"
                },
                "totalWaitListConfirmedMales": {
                    "format": "int32",
                    "description": "The total number of wait list confirmed male passengers.",
                    "type": "integer"
                },
                "totalWaitListConfirmedFemales": {
                    "format": "int32",
                    "description": "The total number of wait list confirmed female passengers.",
                    "type": "integer"
                },
                "totalWaitListConfirmedChildren": {
                    "format": "int32",
                    "description": "The total number of wait list confirmed children.",
                    "type": "integer"
                },
                "totalWaitListConfirmedInfants": {
                    "format": "int32",
                    "description": "The total number of wait list confirmed infants.",
                    "type": "integer"
                },
                "totalUnconfirmedMales": {
                    "format": "int32",
                    "description": "The total number of unconfirmed male passengers.",
                    "type": "integer"
                },
                "totalUnconfirmedFemales": {
                    "format": "int32",
                    "description": "The total number of unconfirmed female passengers.",
                    "type": "integer"
                },
                "totalUnconfirmedChildren": {
                    "format": "int32",
                    "description": "The total number of unconfirmed children.",
                    "type": "integer"
                },
                "totalUnconfirmedInfants": {
                    "format": "int32",
                    "description": "The total number of unconfirmed infants.",
                    "type": "integer"
                }
            }
        },
        "InfantBase": {
            "description": "The base class for the infant.",
            "type": "object",
            "properties": {
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth of the infant.",
                    "type": "string"
                },
                "gender": {
                    "description": "The gender of the passenger.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name of the passenger."
                }
            }
        },
        "PassengerDiscount": {
            "description": "The passenger discount model.",
            "type": "object",
            "properties": {
                "passengerDiscountCode": {
                    "description": "The passenger discount code.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The Name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerDiscountType": {
                    "description": "The passenger discount type.",
                    "enum": [
                        "Default",
                        "Regular",
                        "Loyalty"
                    ],
                    "type": "string"
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                },
                "allowed": {
                    "description": "The allowed.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PassengerAddressCreateRequest": {
            "description": "Defines a passenger address create request.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "The addresses APIS status.",
                    "enum": [
                        "Residence",
                        "InCountry",
                        "Emergency"
                    ],
                    "type": "string"
                },
                "companyName": {
                    "description": "Company name associated with this address.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "phone": {
                    "description": "Phone number associated with this address.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "stationCode": {
                    "description": "Station code associated with this address.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PassengerAddressEditRequest": {
            "description": "Defines a passenger address edit request.",
            "type": "object",
            "properties": {
                "companyName": {
                    "description": "Company name associated with this address.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "phone": {
                    "description": "Phone number associated with this address.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "stationCode": {
                    "description": "Station code associated with this address.",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeltaMapper[PassengerAddressEditRequest]": {
            "$ref": "#/definitions/PassengerAddressEditRequest"
        },
        "PassengerTypePriceBreakdown": {
            "description": "Defines the unique passenger type level pricing breakdown.",
            "type": "object",
            "properties": {
                "passengerTypeCode": {
                    "description": "The passenger type code.",
                    "type": "string",
                    "example": ""
                },
                "services": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of the service fees."
                },
                "specialServices": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of the special service requests."
                },
                "seats": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of seat fees."
                },
                "upgrades": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of upgrade fees."
                },
                "spoilage": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of spoilage fees."
                },
                "nameChanges": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of name change fees."
                },
                "convenience": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of convenience fees."
                },
                "infant": {
                    "$ref": "#/definitions/ChargeBreakdown",
                    "description": "The charge breakdown of infant fees."
                }
            }
        },
        "PassengerBase": {
            "description": "Defines the base passenger details.",
            "type": "object",
            "properties": {
                "customerNumber": {
                    "description": "The passenger customer number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The passenger's name."
                },
                "discountCode": {
                    "description": "The discount code associated with the passenger type.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "program": {
                    "$ref": "#/definitions/PassengerProgram",
                    "description": "The passenger programs."
                },
                "info": {
                    "$ref": "#/definitions/PassengerInformation",
                    "description": "Additional passenger information."
                }
            }
        },
        "DeltaMapper[PassengerBase]": {
            "$ref": "#/definitions/PassengerBase"
        },
        "PassengerSeatAssignment": {
            "description": "The passenger seat assignment model.",
            "type": "object",
            "properties": {
                "passengerNumber": {
                    "format": "int32",
                    "description": "The passenger number.",
                    "type": "integer"
                },
                "recordLocator": {
                    "description": "The record locator.",
                    "type": "string",
                    "example": ""
                },
                "passengerType": {
                    "description": "The passenger type.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The passenger name."
                },
                "classOfService": {
                    "description": "The class of service.",
                    "type": "string",
                    "example": ""
                },
                "infantTicketNumber": {
                    "description": "The ticket number of the infant with the passenger.",
                    "type": "string",
                    "example": ""
                },
                "unitDesignator": {
                    "description": "The unit designator.",
                    "type": "string",
                    "example": ""
                },
                "ticketNumber": {
                    "description": "The ticket number of the passenger.",
                    "type": "string",
                    "example": ""
                },
                "liftStatus": {
                    "description": "The status of the flight leg.  It indicates whether the coupon has been used, and\r\nif the passenger has been checked in, has boarded the flight or not.",
                    "enum": [
                        "Default",
                        "CheckedIn",
                        "Boarded",
                        "NoShow"
                    ],
                    "type": "string"
                },
                "ticketIndicator": {
                    "description": "The ticket type of the passenger.",
                    "type": "string",
                    "example": ""
                },
                "baggageCount": {
                    "format": "int32",
                    "description": "The number of bags associated with the passenger.",
                    "maximum": 99,
                    "minimum": 0,
                    "type": "integer"
                },
                "ssrCodes": {
                    "description": "The list of SSR codes associated with this passenger.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "DeltaMapper[Infant]": {
            "$ref": "#/definitions/Infant"
        },
        "Infant": {
            "description": "Model representing an infant.",
            "type": "object",
            "properties": {
                "nationality": {
                    "description": "The nationality of the passenger.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth of the infant.",
                    "type": "string"
                },
                "residentCountry": {
                    "description": "The residentCountry of the passenger.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "gender": {
                    "description": "The gender of the passenger.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name of the passenger."
                }
            }
        },
        "PassengerInfantCreateRequest": {
            "description": "Model representing infant data that can be set.",
            "type": "object",
            "properties": {
                "nationality": {
                    "description": "The nationality of the passenger.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The date of birth of the infant.",
                    "type": "string"
                },
                "travelDocuments": {
                    "description": "Travel Documents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerTravelDocument"
                    }
                },
                "residentCountry": {
                    "description": "The residentCountry of the passenger.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "gender": {
                    "description": "The gender of the passenger.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The name of the passenger."
                }
            }
        },
        "TravelDocumentCreateRequest": {
            "description": "Defines a create travel documents request.",
            "required": [
                "documentTypeCode",
                "number"
            ],
            "type": "object",
            "properties": {
                "documentTypeCode": {
                    "description": "The unique travel document type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "birthCountry": {
                    "description": "The BirthCountry property.",
                    "type": "string",
                    "example": ""
                },
                "issuedByCode": {
                    "description": "The issuer code for the travel document (country code).",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The Name property."
                },
                "nationality": {
                    "description": "The Nationality property.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The date when this travel document expires.",
                    "type": "string"
                },
                "number": {
                    "description": "The travel document number.",
                    "maxLength": 35,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "issuedDate": {
                    "format": "date-time",
                    "description": "The date this travel document was issued.",
                    "type": "string"
                }
            }
        },
        "TravelDocumentEditRequest": {
            "description": "Defines the edit travel document request.",
            "required": [
                "number"
            ],
            "type": "object",
            "properties": {
                "birthCountry": {
                    "description": "The BirthCountry property.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The Name property."
                },
                "nationality": {
                    "description": "The Nationality property.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The date when this travel document expires.",
                    "type": "string"
                },
                "number": {
                    "description": "The travel document number.",
                    "maxLength": 35,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "issuedDate": {
                    "format": "date-time",
                    "description": "The date this travel document was issued.",
                    "type": "string"
                }
            }
        },
        "DeltaMapper[TravelDocumentEditRequest]": {
            "$ref": "#/definitions/TravelDocumentEditRequest"
        },
        "PassengerType": {
            "description": "The passenger type model.",
            "required": [
                "passengerTypeCode"
            ],
            "type": "object",
            "properties": {
                "nonAdult": {
                    "description": "The non-adult for the passenger type.",
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "passengerTypeCode": {
                    "description": "The code for the passenger type.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name for the passenger type.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "allowed": {
                    "description": "The allowed flag for the passenger type.",
                    "type": "boolean",
                    "example": false
                },
                "inActive": {
                    "description": "The inactive flag for the passenger type.",
                    "type": "boolean",
                    "example": false
                },
                "typeIndicator": {
                    "description": "The type indicator specifying the age group this belongs to.",
                    "enum": [
                        "Adult",
                        "Infant",
                        "Child",
                        "NonAdult"
                    ],
                    "type": "string"
                },
                "minimumAge": {
                    "format": "int32",
                    "description": "The minimum age for the passenger type.",
                    "type": "integer"
                },
                "maximumAge": {
                    "format": "int32",
                    "description": "The maximum age for the passenger type.",
                    "type": "integer"
                }
            }
        },
        "CustomerCreditRefundRequest": {
            "description": "Defines information needed for a customer credit refund.",
            "required": [
                "parentPaymentKey",
                "amount",
                "customerNumber"
            ],
            "type": "object",
            "properties": {
                "parentPaymentKey": {
                    "description": "The payment identifier used if this refund is being reversed from an existing payment.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount to apply.",
                    "type": "number"
                },
                "paymentFields": {
                    "description": "Dynamic field information used for validation related to the specific payment type.\r\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "currencyCode": {
                    "description": "The currency code. This will default to the bookings currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "customerNumber": {
                    "description": "The customer account number to credit to.",
                    "maxLength": 34,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ApplyCreditAccountRequest": {
            "description": "Defines a request to apply credit for an account.",
            "required": [
                "amount",
                "referenceNumber"
            ],
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "description": "The amount of credit.",
                    "type": "number"
                },
                "referenceNumber": {
                    "description": "The account reference. This will be the record locator, customer account number, or organization code depending on\r\nthe type.",
                    "maxLength": 20,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code of the account.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "Defines the type of credit being applied.",
                    "enum": [
                        "Customer",
                        "Booking",
                        "Organization"
                    ],
                    "type": "string"
                }
            }
        },
        "PaymentFeeResponse": {
            "description": "Defines information for the payment fee response.",
            "required": [
                "feeAmount"
            ],
            "type": "object",
            "properties": {
                "feeAmount": {
                    "format": "double",
                    "description": "The amount being payed.",
                    "type": "number"
                },
                "isFixedAmount": {
                    "description": "Is a fixed amount.",
                    "type": "boolean",
                    "example": false
                },
                "passengerFees": {
                    "description": "Passenger fee details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerFee"
                    }
                }
            }
        },
        "PaymentMethod": {
            "description": "The payment method model.",
            "required": [
                "paymentMethodCode",
                "name"
            ],
            "type": "object",
            "properties": {
                "paymentMethodCode": {
                    "description": "The payment method code for this payment method.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "allowDeposit": {
                    "description": "The allow deposit flag for this payment method.",
                    "type": "boolean",
                    "example": false
                },
                "allowed": {
                    "description": "<b>Deprecated</b> - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.",
                    "type": "boolean",
                    "example": false
                },
                "allowZeroAmount": {
                    "description": "The allow zero amount flag for this payment method.",
                    "type": "boolean",
                    "example": false
                },
                "commissionable": {
                    "description": "The commissionable flag for this payment method.",
                    "type": "boolean",
                    "example": false
                },
                "dccType": {
                    "description": "The DCC type for this payment method.",
                    "enum": [
                        "None",
                        "ZeroRate",
                        "FullAmount"
                    ],
                    "type": "string"
                },
                "disallowPartialRefund": {
                    "description": "The disallow partial refund flag for this payment method.",
                    "type": "boolean",
                    "example": false
                },
                "feeCode": {
                    "description": "The fee code for this payment method.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The inactive flag for this payment method.",
                    "type": "boolean",
                    "example": false
                },
                "maxInstallments": {
                    "format": "int32",
                    "description": "The max installments for this payment method.",
                    "type": "integer"
                },
                "name": {
                    "description": "The name for this payment method.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "paymentMethodFields": {
                    "description": "The payment method fields for this payment method.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/PaymentMethodField"
                        }
                    }
                },
                "paymentMethodType": {
                    "description": "The payment method type for this payment method.",
                    "enum": [
                        "ExternalAccount",
                        "PrePaid",
                        "AgencyAccount",
                        "CustomerAccount",
                        "Voucher",
                        "Loyalty"
                    ],
                    "type": "string"
                },
                "paymentRefundType": {
                    "description": "The payment refund type for this payment method.",
                    "enum": [
                        "NotAllowed",
                        "LineItemLevel",
                        "AccountLevel",
                        "BookingLevel"
                    ],
                    "type": "string"
                },
                "proportionalRefund": {
                    "description": "The proportional refund flag for this payment method.",
                    "type": "boolean",
                    "example": false
                },
                "refundableByAgent": {
                    "description": "The refundable by agent flag for this payment method.",
                    "type": "boolean",
                    "example": false
                },
                "refundCurrencyControl": {
                    "description": "The refund currency control for this payment method.",
                    "enum": [
                        "UseCollectedCurrency",
                        "UseQuotedCurrency"
                    ],
                    "type": "string"
                },
                "restrictionHours": {
                    "format": "int32",
                    "description": "The hours of restriction for this payment method.",
                    "type": "integer"
                },
                "systemControlled": {
                    "description": "The system controlled flag for this payment method.",
                    "type": "boolean",
                    "example": false
                },
                "traceQueueCode": {
                    "description": "The trace queue code for this payment method.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "validationRequired": {
                    "description": "The validation required flag for this payment method.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PaymentMethodField": {
            "description": "The payment method field model.",
            "required": [
                "paymentMethodFieldCode",
                "name",
                "paymentMethodCode"
            ],
            "type": "object",
            "properties": {
                "paymentMethodFieldCode": {
                    "description": "The code for this payment field",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "bookingPaymentField": {
                    "description": "The field category for this payment field.",
                    "enum": [
                        "Miscellaneous",
                        "AccountNumber",
                        "Amount",
                        "ExpirationDate",
                        "CurrencyCode",
                        "PaymentText",
                        "PrepaidApprovalCode",
                        "Deposit"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "The name of this payment field",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ordinal": {
                    "format": "int32",
                    "description": "The order number for this payment field.",
                    "type": "integer"
                },
                "paymentMethodCode": {
                    "description": "The payment method code for this payment field.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "paymentMethodType": {
                    "description": "The payment method type for this payment field.",
                    "enum": [
                        "ExternalAccount",
                        "PrePaid",
                        "AgencyAccount",
                        "CustomerAccount",
                        "Voucher",
                        "Loyalty"
                    ],
                    "type": "string"
                },
                "persistData": {
                    "description": "The persist data flag for this payment field.",
                    "type": "boolean",
                    "example": false
                },
                "refundUiState": {
                    "description": "The refund ui state for this payment field.",
                    "enum": [
                        "Enabled",
                        "Disabled",
                        "Hidden"
                    ],
                    "type": "string"
                },
                "requiredType": {
                    "description": "The required type for this payment field.",
                    "enum": [
                        "Required",
                        "Optional",
                        "NotAllowed"
                    ],
                    "type": "string"
                },
                "valueMaxLength": {
                    "format": "int32",
                    "description": "The value max length for this payment field.",
                    "type": "integer"
                },
                "valueMinLength": {
                    "format": "int32",
                    "description": "The value min length for this payment field.",
                    "type": "integer"
                },
                "valueRegEx": {
                    "description": "The Regular Expression for this payment field.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "valueType": {
                    "description": "The value type for this payment field.",
                    "enum": [
                        "Unknown",
                        "String",
                        "UpperCaseString",
                        "Numeric",
                        "Alphanumeric",
                        "Amount",
                        "Date",
                        "Mod10",
                        "Name",
                        "Address",
                        "State",
                        "Zip",
                        "Country",
                        "City",
                        "Boolean"
                    ],
                    "type": "string"
                }
            }
        },
        "PaymentRefundRequest": {
            "description": "Defines information needed for a generic voucher payment requested to be added to the booking in state.",
            "required": [
                "parentPaymentKey",
                "amount",
                "paymentMethodCode"
            ],
            "type": "object",
            "properties": {
                "parentPaymentKey": {
                    "description": "The payment identifier used if this refund is being reversed from an existing payment.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount to apply.",
                    "type": "number"
                },
                "paymentFields": {
                    "description": "Dynamic field information used for validation related to the specific payment type.\r\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "currencyCode": {
                    "description": "The currency code. This will default to the bookings currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "paymentMethodCode": {
                    "description": "Payment method code.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Person": {
            "description": "Defines a person.",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "personKey": {
                    "description": "The unique person key.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/PersonName",
                    "description": "The persons true name."
                },
                "customerNumber": {
                    "description": "The unique person customer number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of person.",
                    "enum": [
                        "None",
                        "Customer",
                        "Agent"
                    ],
                    "type": "string"
                },
                "emailAddresses": {
                    "description": "The collection of registered email address.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonEmail"
                    }
                },
                "status": {
                    "description": "The status of the person.",
                    "enum": [
                        "Active",
                        "Terminated",
                        "Suspended"
                    ],
                    "type": "string"
                },
                "phoneNumbers": {
                    "description": "The collection of registered phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonPhoneNumber"
                    }
                },
                "details": {
                    "$ref": "#/definitions/PersonBasicInformation",
                    "description": "The person's basic information."
                },
                "addresses": {
                    "description": "The collection of known addresses.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonAddress"
                    }
                },
                "notificationPreference": {
                    "description": "The person's notification preference.",
                    "enum": [
                        "None",
                        "Promotional"
                    ],
                    "type": "string"
                },
                "storedPayments": {
                    "description": "The collection of registered stored payments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonStoredPayment"
                    }
                },
                "travelDocuments": {
                    "description": "The collection of registered travel documents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonTravelDocument"
                    }
                },
                "programs": {
                    "description": "The collection of enrolled customer programs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonCustomerProgram"
                    }
                },
                "comments": {
                    "description": "The collection of comments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonComment"
                    }
                },
                "preferences": {
                    "description": "The collection of preferences.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonPreference"
                    }
                },
                "aliases": {
                    "description": "The collection of alternate names for the person.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonAlias"
                    }
                }
            }
        },
        "PersonName": {
            "description": "Defines a person name.",
            "type": "object",
            "properties": {
                "personNameKey": {
                    "description": "The unique person name key.",
                    "type": "string",
                    "example": ""
                },
                "first": {
                    "description": "The given first name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "middle": {
                    "description": "The given middle name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "last": {
                    "description": "The given last name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "title": {
                    "description": "The title.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "suffix": {
                    "description": "The suffix.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonEmail": {
            "description": "Defines a specific person email.",
            "required": [
                "type",
                "email"
            ],
            "type": "object",
            "properties": {
                "personEmailKey": {
                    "description": "The unique email key.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type code of the email address.",
                    "type": "string"
                },
                "email": {
                    "description": "The email address value.",
                    "maxLength": 266,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "default": {
                    "description": "Flag indicating if the email is the default.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PersonPhoneNumber": {
            "description": "Defines a unique person phone number.",
            "required": [
                "type",
                "number"
            ],
            "type": "object",
            "properties": {
                "personPhoneNumberKey": {
                    "description": "The unique key for the phone number.",
                    "type": "string",
                    "example": ""
                },
                "default": {
                    "description": "Flag indicating if this phone number is the default.",
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "description": "The phone number type.",
                    "enum": [
                        "Other",
                        "Home",
                        "Work",
                        "Mobile",
                        "Fax"
                    ],
                    "type": "string"
                },
                "number": {
                    "description": "The phone number without any formatting characters.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonBasicInformation": {
            "description": "Defines the person's basic information.",
            "type": "object",
            "properties": {
                "gender": {
                    "description": "The person's gender.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "dateOfBirth": {
                    "format": "date-time",
                    "description": "The person's date of birth.",
                    "type": "string"
                },
                "nationality": {
                    "description": "The person's nationality.",
                    "type": "string",
                    "example": ""
                },
                "residentCountry": {
                    "description": "The person's resident country.",
                    "type": "string",
                    "example": ""
                },
                "passengerType": {
                    "description": "The type of passenger the person is.",
                    "type": "string",
                    "example": ""
                },
                "preferredCultureCode": {
                    "description": "The person's preferred culture code.",
                    "type": "string",
                    "example": ""
                },
                "preferredCurrencyCode": {
                    "description": "The person's preferred currency code.",
                    "type": "string",
                    "example": ""
                },
                "nationalIdNumber": {
                    "description": "The person's national ID number.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonAddress": {
            "description": "Defines a unique person address.",
            "required": [
                "addressTypeCode"
            ],
            "type": "object",
            "properties": {
                "personAddressKey": {
                    "description": "The unique person address key.",
                    "type": "string",
                    "example": ""
                },
                "addressTypeCode": {
                    "description": "The type of address.",
                    "type": "string"
                },
                "default": {
                    "description": "Flag indicating if the address is the persons default.",
                    "type": "boolean",
                    "example": false
                },
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonStoredPayment": {
            "description": "Defines a specific person's stored payment.",
            "required": [
                "accountNumber",
                "paymentMethodType",
                "paymentMethodCode"
            ],
            "type": "object",
            "properties": {
                "storedPaymentKey": {
                    "description": "The unique stored payment key.",
                    "type": "string",
                    "example": ""
                },
                "accountNumber": {
                    "description": "The account number.",
                    "maxLength": 34,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "paymentMethodType": {
                    "description": "The type of payment being added.",
                    "enum": [
                        "ExternalAccount",
                        "PrePaid",
                        "AgencyAccount",
                        "CustomerAccount",
                        "Voucher",
                        "Loyalty"
                    ],
                    "type": "string"
                },
                "accountName": {
                    "description": "The name of the account.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The expiration.",
                    "type": "string"
                },
                "paymentMethodCode": {
                    "description": "The payment method code.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "default": {
                    "description": "Indicates if the stored payment is the default.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PersonTravelDocument": {
            "description": "Defines a specific person travel document.",
            "required": [
                "documentTypeCode",
                "number"
            ],
            "type": "object",
            "properties": {
                "personTravelDocumentKey": {
                    "description": "The unique person travel document key.",
                    "type": "string",
                    "example": ""
                },
                "default": {
                    "description": "Flag indicating if the travel document is the default.",
                    "type": "boolean",
                    "example": false
                },
                "documentTypeCode": {
                    "description": "The unique travel document type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "birthCountry": {
                    "description": "The BirthCountry property.",
                    "type": "string",
                    "example": ""
                },
                "issuedByCode": {
                    "description": "The issuer code for the travel document (country code).",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The Name property."
                },
                "nationality": {
                    "description": "The Nationality property.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The date when this travel document expires.",
                    "type": "string"
                },
                "number": {
                    "description": "The travel document number.",
                    "maxLength": 35,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "issuedDate": {
                    "format": "date-time",
                    "description": "The date this travel document was issued.",
                    "type": "string"
                }
            }
        },
        "PersonCustomerProgram": {
            "description": "Defines a person's customer program.",
            "required": [
                "programCode",
                "programNumber"
            ],
            "type": "object",
            "properties": {
                "personCustomerProgramKey": {
                    "description": "The unique person customer program key.",
                    "type": "string",
                    "example": ""
                },
                "pointBalance": {
                    "format": "int32",
                    "description": "The current point balance.",
                    "type": "integer"
                },
                "programCode": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "programNumber": {
                    "description": "The unique program number for the person.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currentYearQualifyingPoints": {
                    "format": "int32",
                    "description": "The current years qualifying points.",
                    "type": "integer"
                },
                "programLevelCode": {
                    "description": "The program level.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "effectiveDate": {
                    "format": "date-time",
                    "description": "The effective date.",
                    "type": "string"
                },
                "currentYearRedeemablePoints": {
                    "format": "int32",
                    "description": "The current years redeemable points.",
                    "type": "integer"
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The expiration date.",
                    "type": "string"
                },
                "lifetimeAccumulatedQualifyingPoints": {
                    "format": "int32",
                    "description": "The lifetime accumulated qualifying points.",
                    "type": "integer"
                },
                "default": {
                    "description": "True if this is set as the default program.",
                    "type": "boolean",
                    "example": false
                },
                "lifetimeAccumulatedRedeemablePoints": {
                    "format": "int32",
                    "description": "The lifetime accumulated redeemable points.",
                    "type": "integer"
                },
                "qualifyingPoints": {
                    "format": "int32",
                    "description": "The qualifying points.",
                    "type": "integer"
                },
                "qualifyingSegments": {
                    "format": "int32",
                    "description": "The qualifying segments.",
                    "type": "integer"
                }
            }
        },
        "PersonComment": {
            "description": "Defines a person comment.",
            "type": "object",
            "properties": {
                "personCommentKey": {
                    "description": "The unique person comment key.",
                    "type": "string",
                    "example": ""
                },
                "text": {
                    "description": "The comments text.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The comment type.",
                    "enum": [
                        "Default",
                        "Itinerary",
                        "Manifest",
                        "Alert",
                        "Archive"
                    ],
                    "type": "string"
                }
            }
        },
        "PersonPreference": {
            "description": "Defines the person preferences.",
            "type": "object",
            "properties": {
                "personPreferenceKey": {
                    "description": "The unique preference key.",
                    "type": "string",
                    "example": ""
                },
                "code": {
                    "description": "The preference code.",
                    "type": "string",
                    "example": ""
                },
                "value": {
                    "description": "The value of the preference.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonAlias": {
            "description": "Defines a person's alternate name that they go by.",
            "type": "object",
            "properties": {
                "personAliasKey": {
                    "description": "The unique person alias key.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of alias.",
                    "enum": [
                        "Alias",
                        "Variant"
                    ],
                    "type": "string"
                },
                "first": {
                    "description": "The given first name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "middle": {
                    "description": "The given middle name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "last": {
                    "description": "The given last name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "title": {
                    "description": "The title.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "suffix": {
                    "description": "The suffix.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonEditRequest": {
            "description": "Defines the person create request.",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The persons true name."
                },
                "type": {
                    "description": "The type of person.",
                    "enum": [
                        "None",
                        "Customer",
                        "Agent"
                    ],
                    "type": "string"
                },
                "status": {
                    "description": "The status of the person.",
                    "enum": [
                        "Active",
                        "Terminated",
                        "Suspended"
                    ],
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/PersonBasicInformation",
                    "description": "The person's basic information."
                },
                "notificationPreference": {
                    "description": "The person's notification preference.",
                    "enum": [
                        "None",
                        "Promotional"
                    ],
                    "type": "string"
                }
            }
        },
        "DeltaMapper[PersonEditRequest]": {
            "$ref": "#/definitions/PersonEditRequest"
        },
        "PersonAddressCreateRequest": {
            "description": "Defines a person address request.",
            "required": [
                "addressTypeCode"
            ],
            "type": "object",
            "properties": {
                "addressTypeCode": {
                    "description": "The type of address.",
                    "type": "string"
                },
                "default": {
                    "description": "Flag indicating if the address is the persons default.",
                    "type": "boolean",
                    "example": false
                },
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonAddressEditRequest": {
            "description": "Defines the person address edit request.",
            "type": "object",
            "properties": {
                "default": {
                    "description": "Flag indicating if the address is the persons default.",
                    "type": "boolean",
                    "example": false
                },
                "lineOne": {
                    "description": "The address line one.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineTwo": {
                    "description": "The address line two.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lineThree": {
                    "description": "The address line 3.",
                    "maxLength": 52,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "provinceState": {
                    "description": "The province state.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "city": {
                    "description": "The city.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "postalCode": {
                    "description": "The postal code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeltaMapper[PersonAddressEditRequest]": {
            "$ref": "#/definitions/PersonAddressEditRequest"
        },
        "PersonAliasRequest": {
            "description": "Defines the person alias request.",
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of alias.",
                    "enum": [
                        "Alias",
                        "Variant"
                    ],
                    "type": "string"
                },
                "first": {
                    "description": "The given first name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "middle": {
                    "description": "The given middle name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "last": {
                    "description": "The given last name.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "title": {
                    "description": "The title.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "suffix": {
                    "description": "The suffix.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeltaMapper[PersonAliasRequest]": {
            "$ref": "#/definitions/PersonAliasRequest"
        },
        "PersonAttachmentType": {
            "description": "The person attachment Type.",
            "required": [
                "personAttachmentTypeCode"
            ],
            "type": "object",
            "properties": {
                "personAttachmentTypeCode": {
                    "description": "The type code.",
                    "type": "string"
                },
                "name": {
                    "description": "The Name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Is In-Active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PersonCommentRequest": {
            "description": "Defines a person comment request.",
            "type": "object",
            "properties": {
                "text": {
                    "description": "The comments text.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The comment type.",
                    "enum": [
                        "Default",
                        "Itinerary",
                        "Manifest",
                        "Alert",
                        "Archive"
                    ],
                    "type": "string"
                }
            }
        },
        "DeltaMapper[PersonCommentRequest]": {
            "$ref": "#/definitions/PersonCommentRequest"
        },
        "PersonCustomerProgramCreateRequest": {
            "description": "Defines a person's customer program create request.",
            "required": [
                "programCode",
                "programNumber"
            ],
            "type": "object",
            "properties": {
                "programCode": {
                    "description": "The program code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "programNumber": {
                    "description": "The unique program number for the person.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "programLevelCode": {
                    "description": "The program level.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "effectiveDate": {
                    "format": "date-time",
                    "description": "The effective date.",
                    "type": "string"
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The expiration date.",
                    "type": "string"
                },
                "default": {
                    "description": "True if this is set as the default program.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PersonCustomerProgramEditRequest": {
            "description": "Defines a person's customer program edit request.",
            "required": [
                "programNumber"
            ],
            "type": "object",
            "properties": {
                "programNumber": {
                    "description": "The unique program number for the person.",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "effectiveDate": {
                    "format": "date-time",
                    "description": "The effective date.",
                    "type": "string"
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The expiration date.",
                    "type": "string"
                },
                "default": {
                    "description": "True if this is set as the default program.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "DeltaMapper[PersonCustomerProgramEditRequest]": {
            "$ref": "#/definitions/PersonCustomerProgramEditRequest"
        },
        "PersonEmailCreateRequest": {
            "description": "Defines the person email create address.",
            "required": [
                "type",
                "email"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type code of the email address.",
                    "type": "string"
                },
                "email": {
                    "description": "The email address value.",
                    "maxLength": 266,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "default": {
                    "description": "Flag indicating if the email is the default.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PersonEmailEditRequest": {
            "description": "Defines the person email edit address.",
            "required": [
                "email"
            ],
            "type": "object",
            "properties": {
                "email": {
                    "description": "The email address value.",
                    "maxLength": 266,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "default": {
                    "description": "Flag indicating if the email is the default.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "DeltaMapper[PersonEmailEditRequest]": {
            "$ref": "#/definitions/PersonEmailEditRequest"
        },
        "PersonInformation": {
            "description": "Defines the a person information.",
            "required": [
                "personInformationTypeCode"
            ],
            "type": "object",
            "properties": {
                "personInformationKey": {
                    "description": "The unique person information key.",
                    "type": "string",
                    "example": ""
                },
                "size": {
                    "format": "int32",
                    "description": "The size of the information data.",
                    "type": "integer"
                },
                "personInformationTypeCode": {
                    "description": "The person information type code.",
                    "type": "string"
                },
                "data": {
                    "description": "The information data.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonInformationCreateRequest": {
            "description": "Defines a person information create request.",
            "required": [
                "personInformationTypeCode"
            ],
            "type": "object",
            "properties": {
                "personInformationTypeCode": {
                    "description": "The person information type code.",
                    "type": "string"
                },
                "data": {
                    "description": "The information data.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonInformationEditRequest": {
            "description": "Defines a person information edit request.",
            "type": "object",
            "properties": {
                "data": {
                    "description": "The information data.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeltaMapper[PersonInformationEditRequest]": {
            "$ref": "#/definitions/PersonInformationEditRequest"
        },
        "PersonInformationType": {
            "description": "The person information type model.",
            "required": [
                "personInformationTypeCode"
            ],
            "type": "object",
            "properties": {
                "personInformationTypeCode": {
                    "description": "The person information type code.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the type.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Is in-active.",
                    "type": "boolean",
                    "example": false
                },
                "schema": {
                    "description": "The data schema of person info type.",
                    "maxLength": 2147483647,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonPhoneNumberRequest": {
            "description": "Defines the the person phone number.",
            "required": [
                "type",
                "number"
            ],
            "type": "object",
            "properties": {
                "default": {
                    "description": "Flag indicating if this phone number is the default.",
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "description": "The phone number type.",
                    "enum": [
                        "Other",
                        "Home",
                        "Work",
                        "Mobile",
                        "Fax"
                    ],
                    "type": "string"
                },
                "number": {
                    "description": "The phone number without any formatting characters.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeltaMapper[PersonPhoneNumberRequest]": {
            "$ref": "#/definitions/PersonPhoneNumberRequest"
        },
        "PersonPreferenceCreateRequest": {
            "description": "Defines a person preference create request.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The preference code.",
                    "type": "string",
                    "example": ""
                },
                "value": {
                    "description": "The value of the preference.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PersonPreferenceEditRequest": {
            "description": "Defines the person preference edit request.",
            "type": "object",
            "properties": {
                "value": {
                    "description": "The value of the preference.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DeltaMapper[PersonPreferenceEditRequest]": {
            "$ref": "#/definitions/PersonPreferenceEditRequest"
        },
        "PersonRecord": {
            "description": "Defines the person record.",
            "type": "object",
            "properties": {
                "personKey": {
                    "description": "The unique person key.",
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The person's type.",
                    "enum": [
                        "None",
                        "Customer",
                        "Agent"
                    ],
                    "type": "string"
                },
                "status": {
                    "description": "The person's status.",
                    "enum": [
                        "Active",
                        "Terminated",
                        "Suspended"
                    ],
                    "type": "string"
                },
                "customerNumber": {
                    "description": "The person's customer number.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The person's name."
                },
                "phoneNumber": {
                    "description": "The person's default phone number.",
                    "type": "string",
                    "example": ""
                },
                "emailAddress": {
                    "description": "The person's default email address.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The person's default address."
                }
            }
        },
        "PersonCreateRequest": {
            "description": "Defines the person create request.",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The persons true name."
                },
                "customerNumber": {
                    "description": "The unique person customer number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The type of person.",
                    "enum": [
                        "None",
                        "Customer",
                        "Agent"
                    ],
                    "type": "string"
                },
                "emailAddresses": {
                    "description": "The collection of registered email address.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonEmailCreateRequest"
                    }
                },
                "status": {
                    "description": "The status of the person.",
                    "enum": [
                        "Active",
                        "Terminated",
                        "Suspended"
                    ],
                    "type": "string"
                },
                "phoneNumbers": {
                    "description": "The collection of registered phone numbers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonPhoneNumberRequest"
                    }
                },
                "details": {
                    "$ref": "#/definitions/PersonBasicInformation",
                    "description": "The person's basic information."
                },
                "addresses": {
                    "description": "The collection of known addresses.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonAddressCreateRequest"
                    }
                },
                "notificationPreference": {
                    "description": "The person's notification preference.",
                    "enum": [
                        "None",
                        "Promotional"
                    ],
                    "type": "string"
                },
                "storedPayments": {
                    "description": "The collection of registered stored payments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonStoredPaymentRequest"
                    }
                },
                "travelDocuments": {
                    "description": "The collection of registered travel documents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonTravelDocumentRequest"
                    }
                },
                "programs": {
                    "description": "The collection of enrolled customer programs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonCustomerProgramCreateRequest"
                    }
                },
                "comments": {
                    "description": "The collection of comments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonCommentRequest"
                    }
                },
                "preferences": {
                    "description": "The collection of preferences.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonPreferenceCreateRequest"
                    }
                },
                "aliases": {
                    "description": "The collection of alternate names for the person.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonAliasRequest"
                    }
                }
            }
        },
        "PersonStoredPaymentRequest": {
            "description": "Defines the peron's stored payment create request.",
            "required": [
                "accountNumber",
                "paymentMethodType",
                "paymentMethodCode"
            ],
            "type": "object",
            "properties": {
                "accountNumber": {
                    "description": "The account number.",
                    "maxLength": 34,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "paymentMethodType": {
                    "description": "The type of payment being added.",
                    "enum": [
                        "ExternalAccount",
                        "PrePaid",
                        "AgencyAccount",
                        "CustomerAccount",
                        "Voucher",
                        "Loyalty"
                    ],
                    "type": "string"
                },
                "accountName": {
                    "description": "The name of the account.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The expiration.",
                    "type": "string"
                },
                "paymentMethodCode": {
                    "description": "The payment method code.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "default": {
                    "description": "Indicates if the stored payment is the default.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PersonTravelDocumentRequest": {
            "description": "Defines the person travel document.",
            "required": [
                "documentTypeCode",
                "number"
            ],
            "type": "object",
            "properties": {
                "default": {
                    "description": "Flag indicating if the travel document is the default.",
                    "type": "boolean",
                    "example": false
                },
                "documentTypeCode": {
                    "description": "The unique travel document type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "birthCountry": {
                    "description": "The BirthCountry property.",
                    "type": "string",
                    "example": ""
                },
                "issuedByCode": {
                    "description": "The issuer code for the travel document (country code).",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The Name property."
                },
                "nationality": {
                    "description": "The Nationality property.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The date when this travel document expires.",
                    "type": "string"
                },
                "number": {
                    "description": "The travel document number.",
                    "maxLength": 35,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "issuedDate": {
                    "format": "date-time",
                    "description": "The date this travel document was issued.",
                    "type": "string"
                }
            }
        },
        "DeltaMapper[PersonStoredPaymentUpdateRequest]": {
            "$ref": "#/definitions/PersonStoredPaymentUpdateRequest"
        },
        "PersonStoredPaymentUpdateRequest": {
            "description": "Defines the peron's stored payment create request.",
            "required": [
                "paymentMethodType",
                "paymentMethodCode"
            ],
            "type": "object",
            "properties": {
                "paymentMethodType": {
                    "description": "The type of payment being added.",
                    "enum": [
                        "ExternalAccount",
                        "PrePaid",
                        "AgencyAccount",
                        "CustomerAccount",
                        "Voucher",
                        "Loyalty"
                    ],
                    "type": "string"
                },
                "accountName": {
                    "description": "The name of the account.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The expiration.",
                    "type": "string"
                },
                "paymentMethodCode": {
                    "description": "The payment method code.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "default": {
                    "description": "Indicates if the stored payment is the default.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "TravelDocumentEditRequestv2": {
            "description": "Defines the edit travel document request.",
            "required": [
                "number"
            ],
            "type": "object",
            "properties": {
                "birthCountry": {
                    "description": "The BirthCountry property.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The Name property."
                },
                "nationality": {
                    "description": "The Nationality property.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The date when this travel document expires.",
                    "type": "string"
                },
                "number": {
                    "description": "The travel document number.",
                    "maxLength": 35,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "issuedDate": {
                    "format": "date-time",
                    "description": "The date this travel document was issued.",
                    "type": "string"
                },
                "default": {
                    "description": "Flag indicating if the travel document is the default.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "DeltaMapper[TravelDocumentEditRequestv2]": {
            "$ref": "#/definitions/TravelDocumentEditRequestv2"
        },
        "PhoneType": {
            "description": "The phone type.",
            "required": [
                "phoneTypeCode"
            ],
            "type": "object",
            "properties": {
                "phoneTypeCode": {
                    "description": "The type code.",
                    "type": "string"
                },
                "name": {
                    "description": "The Name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Is InActive.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ProductClass": {
            "description": "The product class model.",
            "type": "object",
            "properties": {
                "productClassCode": {
                    "description": "The product class.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "rank": {
                    "format": "int32",
                    "description": "The rank.",
                    "maximum": 999,
                    "minimum": 0,
                    "type": "integer"
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PromotionBase": {
            "description": "Defines a promotion base model.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The promotion code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "isPassengerPromotion": {
                    "description": "The promotion discount is applied at the passenger level.",
                    "type": "boolean",
                    "example": false
                },
                "isBookingPromotion": {
                    "description": "The promotion discount is applied to the entire booking.",
                    "type": "boolean",
                    "example": false
                },
                "description": {
                    "description": "The description of the promotion.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "activeDate": {
                    "format": "date-time",
                    "description": "The date that the promotion becomes active.",
                    "type": "string"
                },
                "discontinueDate": {
                    "format": "date-time",
                    "description": "The date that the promotion is discontinued.",
                    "type": "string"
                },
                "discontinueFeeCode": {
                    "description": "The discount fee code representing the calculated discount \r\nfor the promotion.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fareTypes": {
                    "description": "The list of fare types associated with the promotion.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "passengerDiscountCode": {
                    "description": "The passenger discount code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerDiscountLimit": {
                    "format": "int32",
                    "description": "The passenger discount limit.",
                    "type": "integer"
                },
                "passengerDiscountSet": {
                    "format": "int32",
                    "description": "The passenger discount set.",
                    "type": "integer"
                }
            }
        },
        "Promotion": {
            "description": "Defines a promotion model.",
            "type": "object",
            "properties": {
                "allowedOrganizations": {
                    "description": "The list of organizations that have access to the promotion.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "code": {
                    "description": "The promotion code.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "settings": {
                    "description": "The list of applicable promotion settings.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PromotionSetting"
                    }
                },
                "isPassengerPromotion": {
                    "description": "The promotion discount is applied at the passenger level.",
                    "type": "boolean",
                    "example": false
                },
                "isBookingPromotion": {
                    "description": "The promotion discount is applied to the entire booking.",
                    "type": "boolean",
                    "example": false
                },
                "description": {
                    "description": "The description of the promotion.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "activeDate": {
                    "format": "date-time",
                    "description": "The date that the promotion becomes active.",
                    "type": "string"
                },
                "discontinueDate": {
                    "format": "date-time",
                    "description": "The date that the promotion is discontinued.",
                    "type": "string"
                },
                "discontinueFeeCode": {
                    "description": "The discount fee code representing the calculated discount \r\nfor the promotion.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "fareTypes": {
                    "description": "The list of fare types associated with the promotion.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "passengerDiscountCode": {
                    "description": "The passenger discount code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "passengerDiscountLimit": {
                    "format": "int32",
                    "description": "The passenger discount limit.",
                    "type": "integer"
                },
                "passengerDiscountSet": {
                    "format": "int32",
                    "description": "The passenger discount set.",
                    "type": "integer"
                }
            }
        },
        "PromotionSetting": {
            "description": "Defines a promotion setting model.",
            "required": [
                "promotionSettingTypeCode"
            ],
            "type": "object",
            "properties": {
                "dataVersion": {
                    "format": "int32",
                    "description": "The promotion setting data version.",
                    "type": "integer"
                },
                "promotionSettingTypeCode": {
                    "description": "The promotion setting type code.",
                    "type": "string",
                    "example": ""
                },
                "data": {
                    "description": "The promotion setting data.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The setting type name.",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "In active",
                    "type": "boolean",
                    "example": false
                },
                "schema": {
                    "description": "The data schema.",
                    "maxLength": 2147483647,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "PromotionSettingType": {
            "description": "The promotion setting type model.",
            "required": [
                "promotionSettingTypeCode"
            ],
            "type": "object",
            "properties": {
                "promotionSettingTypeCode": {
                    "description": "The promotion setting type code.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The setting type name.",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "In active",
                    "type": "boolean",
                    "example": false
                },
                "schema": {
                    "description": "The data schema.",
                    "maxLength": 2147483647,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "QueueCategory": {
            "description": "The Queue Category model.",
            "type": "object",
            "properties": {
                "queueCategoryCode": {
                    "description": "The queue category code of queue category.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the queue category",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The InActive of QueueCategory.",
                    "type": "boolean",
                    "example": false
                },
                "allowed": {
                    "description": "The Allowed Class Of Service.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "AvailabilityRebookRequest": {
            "description": "Model representing a availability rebook search.",
            "required": [
                "criteria"
            ],
            "type": "object",
            "properties": {
                "criteria": {
                    "description": "The list of availability search criteria.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AvailabilityByTrip"
                    }
                },
                "fareFilters": {
                    "$ref": "#/definitions/AvailabilityFareCriteria",
                    "description": "The fare search criteria."
                },
                "taxesAndFees": {
                    "description": "The taxes and fees rollup mode which affects the pricing information.",
                    "enum": [
                        "None",
                        "Taxes",
                        "TaxesAndFees"
                    ],
                    "type": "string"
                },
                "codes": {
                    "$ref": "#/definitions/AvailabilityCodeCriteria",
                    "description": "The code criteria."
                },
                "lowFareMode": {
                    "description": "The flag indicating to search low fare mode (only returning the lowest fare).",
                    "type": "boolean"
                }
            }
        },
        "RedirectResult": {
            "type": "object",
            "properties": {
                "permanent": {
                    "type": "boolean",
                    "example": false
                },
                "url": {
                    "type": "string",
                    "example": ""
                },
                "urlHelper": {
                    "$ref": "#/definitions/IUrlHelper"
                }
            }
        },
        "IUrlHelper": {
            "type": "object",
            "properties": {
                "actionContext": {
                    "$ref": "#/definitions/ActionContext",
                    "readOnly": true
                }
            }
        },
        "ActionContext": {
            "type": "object",
            "properties": {
                "actionDescriptor": {
                    "$ref": "#/definitions/ActionDescriptor"
                },
                "httpContext": {
                    "$ref": "#/definitions/HttpContext"
                },
                "modelState": {
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/ModelStateEntry"
                        }
                    },
                    "readOnly": true
                },
                "routeData": {
                    "$ref": "#/definitions/RouteData"
                }
            }
        },
        "ActionDescriptor": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "routeValues": {
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "attributeRouteInfo": {
                    "$ref": "#/definitions/AttributeRouteInfo"
                },
                "actionConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IActionConstraintMetadata"
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParameterDescriptor"
                    }
                },
                "boundProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParameterDescriptor"
                    }
                },
                "filterDescriptors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterDescriptor"
                    }
                },
                "displayName": {
                    "type": "string",
                    "example": ""
                },
                "properties": {
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "HttpContext": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeyValuePair[Type,Object]"
                    },
                    "readOnly": true
                },
                "request": {
                    "$ref": "#/definitions/HttpRequest",
                    "readOnly": true
                },
                "response": {
                    "$ref": "#/definitions/HttpResponse",
                    "readOnly": true
                },
                "connection": {
                    "$ref": "#/definitions/ConnectionInfo",
                    "readOnly": true
                },
                "webSockets": {
                    "$ref": "#/definitions/WebSocketManager",
                    "readOnly": true
                },
                "authentication": {
                    "$ref": "#/definitions/AuthenticationManager",
                    "readOnly": true
                },
                "user": {
                    "$ref": "#/definitions/ClaimsPrincipal"
                },
                "items": {
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "object"
                        }
                    }
                },
                "requestServices": {
                    "$ref": "#/definitions/IServiceProvider"
                },
                "requestAborted": {
                    "$ref": "#/definitions/CancellationToken"
                },
                "traceIdentifier": {
                    "type": "string",
                    "example": ""
                },
                "session": {
                    "$ref": "#/definitions/ISession"
                }
            }
        },
        "ModelStateEntry": {
            "type": "object",
            "properties": {
                "rawValue": {
                    "type": "object"
                },
                "attemptedValue": {
                    "type": "string",
                    "example": ""
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModelError"
                    },
                    "readOnly": true
                },
                "validationState": {
                    "enum": [
                        "Unvalidated",
                        "Invalid",
                        "Valid",
                        "Skipped"
                    ],
                    "type": "string"
                },
                "isContainerNode": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModelStateEntry"
                    },
                    "readOnly": true
                }
            }
        },
        "RouteData": {
            "type": "object",
            "properties": {
                "dataTokens": {
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "object"
                        }
                    },
                    "readOnly": true
                },
                "routers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IRouter"
                    },
                    "readOnly": true
                },
                "values": {
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "object"
                        }
                    },
                    "readOnly": true
                }
            }
        },
        "AttributeRouteInfo": {
            "type": "object",
            "properties": {
                "template": {
                    "type": "string",
                    "example": ""
                },
                "order": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "IActionConstraintMetadata": {
            "type": "object",
            "properties": {}
        },
        "ParameterDescriptor": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": ""
                },
                "parameterType": {
                    "type": "string"
                },
                "bindingInfo": {
                    "$ref": "#/definitions/BindingInfo"
                }
            }
        },
        "FilterDescriptor": {
            "type": "object",
            "properties": {
                "filter": {
                    "$ref": "#/definitions/IFilterMetadata",
                    "readOnly": true
                },
                "order": {
                    "format": "int32",
                    "type": "integer"
                },
                "scope": {
                    "format": "int32",
                    "type": "integer",
                    "readOnly": true
                }
            }
        },
        "KeyValuePair[Type,Object]": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "readOnly": true
                },
                "value": {
                    "type": "object",
                    "readOnly": true
                }
            }
        },
        "HttpRequest": {
            "type": "object",
            "properties": {
                "httpContext": {
                    "$ref": "#/definitions/HttpContext",
                    "readOnly": true
                },
                "method": {
                    "type": "string",
                    "example": ""
                },
                "scheme": {
                    "type": "string",
                    "example": ""
                },
                "isHttps": {
                    "type": "boolean",
                    "example": false
                },
                "host": {
                    "$ref": "#/definitions/HostString"
                },
                "pathBase": {
                    "$ref": "#/definitions/PathString"
                },
                "path": {
                    "$ref": "#/definitions/PathString"
                },
                "queryString": {
                    "$ref": "#/definitions/QueryString"
                },
                "query": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeyValuePair[String,StringValues]"
                    }
                },
                "protocol": {
                    "type": "string",
                    "example": ""
                },
                "headers": {
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": ""
                            }
                        }
                    },
                    "readOnly": true
                },
                "cookies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeyValuePair[String,String]"
                    }
                },
                "contentLength": {
                    "format": "int64",
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "example": ""
                },
                "body": {
                    "$ref": "#/definitions/Stream"
                },
                "hasFormContentType": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "form": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeyValuePair[String,StringValues]"
                    }
                }
            }
        },
        "HttpResponse": {
            "type": "object",
            "properties": {
                "httpContext": {
                    "$ref": "#/definitions/HttpContext",
                    "readOnly": true
                },
                "statusCode": {
                    "format": "int32",
                    "type": "integer"
                },
                "headers": {
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": ""
                            }
                        }
                    },
                    "readOnly": true
                },
                "body": {
                    "$ref": "#/definitions/Stream"
                },
                "contentLength": {
                    "format": "int64",
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "example": ""
                },
                "cookies": {
                    "$ref": "#/definitions/IResponseCookies",
                    "readOnly": true
                },
                "hasStarted": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                }
            }
        },
        "ConnectionInfo": {
            "type": "object",
            "properties": {
                "remoteIpAddress": {
                    "$ref": "#/definitions/IPAddress"
                },
                "remotePort": {
                    "format": "int32",
                    "type": "integer"
                },
                "localIpAddress": {
                    "$ref": "#/definitions/IPAddress"
                },
                "localPort": {
                    "format": "int32",
                    "type": "integer"
                },
                "clientCertificate": {
                    "type": "object"
                }
            }
        },
        "WebSocketManager": {
            "type": "object",
            "properties": {
                "isWebSocketRequest": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "webSocketRequestedProtocols": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    },
                    "readOnly": true
                }
            }
        },
        "AuthenticationManager": {
            "type": "object",
            "properties": {
                "httpContext": {
                    "$ref": "#/definitions/HttpContext",
                    "readOnly": true
                }
            }
        },
        "ClaimsPrincipal": {
            "type": "object",
            "properties": {
                "claims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Claim"
                    },
                    "readOnly": true
                },
                "identities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ClaimsIdentity"
                    },
                    "readOnly": true
                },
                "identity": {
                    "$ref": "#/definitions/IIdentity",
                    "readOnly": true
                }
            }
        },
        "IServiceProvider": {
            "type": "object",
            "properties": {}
        },
        "CancellationToken": {
            "type": "object",
            "properties": {
                "isCancellationRequested": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "canBeCanceled": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "waitHandle": {
                    "$ref": "#/definitions/WaitHandle",
                    "readOnly": true
                }
            }
        },
        "ISession": {
            "type": "object",
            "properties": {
                "isAvailable": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "id": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    },
                    "readOnly": true
                }
            }
        },
        "ModelError": {
            "type": "object",
            "properties": {
                "exception": {
                    "type": "object",
                    "readOnly": true
                },
                "errorMessage": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                }
            }
        },
        "IRouter": {
            "type": "object",
            "properties": {}
        },
        "BindingInfo": {
            "type": "object",
            "properties": {
                "bindingSource": {
                    "$ref": "#/definitions/BindingSource"
                },
                "binderModelName": {
                    "type": "string",
                    "example": ""
                },
                "binderType": {
                    "type": "string"
                },
                "propertyFilterProvider": {
                    "$ref": "#/definitions/IPropertyFilterProvider"
                }
            }
        },
        "IFilterMetadata": {
            "type": "object",
            "properties": {}
        },
        "HostString": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "hasValue": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "host": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "port": {
                    "format": "int32",
                    "type": "integer",
                    "readOnly": true
                }
            }
        },
        "PathString": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "hasValue": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                }
            }
        },
        "QueryString": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "hasValue": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                }
            }
        },
        "KeyValuePair[String,StringValues]": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "value": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    },
                    "readOnly": true
                }
            }
        },
        "KeyValuePair[String,String]": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "value": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                }
            }
        },
        "Stream": {
            "type": "object",
            "properties": {
                "canRead": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "canSeek": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "canTimeout": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "canWrite": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "length": {
                    "format": "int64",
                    "type": "integer",
                    "readOnly": true
                },
                "position": {
                    "format": "int64",
                    "type": "integer"
                },
                "readTimeout": {
                    "format": "int32",
                    "type": "integer"
                },
                "writeTimeout": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "IResponseCookies": {
            "type": "object",
            "properties": {}
        },
        "IPAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "format": "int64",
                    "type": "integer"
                },
                "addressFamily": {
                    "enum": [
                        "Unspecified",
                        "Unix",
                        "InterNetwork",
                        "ImpLink",
                        "Pup",
                        "Chaos",
                        "Ipx",
                        "NS",
                        "Iso",
                        "Osi",
                        "Ecma",
                        "DataKit",
                        "Ccitt",
                        "Sna",
                        "DecNet",
                        "DataLink",
                        "Lat",
                        "HyperChannel",
                        "AppleTalk",
                        "NetBios",
                        "VoiceView",
                        "FireFox",
                        "Banyan",
                        "Atm",
                        "InterNetworkV6",
                        "Cluster",
                        "Ieee12844",
                        "Irda",
                        "NetworkDesigners",
                        "Max",
                        "Unknown"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "scopeId": {
                    "format": "int64",
                    "type": "integer"
                },
                "isIPv6Multicast": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isIPv6LinkLocal": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isIPv6SiteLocal": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isIPv6Teredo": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isIPv4MappedToIPv6": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                }
            }
        },
        "Claim": {
            "type": "object",
            "properties": {
                "issuer": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "originalIssuer": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "properties": {
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    },
                    "readOnly": true
                },
                "subject": {
                    "$ref": "#/definitions/ClaimsIdentity",
                    "readOnly": true
                },
                "type": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "value": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "valueType": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                }
            }
        },
        "ClaimsIdentity": {
            "type": "object",
            "properties": {
                "authenticationType": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "isAuthenticated": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "actor": {
                    "$ref": "#/definitions/ClaimsIdentity"
                },
                "bootstrapContext": {
                    "type": "object"
                },
                "claims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Claim"
                    },
                    "readOnly": true
                },
                "label": {
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "nameClaimType": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "roleClaimType": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                }
            }
        },
        "IIdentity": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "authenticationType": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "isAuthenticated": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                }
            }
        },
        "WaitHandle": {
            "type": "object",
            "properties": {
                "handle": {
                    "type": "object"
                },
                "safeWaitHandle": {
                    "$ref": "#/definitions/SafeWaitHandle"
                }
            }
        },
        "BindingSource": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "id": {
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "isGreedy": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isFromRequest": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                }
            }
        },
        "IPropertyFilterProvider": {
            "type": "object",
            "properties": {
                "propertyFilter": {
                    "type": "object",
                    "readOnly": true
                }
            }
        },
        "SafeWaitHandle": {
            "type": "object",
            "properties": {
                "isInvalid": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                },
                "isClosed": {
                    "type": "boolean",
                    "readOnly": true,
                    "example": false
                }
            }
        },
        "CommerceLocation": {
            "description": "Defines a travel commerce location.",
            "required": [
                "code"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "description": "The unique location code.",
                    "type": "string",
                    "example": ""
                },
                "parentCode": {
                    "description": "The parent code.",
                    "type": "string",
                    "example": ""
                },
                "countryCode": {
                    "description": "The country code.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                },
                "timeZoneCode": {
                    "description": "The time zone code.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "Description.",
                    "type": "string",
                    "example": ""
                },
                "coordinates": {
                    "$ref": "#/definitions/Coordinate",
                    "description": "The GPS coordinates."
                }
            }
        },
        "DynamicParameter": {
            "description": "The dynamic parameter.",
            "type": "object",
            "properties": {
                "cultureCode": {
                    "description": "The culture code.",
                    "type": "string",
                    "example": ""
                },
                "code": {
                    "description": "The unique code for a supplier parameter.",
                    "type": "string",
                    "example": ""
                },
                "promptTypeCode": {
                    "description": "The prompt type code.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description.",
                    "type": "string",
                    "example": ""
                },
                "skuStyleCode": {
                    "description": "The sku style code.",
                    "type": "string",
                    "example": ""
                },
                "promptText": {
                    "description": "The prompt text.",
                    "type": "string",
                    "example": ""
                },
                "maxCharacters": {
                    "format": "int32",
                    "description": "The max characters.",
                    "type": "integer"
                },
                "required": {
                    "description": "The required boolean property.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ParticipantType": {
            "description": "Defines the participant type information.",
            "required": [
                "participantTypeCode"
            ],
            "type": "object",
            "properties": {
                "participantTypeCode": {
                    "description": "The participant's type code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "maxLength": 17,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description.",
                    "type": "string",
                    "example": ""
                },
                "displaySequence": {
                    "format": "int32",
                    "description": "The display sequence.",
                    "type": "integer"
                },
                "isDefault": {
                    "description": "The flag indicating that it's the default type.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Source": {
            "description": "Defines a travel commerce source.",
            "required": [
                "sourceCode"
            ],
            "type": "object",
            "properties": {
                "sourceCode": {
                    "description": "The unqiue source code.",
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "maxLength": 17,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "Description.",
                    "type": "string",
                    "example": ""
                },
                "url": {
                    "description": "The website URL.",
                    "type": "string",
                    "example": ""
                },
                "discountCode": {
                    "description": "Discount code.",
                    "type": "string",
                    "example": ""
                },
                "skinCode": {
                    "description": "Skin code.",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Active status.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Vendorv2": {
            "description": "Defines a travel commerce vendor.",
            "required": [
                "code"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "description": "The unique code for this vendor.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "Description of the vendor.",
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "cultureCode": {
                    "description": "The culture code.",
                    "maxLength": 17,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "displaySequence": {
                    "format": "int32",
                    "description": "The recommended display sequence.",
                    "type": "integer"
                },
                "active": {
                    "description": "Active status.",
                    "type": "boolean",
                    "example": false
                },
                "minimumAdvancePurchaseDays": {
                    "format": "int32",
                    "description": "Minimum advance purchase days.",
                    "type": "integer"
                },
                "paymentAction": {
                    "description": "The payment action.",
                    "enum": [
                        "SellingSystemCollects",
                        "PassThroughHold",
                        "NoPaymentRequired",
                        "ReferToSupplierMessage",
                        "PassThroughCharge"
                    ],
                    "type": "string"
                },
                "supplier": {
                    "$ref": "#/definitions/Supplier",
                    "description": "Supplier information."
                }
            }
        },
        "Supplier": {
            "description": "Defines a supplier.",
            "required": [
                "code",
                "name"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "description": "The unique supplier code.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name of the supplier.",
                    "type": "string",
                    "example": ""
                },
                "address": {
                    "$ref": "#/definitions/Address",
                    "description": "The address information."
                },
                "type": {
                    "$ref": "#/definitions/ConnectorType",
                    "description": "The connector type."
                }
            }
        },
        "ConnectorType": {
            "description": "Defines a connector type.",
            "required": [
                "code"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "description": "The unique code for this connector type.",
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description.",
                    "type": "string",
                    "example": ""
                },
                "assembly": {
                    "description": "The connector assembly.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Role": {
            "description": "Person model describes basic information about a person.",
            "type": "object",
            "properties": {
                "parentRoleCode": {
                    "description": "Gets or sets the parent role code for this role.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "roleCode": {
                    "description": "The unique role code.",
                    "type": "string",
                    "example": ""
                },
                "roleSettings": {
                    "description": "Gets or sets a list of role settings for this role.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoleSetting"
                    }
                },
                "name": {
                    "description": "The role's name.",
                    "type": "string",
                    "example": ""
                },
                "allowed": {
                    "description": "Gets or sets a flag describing whether this role is allowed or not.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "RoleSetting": {
            "description": "The role settings model.",
            "type": "object",
            "properties": {
                "dataVersion": {
                    "format": "int32",
                    "description": "The number version of the data associated with this setting.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "settingData": {
                    "description": "The setting data for this setting.",
                    "maxLength": 1073741823,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "roleSettingType": {
                    "$ref": "#/definitions/RoleSettingType",
                    "description": "The setting type for this setting."
                }
            }
        },
        "RoleSettingType": {
            "description": "The role settings type model.",
            "required": [
                "roleSettingTypeCode"
            ],
            "type": "object",
            "properties": {
                "roleSettingTypeCode": {
                    "description": "The code for the role setting type.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name for the role setting type.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The inactive flag for this setting type.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ServerTransferRequest": {
            "description": "Represents a server transfer request.",
            "required": [
                "serverContextToken"
            ],
            "type": "object",
            "properties": {
                "serverContextToken": {
                    "description": "The NewSkies server context token to transfer.",
                    "type": "string",
                    "example": ""
                },
                "applicationName": {
                    "description": "The optional application name.",
                    "type": "string",
                    "example": ""
                },
                "channel": {
                    "description": "The transferred server's channel type.",
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                }
            }
        },
        "SettingsCategoryRequest": {
            "description": "Model representing a settings category request.",
            "required": [
                "path"
            ],
            "type": "object",
            "properties": {
                "path": {
                    "description": "The path of the setting. Example: Web\\dotREZ\\MarketFilterSettings.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ResourceCategoryItem": {
            "description": "Model representing a resource setting category item.",
            "required": [
                "resourceCategoryItemId",
                "resourceCategoryItemTypeCode",
                "name",
                "resourceCategoryId"
            ],
            "type": "object",
            "properties": {
                "contentType": {
                    "description": "The default content type.",
                    "enum": [
                        "Unknown",
                        "Json",
                        "Xml"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "resourceCategoryItemId": {
                    "format": "int64",
                    "description": "The resource id.",
                    "type": "integer"
                },
                "resourceCategoryItemTypeCode": {
                    "description": "The resource type code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "resourceCategoryId": {
                    "format": "int64",
                    "description": "The resource category id.",
                    "type": "integer"
                },
                "cannotDelete": {
                    "description": "The delete permissions.",
                    "type": "boolean",
                    "example": false
                },
                "data": {
                    "description": "The resource data.",
                    "maxLength": 1073741823,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SessionSettings": {
            "description": "The session settings.",
            "type": "object",
            "properties": {
                "sessionTimeOutInterval": {
                    "description": "The timeout interval for the session.",
                    "type": "string"
                },
                "allowApiChannelLogon": {
                    "description": "The flag for allowing the API channel logon.",
                    "type": "boolean",
                    "example": false
                },
                "allowDirectChannelLogon": {
                    "description": "The flag for allowing the Direct channel logon.",
                    "type": "boolean",
                    "example": false
                },
                "allowGdsChannelLogon": {
                    "description": "The flag for allowing the GDS channel logon.",
                    "type": "boolean",
                    "example": false
                },
                "allowWebChannelLogon": {
                    "description": "The flag for allowing the Web channel logon.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "LogonSettings": {
            "description": "The logon settings.",
            "type": "object",
            "properties": {
                "allowConsoleReservations": {
                    "description": "A flag that allows logon for the connected Console application.",
                    "type": "boolean",
                    "example": false
                },
                "allowDepartureControlSystem": {
                    "description": "A flag that allows logon through the Departure Control System.",
                    "type": "boolean",
                    "example": false
                },
                "allowWebReporting": {
                    "description": "A flag that allows logon for the connected web reporting application.",
                    "type": "boolean",
                    "example": false
                },
                "allowWebReservations": {
                    "description": "A flag that allows logon for the connected web reservations application.",
                    "type": "boolean",
                    "example": false
                },
                "allowWebServicesApi": {
                    "description": "A flag that allows logon for the connected web services API.",
                    "type": "boolean",
                    "example": false
                },
                "allowExternalSystemServices": {
                    "description": "A flag that allows logon for the connected web services through an External System Communication.",
                    "type": "boolean",
                    "example": false
                },
                "allowWindowsFareManager": {
                    "description": "A flag that allows logon for the Fare Manager application.",
                    "type": "boolean",
                    "example": false
                },
                "allowWindowsManager": {
                    "description": "A flag that allows logon for the Manager application.",
                    "type": "boolean",
                    "example": false
                },
                "allowWindowsReservations": {
                    "description": "A flag that allows login for the Reservations application.",
                    "type": "boolean",
                    "example": false
                },
                "allowWindowsScheduleManager": {
                    "description": "A flag that allows login for the Schedule Manager application.",
                    "type": "boolean",
                    "example": false
                },
                "impersonationRoles": {
                    "description": "A list of acceptable impersonation roles for this role.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "overrideSystemAccessRestriction": {
                    "description": "A flag that allows overriding the system access restrictions.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "CodesSettings": {
            "description": "The codes settings.",
            "type": "object",
            "properties": {
                "allowedPaymentMethodsForFraudPrevention": {
                    "description": "A dictionary that map payment method codes to a boolean representing whether it is allowed for fraud\r\nprevention.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "boolean",
                            "example": false
                        }
                    }
                },
                "automaticMoveNestOverbookClasses": {
                    "description": "A list of classes that automatically move or nest on overbook.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "editableRuleTypes": {
                    "description": "A list of editable rule types.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "externalPaymentValidationOverrides": {
                    "description": "A list of external payment codes that allow validation overrides.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "boolean",
                            "example": false
                        }
                    }
                },
                "overrideFeeTypes": {
                    "description": "A list of fee types that allow overrides. = ['All', 'Tax', 'TravelFee', 'ServiceFee', 'PaymentFee', 'PenaltyFee', 'SsrFee', 'NonFlightServiceFee', 'UpgradeFee', 'SeatFee', 'BaseFare', 'SpoilageFee', 'NameChangeFee', 'ConvenienceFee', 'BaggageFee', 'FareSurcharge', 'PromotionDiscount']",
                    "type": "array",
                    "items": {
                        "enum": [
                            "All",
                            "Tax",
                            "TravelFee",
                            "ServiceFee",
                            "PaymentFee",
                            "PenaltyFee",
                            "SsrFee",
                            "NonFlightServiceFee",
                            "UpgradeFee",
                            "SeatFee",
                            "BaseFare",
                            "SpoilageFee",
                            "NameChangeFee",
                            "ConvenienceFee",
                            "BaggageFee",
                            "FareSurcharge",
                            "PromotionDiscount",
                            "ServiceBundle",
                            "ExtraBagFee"
                        ],
                        "type": "string"
                    }
                },
                "paymentFieldOverrides": {
                    "description": "A dictionary that map payment codes with a dictionary mapping payment fields to their requirement\r\nrules.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "object",
                            "properties": {
                                "*": {
                                    "enum": [
                                        "Required",
                                        "Optional",
                                        "NotAllowed"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "privateTravelQueueCategory": {
                    "description": "The permissions allowed on the private travel queue category for this role.",
                    "enum": [
                        "None",
                        "View",
                        "All"
                    ],
                    "type": "string"
                },
                "publicTravelQueueCategory": {
                    "description": "The permissions allowed on the public travel queue category for this role.",
                    "enum": [
                        "None",
                        "View",
                        "All"
                    ],
                    "type": "string"
                },
                "refundablePaymentMethodCodes": {
                    "description": "A list of payment codes that allow refunds.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "spoilFeeTypes": {
                    "description": "A list of fee types that are Spoilage Fees. = ['All', 'Tax', 'TravelFee', 'ServiceFee', 'PaymentFee', 'PenaltyFee', 'SsrFee', 'NonFlightServiceFee', 'UpgradeFee', 'SeatFee', 'BaseFare', 'SpoilageFee', 'NameChangeFee', 'ConvenienceFee', 'BaggageFee', 'FareSurcharge', 'PromotionDiscount']",
                    "type": "array",
                    "items": {
                        "enum": [
                            "All",
                            "Tax",
                            "TravelFee",
                            "ServiceFee",
                            "PaymentFee",
                            "PenaltyFee",
                            "SsrFee",
                            "NonFlightServiceFee",
                            "UpgradeFee",
                            "SeatFee",
                            "BaseFare",
                            "SpoilageFee",
                            "NameChangeFee",
                            "ConvenienceFee",
                            "BaggageFee",
                            "FareSurcharge",
                            "PromotionDiscount",
                            "ServiceBundle",
                            "ExtraBagFee"
                        ],
                        "type": "string"
                    }
                },
                "classOfServices": {
                    "description": "A list of allowed classes of service.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "depositPaymentTypes": {
                    "description": "A list of allowed payment codes that are deposit payment types.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "fareTypes": {
                    "description": "A list of allowed fare types.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "passengerDiscountCodes": {
                    "description": "A list of allowed passenger discount codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "passengerTypeCodes": {
                    "description": "A list of allowed passenger types.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "paymentMethodCodes": {
                    "description": "A list of allowed payment method codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "penaltyFeeCodes": {
                    "description": "A list of penalty fee codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "productClasses": {
                    "description": "A list of allowed product classes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "queueCategoryCodes": {
                    "description": "A dictionary that maps queue category codes.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "format": "int32",
                            "type": "integer"
                        }
                    }
                },
                "sellSsrCodes": {
                    "description": "The allowed sell SSR Codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "serviceFeeCodes": {
                    "description": "The allowed service fee codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "standbyClassOfServiceCodes": {
                    "description": "The class of services that are allowed standby.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "stationCategories": {
                    "description": "The allowed station categories.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "viewableSeatProperties": {
                    "description": "The list viewable seat properties.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "waiveFeeTypes": {
                    "description": "The fee types that allow waiving. = ['All', 'Tax', 'TravelFee', 'ServiceFee', 'PaymentFee', 'PenaltyFee', 'SsrFee', 'NonFlightServiceFee', 'UpgradeFee', 'SeatFee', 'BaseFare', 'SpoilageFee', 'NameChangeFee', 'ConvenienceFee', 'BaggageFee', 'FareSurcharge', 'PromotionDiscount']",
                    "type": "array",
                    "items": {
                        "enum": [
                            "All",
                            "Tax",
                            "TravelFee",
                            "ServiceFee",
                            "PaymentFee",
                            "PenaltyFee",
                            "SsrFee",
                            "NonFlightServiceFee",
                            "UpgradeFee",
                            "SeatFee",
                            "BaseFare",
                            "SpoilageFee",
                            "NameChangeFee",
                            "ConvenienceFee",
                            "BaggageFee",
                            "FareSurcharge",
                            "PromotionDiscount",
                            "ServiceBundle",
                            "ExtraBagFee"
                        ],
                        "type": "string"
                    }
                }
            }
        },
        "CheckInSettings": {
            "description": "The Booking Check-In Settings.",
            "type": "object",
            "properties": {
                "allowApisCheckIn": {
                    "description": "Gets or sets the APIS rules for Check-In.",
                    "enum": [
                        "NotAllowed",
                        "AllowedWithVerifiedDocument",
                        "AllowedWithDocument",
                        "AllowedWithoutVerifiedDocument"
                    ],
                    "type": "string"
                },
                "allowIappCheckIn": {
                    "description": "Gets or sets the IAPP rules for Check-In.",
                    "enum": [
                        "NotAllowed",
                        "AllowedWithVerifiedDocument",
                        "AllowedWithDocument",
                        "AllowedWithoutVerifiedDocument"
                    ],
                    "type": "string"
                },
                "domesticBagWeight": {
                    "description": "Gets or sets the Domestic bag weight rules for Check-In.",
                    "enum": [
                        "WeightNotRequired",
                        "TotalWeightRequired",
                        "IndividualWeightRequired"
                    ],
                    "type": "string"
                },
                "internationalBagWeight": {
                    "description": "Gets or sets the International bag weight rules for Check-In.",
                    "enum": [
                        "WeightNotRequired",
                        "TotalWeightRequired",
                        "IndividualWeightRequired"
                    ],
                    "type": "string"
                },
                "allowAppsCheckIn": {
                    "description": "Gets or sets the flag to allow APPS Checkin.",
                    "type": "boolean",
                    "example": false
                },
                "allowAppsOverride": {
                    "description": "Gets or sets the flag to allow APPS override in Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowBagTagDestinationMismatch": {
                    "description": "Gets or sets the allow bag tag destination mismatch flag for Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowBagTagReprint": {
                    "description": "Gets or sets the flag to allow reprinting bag tags for Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowCheckedInPassengerFlightChange": {
                    "description": "Gets or sets the flag that allows checked-in passenger to change flight for Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowCheckedInPassengerNameChange": {
                    "description": "Gets or sets the flag that allows checked-in passenger to change name for Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowCheckInOfPassengerWithPendingPayments": {
                    "description": "Gets or sets the flag that allows a passenger with pending payments to check-in.",
                    "type": "boolean",
                    "example": false
                },
                "allowCheckInWhenTicketCollected": {
                    "description": "Gets or sets the flag that allows a passenger to check-in when ticket is collected for Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowETicketCouponStatusOverride": {
                    "description": "Gets or sets the status override flag for allowing an E-Ticket coupon for Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowGatePassPrinting": {
                    "description": "Gets or sets the flag for allowing the gate info to be printed for Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowInvalidBookingCheckIn": {
                    "description": "Gets or sets the flag for allowing an invalid booking to be checked-in.",
                    "type": "boolean",
                    "example": false
                },
                "allowManualClearance": {
                    "description": "Gets or sets the flag for allowing manual clearance for Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowMidJourneyCheckIn": {
                    "description": "Gets or sets the flag for allowing mid-journey Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "allowTbaCheckIn": {
                    "description": "Gets or sets the flag allowing a passenger with the name TBA to be allowed to check-in.",
                    "type": "boolean",
                    "example": false
                },
                "ignoreMarketTimeRestrictions": {
                    "description": "Gets or sets the flag allowing to ignore market time restrictions for Check-In.",
                    "type": "boolean",
                    "example": false
                },
                "checkedInPassengerFlightChangeOffset": {
                    "description": "Gets or sets the timespan a checked-in passenger can change flights.",
                    "type": "string"
                },
                "checkedInPassengerNameChangeOffset": {
                    "description": "Gets or sets the timespan a checked-in passenger can change names.",
                    "type": "string"
                },
                "checkedInCloseOffset": {
                    "description": "Gets or sets the timespan a passengers opportunity to check-in closes prior to flight.",
                    "type": "string"
                },
                "checkedInOpenOffset": {
                    "description": "Gets or sets the timespan a passengers opportunity to check-in opens prior to flight.",
                    "type": "string"
                },
                "allowedSsrCodes": {
                    "description": "Gets or sets a collection of allowed SSR codes for Check-In reference.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "restrictedSsrCodes": {
                    "description": "Gets or sets a collection of restricted SSR codes for Check-In reference.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "requiredSsrCodes": {
                    "description": "Gets or sets a collection of required SSR codes for Check-In reference.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                }
            }
        },
        "ContactSettings": {
            "description": "The booking contact settings.",
            "type": "object",
            "properties": {
                "title": {
                    "description": "Title field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "firstName": {
                    "description": "First name field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "middleName": {
                    "description": "Middle name field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "lastName": {
                    "description": "Last name field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "suffix": {
                    "description": "Suffix field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "addressLineOne": {
                    "description": "Address line one field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "addressLineTwo": {
                    "description": "Address line two field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "addressLineThree": {
                    "description": "Address line three field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "city": {
                    "description": "Address city field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "state": {
                    "description": "Address state field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "postalCode": {
                    "description": "Address postal code field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "country": {
                    "description": "Address country field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "email": {
                    "description": "Email field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "homePhoneNumber": {
                    "description": "Home phone number field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "workPhoneNumber": {
                    "description": "Work phone number field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "otherPhoneNumber": {
                    "description": "Other phone number field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "faxNumber": {
                    "description": "Fax number field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disablePhoneFormat": {
                    "description": "Flag indicating to disable phone number formatting.",
                    "type": "boolean",
                    "example": false
                },
                "defaultItineraryDistribution": {
                    "description": "The default itinerary distribution option.",
                    "enum": [
                        "None",
                        "Mail",
                        "Email",
                        "Fax",
                        "MailFax",
                        "Airport",
                        "Hold",
                        "Print"
                    ],
                    "type": "string"
                },
                "notificationPreference": {
                    "description": "Notification preference field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "defaultNotificationPreference": {
                    "description": "The default notification preference.",
                    "enum": [
                        "None",
                        "Promotional"
                    ],
                    "type": "string"
                },
                "defaultToCustomerPreference": {
                    "description": "Flag indicating to default the customer preferences to the contact.",
                    "type": "boolean",
                    "example": false
                },
                "maskContactLanguage": {
                    "description": "Gets or Sets the indicator whether contact language is masked.",
                    "type": "boolean",
                    "example": false
                },
                "maskIndiaGSTInfo": {
                    "description": "Gets or Sets the indicator whether contact language is masked.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "CustomerAccountSettings": {
            "description": "The booking customer account settings.",
            "type": "object",
            "properties": {
                "allowCustomerMerge": {
                    "description": "The flag allowing two different customer accounts to be combined into a single account.",
                    "type": "boolean",
                    "example": false
                },
                "allowCustomerProgram": {
                    "description": "The flag allowing the current role to manage user customer programs.",
                    "type": "boolean",
                    "example": false
                },
                "allowSeatLocationOption": {
                    "description": "The flag allowing the current role to manage user seat preferences.",
                    "type": "boolean",
                    "example": false
                },
                "customerAccessControl": {
                    "description": "The restriction/permissions allowed by the current role.",
                    "enum": [
                        "View",
                        "CreateAndChange"
                    ],
                    "type": "string"
                },
                "defaultCustomerNotificationPreference": {
                    "description": "The default notification preferences of the customer.",
                    "enum": [
                        "None",
                        "Promotional"
                    ],
                    "type": "string"
                },
                "defaultSeatPreference": {
                    "description": "The default seat preferences of the customer.",
                    "enum": [
                        "None",
                        "Window",
                        "Aisle",
                        "NoPreference",
                        "Front",
                        "Rear",
                        "WindowFront",
                        "WindowRear",
                        "AisleFront",
                        "AisleRear"
                    ],
                    "type": "string"
                },
                "disableCustomerAddress": {
                    "description": "The restrictions on the customer address fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerCurrency": {
                    "description": "The restrictions on the customer currency fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerDateOfBirth": {
                    "description": "The restrictions on the customer date of birth fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerEmail": {
                    "description": "The restrictions on the customer email fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerFax": {
                    "description": "The restrictions on the customer fax fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerLanguage": {
                    "description": "The restrictions on the customer language fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerNationality": {
                    "description": "The restrictions on the customer nationality fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerNotificationPreference": {
                    "description": "The restrictions on the customer notification preferences fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerPayment": {
                    "description": "The restrictions on the customer payment fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerPhone": {
                    "description": "The restrictions on the customer phone number fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerResidentCountry": {
                    "description": "The restrictions on the customer resident country fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerTitle": {
                    "description": "The restrictions on the customer title fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "disableCustomerType": {
                    "description": "The restrictions on the customer type fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                }
            }
        },
        "FeeSettings": {
            "description": "The booking fee settings.",
            "type": "object",
            "properties": {
                "allowNegativeFees": {
                    "description": "Gets or sets the flag allowing negative fees.",
                    "type": "boolean",
                    "example": false
                },
                "allowOtherCurrencies": {
                    "description": "Gets or sets the flag allowing other currency fees.",
                    "type": "boolean",
                    "example": false
                },
                "cancelGracePeriod": {
                    "description": "Gets or sets the timeframe for the cancel grace period.",
                    "type": "string"
                },
                "displayTaxesForFeesOnBreakdown": {
                    "description": "Gets or sets the flag that allows displaying taxes for fees on the breakdown.",
                    "type": "boolean",
                    "example": false
                },
                "feeDescription": {
                    "description": "Gets or sets the restriction for fee description fields.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                }
            }
        },
        "FlightSearchSettings": {
            "description": "The Booking flight search settings.",
            "type": "object",
            "properties": {
                "bookingMaxPassengers": {
                    "format": "int32",
                    "description": "The maximum number of passengers allowed on a single booking.",
                    "type": "integer"
                },
                "allowOpenJaw": {
                    "description": "Flag that indicates if open jaw journeys are allowed.",
                    "type": "boolean",
                    "example": false
                },
                "allowPrivateFares": {
                    "description": "Flag that indicates whether private fares are allowed.",
                    "type": "boolean",
                    "example": false
                },
                "showExpiredFareDateRange": {
                    "format": "int32",
                    "description": "The number of days after the fare discontinue date that the agent will be allowed to view the fare.",
                    "type": "integer"
                },
                "maxNumberConnectingFlights": {
                    "format": "int32",
                    "description": "The maximum number of connections on a journey that will be returned from availability.",
                    "type": "integer"
                },
                "primarySortKey": {
                    "description": "The primary sort to be used on availability response.",
                    "enum": [
                        "ServiceType",
                        "ShortestTravelTime",
                        "LowestFare",
                        "HighestFare",
                        "EarliestDeparture",
                        "LatestDeparture",
                        "EarliestArrival",
                        "LatestArrival",
                        "NoSort",
                        "BiasOnlineCommercialDuplicates"
                    ],
                    "type": "string"
                },
                "secondarySortKey": {
                    "description": "The secondary sort to be used on the availability response.",
                    "enum": [
                        "ServiceType",
                        "ShortestTravelTime",
                        "LowestFare",
                        "HighestFare",
                        "EarliestDeparture",
                        "LatestDeparture",
                        "EarliestArrival",
                        "LatestArrival",
                        "NoSort",
                        "BiasOnlineCommercialDuplicates"
                    ],
                    "type": "string"
                },
                "maxAvailabilityDateRange": {
                    "format": "int32",
                    "description": "The maximum number of days between the begin and end date for regular availability.",
                    "type": "integer"
                },
                "maxLowFareDateRange": {
                    "format": "int32",
                    "description": "The maximum number of days between the begin and end date for low fare availability.",
                    "type": "integer"
                },
                "displayLowerFares": {
                    "description": "Display setting for low fares (used in change flow).",
                    "enum": [
                        "HideLowerFares",
                        "ShowAndAllowLowerFares",
                        "ShowButDisableLowerFares"
                    ],
                    "type": "string"
                },
                "fareClassControl": {
                    "description": "The fare class filtering when returning journeys during availability.",
                    "enum": [
                        "LowestFareClass",
                        "CompressByProductClass",
                        "Default"
                    ],
                    "type": "string"
                },
                "allUpPricing": {
                    "description": "The flag indicating whether to allow anticipated sales taxes and travel fees when processing the availability\r\nrequest.",
                    "type": "boolean",
                    "example": false
                },
                "fareSorting": {
                    "description": "Fare filtering options.",
                    "enum": [
                        "BySortPrice",
                        "ByCalculatedFarePrice"
                    ],
                    "type": "string"
                },
                "lowFareCacheStatus": {
                    "description": "The status of the low fare cache.",
                    "enum": [
                        "AlwaysUseCache",
                        "BypassCacheOnRequest",
                        "NeverUseCache"
                    ],
                    "type": "string"
                }
            }
        },
        "GeneralSettings": {
            "description": "The booking general settings.",
            "type": "object",
            "properties": {
                "allowChangeSsrOnCheckedInPassenger": {
                    "description": "The flag allowing adding and removing SSRs on a checked-in passenger.",
                    "type": "boolean",
                    "example": false
                },
                "allowBlockedSeatAssignment": {
                    "description": "The flag allowing blocked seat assignment.",
                    "type": "boolean",
                    "example": false
                },
                "allowChangeOnRestrictedFlight": {
                    "description": "The flag allowing changing the booking on a restricted flight.",
                    "type": "boolean",
                    "example": false
                },
                "allowPromoCodes": {
                    "description": "The flag allowing promo codes.",
                    "type": "boolean",
                    "example": false
                },
                "allowEditableApiChannel": {
                    "description": "The flag allowing changes on a booking made through the API channel.",
                    "type": "boolean",
                    "example": false
                },
                "allowEditableDirectChannel": {
                    "description": "The flag allowing changes on a booking made through the direct channel.",
                    "type": "boolean",
                    "example": false
                },
                "allowEditableGdsBookingWithTaPayment": {
                    "description": "The flag allowing the current role to edit GDS bookings with TA payments.",
                    "type": "boolean",
                    "example": false
                },
                "allowEditableGdsChannel": {
                    "description": "The flag allowing the current role to edit bookings created through GDS.",
                    "type": "boolean",
                    "example": false
                },
                "allowEditableWebChannel": {
                    "description": "The flag allowing the current role to edit bookings created through the web channel.",
                    "type": "boolean",
                    "example": false
                },
                "allowGroupNameUpdates": {
                    "description": "The flag allowing group names to be updated on non-GDS flights.",
                    "type": "boolean",
                    "example": false
                },
                "allowManifestRetrievalOnUnblockedFlightLines": {
                    "description": "The flag allowing manifest retrieval on Unblocked flight lines",
                    "type": "boolean",
                    "example": false
                },
                "allowOverbookingSsrOnMove": {
                    "description": "The flag allowing overbooking SSRs on Move.",
                    "type": "boolean",
                    "example": false
                },
                "allowQueueingGdsBookingWithTaFopForETicketReissue": {
                    "description": "The flag allowing queuing GDS booking with TA FOP for ETicket Reissues.",
                    "type": "boolean",
                    "example": false
                },
                "allowRestrictedSeatAssignment": {
                    "description": "The flag allowing restricted seat assignments.",
                    "type": "boolean",
                    "example": false
                },
                "allowSeatAssignment": {
                    "description": "The seat assignment rules for this role.",
                    "enum": [
                        "Never",
                        "OnlyOnUnheldBookings",
                        "Always"
                    ],
                    "type": "string"
                },
                "bookingAccessControl": {
                    "description": "The booking access allowed on this role.",
                    "enum": [
                        "None",
                        "ScheduleOnly",
                        "Availability",
                        "View",
                        "ModifyNoCommit",
                        "Create",
                        "Change",
                        "CreateAndChange"
                    ],
                    "type": "string"
                },
                "viewBookingsByControl": {
                    "description": "The highest organization that the role can view bookings for.",
                    "enum": [
                        "Agent",
                        "Organization",
                        "OrganizationGroup",
                        "All"
                    ],
                    "type": "string"
                },
                "editBookingsByControl": {
                    "description": "The highest organization that the role can edit bookings for.",
                    "enum": [
                        "Agent",
                        "Organization",
                        "OrganizationGroup",
                        "All"
                    ],
                    "type": "string"
                },
                "defaultBookingComment": {
                    "description": "The mandatory booking comment.",
                    "type": "string",
                    "example": ""
                },
                "doNotIncludeUnitProperties": {
                    "description": "The flag to not include unit properties in notification itinerary.",
                    "type": "boolean",
                    "example": false
                },
                "duplicateBookingDetectionTimeSpan": {
                    "description": "The timespan where duplicate bookings are watched for on this role.",
                    "type": "string"
                },
                "enableAutomaticSeatAssignment": {
                    "description": "The flag allowing automatic seat assignment on this role.",
                    "type": "boolean",
                    "example": false
                },
                "highlightFareOverride": {
                    "description": "The option to highlight the fare override on this role.",
                    "enum": [
                        "None",
                        "Highlight"
                    ],
                    "type": "string"
                },
                "highlightIrop": {
                    "description": "The option to highlight IROP information on this role.",
                    "enum": [
                        "None",
                        "Highlight"
                    ],
                    "type": "string"
                },
                "highlightScheduleChange": {
                    "description": "The option to highlight schedule changes on this role.",
                    "enum": [
                        "None",
                        "Highlight"
                    ],
                    "type": "string"
                },
                "highlightStandby": {
                    "description": "The option to highlight standbys on this role.",
                    "enum": [
                        "None",
                        "Highlight"
                    ],
                    "type": "string"
                },
                "highlightUpgrade": {
                    "description": "The option to highlight upgrades on this role.",
                    "enum": [
                        "None",
                        "Highlight"
                    ],
                    "type": "string"
                },
                "managePassiveSegments": {
                    "description": "The flag to allow managing passive segments on this role.",
                    "type": "boolean",
                    "example": false
                },
                "reassignSeatingBehavior": {
                    "description": "The reassign seat behavior for this role.",
                    "enum": [
                        "DropSeats",
                        "LikeForLike",
                        "Algorithm"
                    ],
                    "type": "string"
                },
                "restrictedExternalSystemCodes": {
                    "description": "Gets or sets a list of restricted external system codes for this role.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "timeDisplay": {
                    "description": "The time display style for this role.",
                    "enum": [
                        "Default",
                        "AmPm",
                        "TwentyFourHour"
                    ],
                    "type": "string"
                }
            }
        },
        "ReserveFlightsSettings": {
            "description": "The booking reserve flight settings.",
            "type": "object",
            "properties": {
                "availabilityDepartureTimeLimit": {
                    "description": "Time limit for availability departure from current date and time.",
                    "type": "string"
                },
                "availabilityMaxDaysOut": {
                    "description": "Time indicating when flights cannot depart or return from current date and time.",
                    "type": "string"
                },
                "sellDepartureTimeLimit": {
                    "description": "Time indicating when flights cannot be booked/sold from current date and time.",
                    "type": "string"
                },
                "availableSpaceDisplayMax": {
                    "format": "int32",
                    "description": "The maximum available seats displayed.",
                    "type": "integer"
                },
                "flightTimeChangeToleranceMinutes": {
                    "format": "int32",
                    "description": "Number of flight time change tolerance minutes.",
                    "type": "integer"
                },
                "viewCapacity": {
                    "description": "Flag indicating if whether the agent is allowed to view aircraft capacity.",
                    "type": "boolean",
                    "example": false
                },
                "viewLidSold": {
                    "description": "Flag indicating whether the agent is allowed to view aircraft lid and seats sold counts.",
                    "type": "boolean",
                    "example": false
                },
                "viewSsrAvailability": {
                    "description": "Flag indicating whether the agent is allowed to view ssr availability.",
                    "type": "boolean",
                    "example": false
                },
                "viewManifestControl": {
                    "description": "Indicator whether the agent is allowed to view manifest.",
                    "enum": [
                        "None",
                        "StandbyOnly",
                        "Full"
                    ],
                    "type": "string"
                },
                "adHocFlightControl": {
                    "description": "Indicator on permissions for AdHoc flight operations.",
                    "enum": [
                        "None",
                        "View",
                        "Sell"
                    ],
                    "type": "string"
                },
                "allowSellOverbook": {
                    "description": "Indicator whether the agent is allowed to overbook except on moves.",
                    "enum": [
                        "CannotOverbook",
                        "CanOverbookClass",
                        "CanOverbookNest",
                        "CanOverbookLeg"
                    ],
                    "type": "string"
                },
                "allowMoveOverbook": {
                    "description": "Indicator whether the agent is allowed to overbook on move only.",
                    "enum": [
                        "CannotOverbook",
                        "CanOverbookClass",
                        "CanOverbookNest",
                        "CanOverbookLeg"
                    ],
                    "type": "string"
                },
                "allowUpgradeOverbook": {
                    "description": "Indicator whether the agent is allowed to overbook on move only.",
                    "enum": [
                        "CannotOverbook",
                        "CanOverbookClass",
                        "CanOverbookNest",
                        "CanOverbookLeg"
                    ],
                    "type": "string"
                },
                "allowSplitJourneyMoves": {
                    "description": "Flag indicating whether the agent allows split-journey moves.",
                    "type": "boolean",
                    "example": false
                },
                "allowMove": {
                    "description": "Indicator whether the agent is allowed to move a passenger from a flight to another without repricing.",
                    "enum": [
                        "NotAllowed",
                        "AllowedOnInventory",
                        "Allowed"
                    ],
                    "type": "string"
                },
                "moveByMaximumClassAvailability": {
                    "description": "Flag indicating if move by maximum class availability.",
                    "type": "boolean",
                    "example": false
                },
                "requireSameCityPairOnMoves": {
                    "description": "Flag indicating if same city pairs are required on move.",
                    "type": "boolean",
                    "example": false
                },
                "maxMoveDaysForward": {
                    "description": "They number of days that are allowed to move forward.",
                    "type": "string"
                },
                "maxMoveDaysBack": {
                    "description": "The number of days that are allowe to move backwards.",
                    "type": "string"
                },
                "daysBeforeIrop": {
                    "description": "The number of days before IROP.",
                    "type": "string"
                },
                "allowFareOverride": {
                    "description": "Flag indicating whether the agent is allowed to override the fare.",
                    "type": "boolean",
                    "example": false
                },
                "allowClosedFlightFareOverride": {
                    "description": "Flag indicating whether the agent is allowed to override the fare of a closed or flown flight.",
                    "type": "boolean",
                    "example": false
                },
                "allowFareOverrideDuringDivide": {
                    "description": "Flag indicating whether the agent is allowed to override the fare of a closed or flown flight.",
                    "type": "boolean",
                    "example": false
                },
                "allowIgnoreRestrictions": {
                    "description": "Flag indicating whether the agent is allowed to ignore fare restrictions on end record.",
                    "type": "boolean",
                    "example": false
                },
                "allowInvalidPriceStatus": {
                    "description": "Flag indicating whether the agent is allowed to End record with an invalid price.",
                    "type": "boolean",
                    "example": false
                },
                "cancelDepartureTimeLimit": {
                    "description": "Denotes the time before departure when an agent can no longer change/cancel a flight.",
                    "type": "string"
                },
                "seatAssignmentTimeLimit": {
                    "description": "Denotes the time before departure when an agent can no longer change/cancel a flight.",
                    "type": "string"
                },
                "allowUpgrade": {
                    "description": "Flag indicating if upgrades are allowed.",
                    "type": "boolean",
                    "example": false
                },
                "allowCreateAdhocConnect": {
                    "description": "Flag indicating if AdHoc is allowed.",
                    "type": "boolean",
                    "example": false
                },
                "minimumTimeBetweenFlightsEnforcement": {
                    "description": "Flag indicating whether the minimum time between flights setting timespan is to be enforced.",
                    "type": "boolean",
                    "example": false
                },
                "upgradeDepartureTimeLimit": {
                    "description": "Denotes the time before departure when an agent can no longer change/cancel a flight.",
                    "type": "string"
                },
                "upgradeCabinStartOffset": {
                    "description": "Denotes the time before departure the agent can start offering cabin upgrades.",
                    "type": "string"
                },
                "minimumTimeBetweenFlights": {
                    "description": "Denotes the minimum time between flights allowed.",
                    "type": "string"
                },
                "modifyPassiveSegmentTimes": {
                    "description": "Flag indicating whether or not flight times on unmanaged records are overwritten.",
                    "type": "boolean",
                    "example": false
                },
                "allowSellOfFlightOverlap": {
                    "description": "Flag indicating whether or not to support selling of overlapping flights across all booking channels.",
                    "type": "boolean",
                    "example": false
                },
                "availabilityMaxDate": {
                    "format": "date-time",
                    "description": "Cannot book flights whose departure or return date exceeds date.",
                    "type": "string"
                }
            }
        },
        "PassengerSettings": {
            "description": "The booking passenger settings.",
            "type": "object",
            "properties": {
                "passengerTitle": {
                    "description": "Passenger title field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "passengerFirstName": {
                    "description": "Passenger first name field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "passengerMiddleName": {
                    "description": "Passenger middle name field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "passengerLastName": {
                    "description": "Passenger last name field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "passengerSuffix": {
                    "description": "Passenger suffix field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "passengerCustomerNumber": {
                    "description": "Passenger customer number field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "passengerGender": {
                    "description": "Passenger gender field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "passengerDateOfBirth": {
                    "description": "Passenger date of birth field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "passengerNationality": {
                    "description": "Passenger nationality field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "passengerResidentCountry": {
                    "description": "Passenger resident country field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "infantTitle": {
                    "description": "Infant title field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "infantFirstName": {
                    "description": "Infant first name field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "infantMiddleName": {
                    "description": "Infant middle name field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "infantLastName": {
                    "description": "Infant last name field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "infantSuffix": {
                    "description": "Infant suffix field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "infantGender": {
                    "description": "Infant gender field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "infantDateOfBirth": {
                    "description": "Infant date of birth field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "infantNationality": {
                    "description": "Infant nationality field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "infantResidentCountry": {
                    "description": "Infant resident country field validation control.",
                    "enum": [
                        "Required",
                        "Optional",
                        "Disabled",
                        "RequiredMasked",
                        "OptionalMasked"
                    ],
                    "type": "string"
                },
                "tbaPassengersAllowed": {
                    "description": "TBA passenger will allow users to enter passengers with information \"To Be Determined\".",
                    "enum": [
                        "Never",
                        "IfFirstPassengerIsKnown",
                        "Always"
                    ],
                    "type": "string"
                },
                "allowCustomerProgram": {
                    "description": "Flag to indicate if passenger customer programs are allowed.",
                    "type": "boolean",
                    "example": false
                },
                "allowNameChange": {
                    "description": "Flag to indicate if passenger name changes are allowed.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "PaymentSettings": {
            "description": "The payment settings.",
            "type": "object",
            "properties": {
                "defaultCommentForCreditShell": {
                    "description": "Hold the default comment that will be applied for a credit shell payment.",
                    "type": "string",
                    "example": ""
                },
                "webDeclinedPaymentHoldPeriod": {
                    "format": "int32",
                    "description": "Web declined payment hold period.",
                    "type": "integer"
                },
                "directDeclinedPaymentHoldPeriod": {
                    "format": "int32",
                    "description": "Direct declined payment hold period.",
                    "type": "integer"
                },
                "gdsDeclinedPaymentHoldPeriod": {
                    "format": "int32",
                    "description": "GDS declined payment hold period.",
                    "type": "integer"
                },
                "apiDeclinedPaymentHoldPeriod": {
                    "format": "int32",
                    "description": "API declined payment hold period.",
                    "type": "integer"
                },
                "autoCancelChargeBackPaymentHolds": {
                    "description": "Auto cancel charge back payment holds.",
                    "type": "boolean",
                    "example": false
                },
                "allowZeroAmountFormOfPayment": {
                    "description": "Allow zero amount form of payment.",
                    "type": "boolean",
                    "example": false
                },
                "includeInFirstInstallmentFeeCodes": {
                    "description": "Include in first installment fee codes.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "retainHoldStatusUntilPaymentAuthorization": {
                    "description": "Retain hold status until payment authorization.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "AgencyCreationSettings": {
            "description": "Settings for creating agencies.",
            "type": "object",
            "properties": {
                "department": {
                    "description": "The default Department for new agency.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "role": {
                    "description": "The default Role for new agency.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "domainCode": {
                    "description": "The default Domain for new agency.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "domainName": {
                    "description": "The default Domain name for new agency.",
                    "type": "string",
                    "example": ""
                },
                "domainLocation": {
                    "description": "The default domain Location value for new agency.",
                    "type": "string",
                    "example": ""
                },
                "channelType": {
                    "description": "The default channel type for new agency.",
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                },
                "notificationEmailAddress": {
                    "description": "The default notification email address for new agency.",
                    "type": "string",
                    "example": ""
                },
                "masterRole": {
                    "description": "The default master role for the new agency.",
                    "type": "string",
                    "example": ""
                },
                "phoneType": {
                    "description": "The default phone type for the new agency.",
                    "enum": [
                        "Other",
                        "Home",
                        "Work",
                        "Mobile",
                        "Fax"
                    ],
                    "type": "string"
                }
            }
        },
        "CustomerCreationSettings": {
            "description": "Settings for creating customers.",
            "type": "object",
            "properties": {
                "organization": {
                    "description": "Gets or sets the default Customer organization for new customer.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "domain": {
                    "description": "Gets or sets the default Domain for new customer.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "department": {
                    "description": "Gets or sets the default Department for new customer.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "role": {
                    "description": "Gets or sets the default Role for new customer.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "location": {
                    "description": "Gets or sets the default Location value for new customer.",
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "minimumAge": {
                    "format": "int32",
                    "description": "Gets or sets the minimum age for a new customer.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "enableCheckDigit": {
                    "description": "Gets or sets the flag that enables the check digit algorithm.",
                    "type": "boolean",
                    "example": false
                },
                "allowPropertyBagUpload": {
                    "description": "Gets or sets the flag that allows bag property uploads.",
                    "type": "boolean",
                    "example": false
                },
                "maximumPersonInfoSize": {
                    "format": "int64",
                    "description": "Gets or sets the maximum size of the person info.",
                    "type": "integer"
                },
                "allowDuplicateCustomerName": {
                    "description": "Gets or sets the flag allowing duplicate customer names.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BookingPaymentSettingsv2": {
            "description": "The booking payment settings.",
            "type": "object",
            "properties": {
                "allowExternalPaymentChargeBack": {
                    "description": "The flag to allow approved external payment charge back.",
                    "type": "boolean",
                    "example": false
                },
                "allowHoldDateOverride": {
                    "description": "The flag to allow overriding the hold dates.",
                    "type": "boolean",
                    "example": false
                },
                "allowIgnoreVoucherRestrictions": {
                    "description": "The flag to allow ingoring voucher restrictions.",
                    "type": "boolean",
                    "example": false
                },
                "allowVoucherIssuance": {
                    "description": "The flag to allow issuing vouchers.",
                    "type": "boolean",
                    "example": false
                },
                "allowManualAuthorization": {
                    "description": "The flag to manually authorize credit cards.",
                    "type": "boolean",
                    "example": false
                },
                "allowOverPay": {
                    "description": "The flag to allow overpayment.",
                    "type": "boolean",
                    "example": false
                },
                "allowUnderPay": {
                    "description": "The flag to allow underpayment.",
                    "type": "boolean",
                    "example": false
                },
                "allowUnvoidVoucher": {
                    "description": "The flag to allow unvoiding vouchers.",
                    "type": "boolean",
                    "example": false
                },
                "allowUseOfBinFraudTool": {
                    "description": "The flag to allow use of BIN fraud tool.",
                    "type": "boolean",
                    "example": false
                },
                "allowVoidVoucher": {
                    "description": "The flag to allow voided vouchers.",
                    "type": "boolean",
                    "example": false
                },
                "enableAutoPaymentVerification": {
                    "description": "The flag to enable auto-payment verification.",
                    "type": "boolean",
                    "example": false
                },
                "allowConfirmBookingWithPartialTicketing": {
                    "description": "The flag to allow confirming booking with partial ticketing.",
                    "type": "boolean",
                    "example": false
                },
                "allowUnmaskingCreditCardNumber": {
                    "description": "The flag to allow displaying the full credit card number without masking.",
                    "type": "boolean",
                    "example": false
                },
                "allowDisplayNoPaymentWarning": {
                    "description": "The flag to allow displaying a no payment warning.",
                    "type": "boolean",
                    "example": false
                },
                "requirePassengerOrContactForCreditFile": {
                    "description": "The flag to require passengers or contacts for a credit file.",
                    "type": "boolean",
                    "example": false
                },
                "requirePassengerOrContactForCreditShell": {
                    "description": "The flag to require passengers or contacts for a credit shell.",
                    "type": "boolean",
                    "example": false
                },
                "requireCommentsForCreditShell": {
                    "description": "The flag to require comments for credit shell.",
                    "type": "boolean",
                    "example": false
                },
                "disableAlternateAgAccount": {
                    "description": "The flag to disable alternate AG accounts.",
                    "type": "boolean",
                    "example": false
                },
                "creditShellCreditCode": {
                    "description": "The credit shell credit code.",
                    "type": "string",
                    "example": ""
                },
                "maxInstallmentOverride": {
                    "format": "int32",
                    "description": "Gets or sets a max number of installment overrides.",
                    "type": "integer"
                },
                "maxPaymentQueries": {
                    "format": "int32",
                    "description": "The max number of payment queries.",
                    "type": "integer"
                },
                "secondsTillStartPaymentQuery": {
                    "format": "int32",
                    "description": "The number of seconds till the payment query starts.",
                    "type": "integer"
                },
                "secondsTillRepeatPaymentQuery": {
                    "format": "int32",
                    "description": "The number of seconds till the payment query repeats.",
                    "type": "integer"
                },
                "holdsDaysBeforeDeparture": {
                    "description": "The number of days for a hold before booking date.",
                    "type": "string"
                },
                "holdsDaysAfterDeparture": {
                    "description": "The number of days for a hold after booking date.",
                    "type": "string"
                }
            }
        },
        "ShoppingAttributeGroup": {
            "description": "Model for a shopping attribute groups.",
            "required": [
                "shoppingAttributeGroupCode"
            ],
            "type": "object",
            "properties": {
                "inActive": {
                    "description": "Gets or sets the inactive flag for this shopping attribute group.",
                    "type": "boolean",
                    "example": false
                },
                "description": {
                    "description": "Gets or sets the description for this shopping attribute group.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "Gets or sets the name for this shopping attribute group.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "shoppingAttributeGroupCode": {
                    "description": "Gets or sets the code for this shopping attribute group.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ShoppingAttribute": {
            "description": "Model for a shopping attribute.",
            "required": [
                "shoppingAttributeCode"
            ],
            "type": "object",
            "properties": {
                "inActive": {
                    "description": "Gets or sets the flag for inactive for this shopping attribute.",
                    "type": "boolean",
                    "example": false
                },
                "description": {
                    "description": "Gets or sets the description of this shopping attribute.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "Gets or sets the name of this shopping attribute.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "shoppingAttributeCode": {
                    "description": "Gets or sets the code of this shopping attribute.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "shoppingAttributeGroupCodes": {
                    "description": "Gets or sets the list of group codes associated with this shopping attribute.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "shoppingAttributeType": {
                    "description": "Gets or sets the type of this shopping attribute.",
                    "enum": [
                        "None",
                        "Destination",
                        "Region",
                        "Event"
                    ],
                    "type": "string"
                }
            }
        },
        "SingleSignOnCredentials": {
            "description": "Defines the single sign on credentials.",
            "required": [
                "singleSignOn",
                "providerKey"
            ],
            "type": "object",
            "properties": {
                "applicationName": {
                    "description": "The optional name of the calling application",
                    "type": "string",
                    "example": ""
                },
                "singleSignOn": {
                    "description": "The single sign on token.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "channelType": {
                    "description": "The optional channel type invoking the communication with the server.",
                    "enum": [
                        "Default",
                        "Direct",
                        "Web",
                        "Gds",
                        "Api"
                    ],
                    "type": "string"
                },
                "providerKey": {
                    "description": "The unique single sign on provider key.",
                    "type": "string",
                    "example": ""
                },
                "providerName": {
                    "description": "The single sign on provider name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SingleSignOnProvider": {
            "description": "Defines the single sign on credentials.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The single sign on provider name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "authorizationEndpoint": {
                    "description": "The single sign on provider authorization endpoint.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "tokenEndpoint": {
                    "description": "The single sign on provider token endpoint.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "clientIdentifier": {
                    "description": "The single sign on provider client identifier.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "singleSignOnType": {
                    "description": "The single sign on type.",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Indicates if the single sign on provider is active.",
                    "type": "boolean",
                    "example": false
                },
                "providerKey": {
                    "description": "A unique identifier for the single sign on provider.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "UserSingleSignOnToken": {
            "description": "Defines a user's single sign on token.",
            "required": [
                "singleSignOn"
            ],
            "type": "object",
            "properties": {
                "singleSignOn": {
                    "description": "The single sign on token.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "providerKey": {
                    "description": "The unique single sign on provider key.",
                    "type": "string",
                    "example": ""
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The single sign on token expiration date.",
                    "type": "string"
                }
            }
        },
        "SingleSignOnTokenRequest": {
            "description": "Defines the single sign on token request.",
            "required": [
                "singleSignOn"
            ],
            "type": "object",
            "properties": {
                "singleSignOn": {
                    "description": "The single sign on token.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expirationDate": {
                    "format": "date-time",
                    "description": "The single sign on token expiration date.",
                    "type": "string"
                }
            }
        },
        "DeltaMapper[SingleSignOnTokenRequest]": {
            "$ref": "#/definitions/SingleSignOnTokenRequest"
        },
        "SsrByKeysRequest": {
            "description": "Request to add a leg, segment, or journey Ssr.",
            "required": [
                "keys"
            ],
            "type": "object",
            "properties": {
                "keys": {
                    "description": "Keys for the request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrByKeyRequest"
                    }
                },
                "forceWaveOnSell": {
                    "description": "Force wave on sell. Default value is false.",
                    "type": "boolean"
                },
                "currencyCode": {
                    "description": "Set the Currency Code if different than the booking currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "optimizationInputParameters": {
                    "description": "Optional list of input parameters for use by the Pricing Optimization Service.  If the\r\nPricing Optimization Service premium feature has not been purchased, any content in this\r\nlist will be ignored.  If the feature is enabled, input parameters in this list will be\r\nforwarded to the Pricing Optimization Service if the service has been configured to\r\nreceive them.\r\nThis is a dictionary of string, string values.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                }
            }
        },
        "SingleSsrByKeyRequest": {
            "description": "SSR detail for a specific passenger number.",
            "type": "object",
            "properties": {
                "count": {
                    "format": "int32",
                    "description": "The number of items to include. Defaults to 1.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "note": {
                    "description": "Notes associated with this Ssr.",
                    "type": "string",
                    "example": ""
                },
                "forceWaveOnSell": {
                    "description": "Force wave on sell. Default value is false.",
                    "type": "boolean"
                },
                "currencyCode": {
                    "description": "Set the Currency Code if different than the booking currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "optimizationInputParameters": {
                    "description": "Optional list of input parameters for use by the Pricing Optimization Service.  If the\r\nPricing Optimization Service premium feature has not been purchased, any content in this\r\nlist will be ignored.  If the feature is enabled, input parameters in this list will be\r\nforwarded to the Pricing Optimization Service if the service has been configured to\r\nreceive them.\r\nThis is a dictionary of string, string values.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                }
            }
        },
        "SsrAvailabilityRequest": {
            "description": "Represents an SSR availability request.",
            "required": [
                "trips",
                "passengerKeys",
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "trips": {
                    "description": "Filter the trips requested.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MarketInformation"
                    }
                },
                "passengerKeys": {
                    "description": "Filter the passenger numbers.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "currencyCode": {
                    "description": "Set the Currency Code if different than the booking currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "optimizationInputParameters": {
                    "description": "Optional list of input parameters for use by the Pricing Optimization Service.  If the\r\nPricing Optimization Service premium feature has not been purchased, any content in this\r\nlist will be ignored.  If the feature is enabled, input parameters in this list will be\r\nforwarded to the Pricing Optimization Service if the service has been configured to\r\nreceive them.\r\nThis is a dictionary of string, string values.",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                }
            }
        },
        "SsrAvailability": {
            "description": "Model containing all Ssr information.",
            "type": "object",
            "properties": {
                "journeySsrs": {
                    "description": "Journey Ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrByJourney"
                    }
                },
                "segmentSsrs": {
                    "description": "Segment Ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrBySegment"
                    }
                },
                "legSsrs": {
                    "description": "Leg Ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrByLeg"
                    }
                }
            }
        },
        "SsrByJourney": {
            "description": "Model information for a sell service request (SSR) tied to a specific journey.",
            "type": "object",
            "properties": {
                "journeyKey": {
                    "description": "The unique identifier of the journey.",
                    "type": "string",
                    "example": ""
                },
                "journeyDetails": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "Journey market information."
                },
                "ssrs": {
                    "description": "The associated Ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrDetail"
                    }
                }
            }
        },
        "SsrBySegment": {
            "description": "Model information for a sell service request (SSR) tied to a specific segment.",
            "type": "object",
            "properties": {
                "segmentKey": {
                    "description": "The unique identifier of the segment of a journey.",
                    "type": "string",
                    "example": ""
                },
                "segmentDetails": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "Segment market information."
                },
                "ssrs": {
                    "description": "The associated Ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrDetail"
                    }
                }
            }
        },
        "SsrByLeg": {
            "description": "Model information for a sell service request (SSR) tied to a specific leg.",
            "type": "object",
            "properties": {
                "legKey": {
                    "description": "The unique identifier of the leg of a segment.",
                    "type": "string",
                    "example": ""
                },
                "legDetails": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "Leg market information."
                },
                "ssrs": {
                    "description": "The associated Ssrs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrDetail"
                    }
                }
            }
        },
        "SsrDetail": {
            "description": "Ssr detail model.",
            "type": "object",
            "properties": {
                "ssrCode": {
                    "description": "Gets the SSR code.",
                    "type": "string",
                    "example": ""
                },
                "passengersAvailability": {
                    "description": "Get the passenger keys this is available for",
                    "type": "object",
                    "properties": {
                        "*": {
                            "$ref": "#/definitions/PassengerSsrAvailability"
                        }
                    }
                },
                "ssrType": {
                    "description": "Gets the SSR type.",
                    "enum": [
                        "Standard",
                        "Infant",
                        "Meal",
                        "BaggageAllowance",
                        "TravelLineMeal"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Gets the SSR name.",
                    "type": "string",
                    "example": ""
                },
                "limitPerPassenger": {
                    "format": "int32",
                    "description": "Gets the limit per passenger.",
                    "type": "integer"
                },
                "available": {
                    "format": "int32",
                    "description": "Gets the amount available.",
                    "type": "integer"
                },
                "inventoryControlled": {
                    "description": "Gets the SSR availability types of inventory controlled.",
                    "type": "boolean",
                    "example": false
                },
                "seatDependent": {
                    "description": "Gets the SSR availability type of seat dependent.",
                    "type": "boolean",
                    "example": false
                },
                "feeCode": {
                    "description": "Gets the fee code.",
                    "type": "string",
                    "example": ""
                },
                "nest": {
                    "description": "Gets the SSR nest.",
                    "type": "string",
                    "example": ""
                },
                "seatRestriction": {
                    "description": "Gets the seat restriction.",
                    "enum": [
                        "Undefined",
                        "AlwaysAllowed",
                        "DefaultAllowed",
                        "DefaultRestricted"
                    ],
                    "type": "string"
                }
            }
        },
        "SsrGroup": {
            "description": "The sell service request (SSR) group model.",
            "type": "object",
            "properties": {
                "ssrGroupCode": {
                    "description": "The SSR group Code.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The Name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                },
                "ssrs": {
                    "description": "The Collection of SSRs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SsrGroupItem"
                    }
                }
            }
        },
        "SsrGroupItem": {
            "description": "The SSR group SSR model.",
            "type": "object",
            "properties": {
                "ssrGroupCode": {
                    "description": "The SSR group Code.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "ssrCode": {
                    "description": "The SSR Code.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "SsrNest": {
            "description": "The SSR nest model.",
            "type": "object",
            "properties": {
                "ssrNestCode": {
                    "description": "The SSR nest code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                },
                "ssrs": {
                    "description": "The SSR.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Ssr"
                    }
                }
            }
        },
        "SsrRestrictionResult": {
            "description": "The SSR Restriction Result model.",
            "type": "object",
            "properties": {
                "inActive": {
                    "description": "Gets or sets the inactive flag for this model.",
                    "type": "boolean",
                    "example": false
                },
                "ssrRestrictionResultCode": {
                    "description": "Gets or sets the code for this model",
                    "maxLength": 32,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "Gets or sets the name for this model.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "StandByPriority": {
            "description": "The stand by priority model.",
            "type": "object",
            "properties": {
                "standByPriorityCode": {
                    "description": "The priority code.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "the name.",
                    "type": "string",
                    "example": ""
                },
                "priorityCategory": {
                    "description": "the priority category",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "the in active.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "StationCategory": {
            "description": "The station category model.",
            "type": "object",
            "properties": {
                "stationCategoryCode": {
                    "description": "The station category code.",
                    "type": "string"
                },
                "name": {
                    "description": "The name.",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "THe in active.",
                    "type": "boolean",
                    "example": false
                },
                "allowed": {
                    "description": "<b>Deprecated</b> - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Suffix": {
            "description": "The suffix model.",
            "required": [
                "suffixCode"
            ],
            "type": "object",
            "properties": {
                "suffixCode": {
                    "description": "The suffix code.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The name.",
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "Is InActive.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ThreeDSecurePaymentMethodRequest": {
            "description": "Defines information needed for a generic voucher payment requested with ThreeDSecure validation.",
            "required": [
                "paymentMethodCode",
                "amount"
            ],
            "type": "object",
            "properties": {
                "paRes": {
                    "type": "string",
                    "example": ""
                },
                "paymentMethodCode": {
                    "description": "Payment method code.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount to apply.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "number"
                },
                "paymentFields": {
                    "description": "Dynamic field information used for validation related to the specific payment type.\r\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList",
                    "type": "object",
                    "properties": {
                        "*": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "currencyCode": {
                    "description": "The currency code. This will default to the bookings currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "installments": {
                    "format": "int32",
                    "description": "The requested number of installments. Defaults to 1.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "TimeZone": {
            "description": "The timezone model.",
            "required": [
                "timeZoneCode"
            ],
            "type": "object",
            "properties": {
                "inActive": {
                    "description": "Gets or sets the inactive flag for this time zone.",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "Gets or sets the name of this time zone.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "standardVariation": {
                    "format": "int32",
                    "description": "Gets or sets the standard variation of this time zone",
                    "type": "integer"
                },
                "timeZoneCode": {
                    "description": "Gets or sets the time zone code of this time zone.",
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "example": ""
                },
                "timeZoneVariations": {
                    "description": "Gets or sets a list of Time zone variations associated with this time zone.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TimeZoneVariation"
                    }
                }
            }
        },
        "TimeZoneVariation": {
            "description": "The time zone variation model.",
            "type": "object",
            "properties": {
                "endUtc": {
                    "format": "date-time",
                    "description": "Gets or sets the End UTC time variation.",
                    "type": "string"
                },
                "startUtc": {
                    "format": "date-time",
                    "description": "Gets or sets the Start UTC time variation.",
                    "type": "string"
                },
                "variation": {
                    "format": "int32",
                    "description": "Gets or sets the variation.",
                    "type": "integer"
                }
            }
        },
        "Title": {
            "description": "The Title.",
            "type": "object",
            "properties": {
                "titleKey": {
                    "description": "The Title key.",
                    "maxLength": 6,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The description.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "gender": {
                    "description": "The gender.",
                    "enum": [
                        "XX",
                        "Male",
                        "Female"
                    ],
                    "type": "string"
                },
                "weightCategory": {
                    "description": "The weight category.",
                    "enum": [
                        "Male",
                        "Female",
                        "Child"
                    ],
                    "type": "string"
                },
                "inActive": {
                    "description": "The InActive.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "TokenRequest": {
            "description": "Defines the request to gain access to the API.",
            "type": "object",
            "properties": {
                "applicationName": {
                    "description": "The optional name of the calling application.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TravelClass": {
            "description": "This model represents the passenger summary info per cabin.",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "travelClassCode": {
                    "description": "Gets or sets the code for this travel class.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "Gets or sets the name for this travel class.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "cabinOfServiceCode": {
                    "description": "Gets or sets the cabin of service code for this travel class.",
                    "type": "string",
                    "example": ""
                },
                "systemControlled": {
                    "description": "Gets or sets the system controlled flag for this travel class.",
                    "type": "boolean",
                    "example": false
                },
                "inActive": {
                    "description": "Gets or sets the inactive flag for this travel class.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "DequeueTravelSummary": {
            "description": "Represents an travel entry when dequeued.",
            "required": [
                "information"
            ],
            "type": "object",
            "properties": {
                "summary": {
                    "$ref": "#/definitions/TravelSummary",
                    "description": "Travel summary."
                },
                "travelQueueKey": {
                    "description": "The unique travel queue item key.",
                    "type": "string",
                    "example": ""
                },
                "information": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "Market designator."
                },
                "processStatus": {
                    "description": "Process status.",
                    "enum": [
                        "Ready",
                        "Pending"
                    ],
                    "type": "string"
                },
                "notes": {
                    "description": "Notes.",
                    "type": "string",
                    "example": ""
                },
                "processState": {
                    "description": "Process state.",
                    "enum": [
                        "Default",
                        "SegmentsConfirmed",
                        "BookingBalanced",
                        "Other",
                        "Complete"
                    ],
                    "type": "string"
                },
                "priorityCode": {
                    "description": "Priority code.",
                    "type": "string"
                },
                "inProgress": {
                    "description": "Status.",
                    "type": "boolean",
                    "example": false
                },
                "priorityDate": {
                    "format": "date-time",
                    "description": "Priority date.",
                    "type": "string"
                },
                "statusReset": {
                    "format": "date-time",
                    "description": "Date status reset.",
                    "type": "string"
                }
            }
        },
        "TravelSummary": {
            "description": "Represents the travel summary information.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status of the flight summary.",
                    "enum": [
                        "Normal",
                        "Closed",
                        "Canceled",
                        "Suspended",
                        "ClosedPending",
                        "BlockAllActivities",
                        "Mishap"
                    ],
                    "type": "string"
                },
                "number": {
                    "description": "Number of the flight.",
                    "type": "string",
                    "example": ""
                },
                "scheduledDepartureTime": {
                    "format": "date-time",
                    "description": "Scheduled departure time.",
                    "type": "string"
                },
                "scheduledArrivalTime": {
                    "format": "date-time",
                    "description": "Scheduled arrival time.",
                    "type": "string"
                },
                "estimatedDepartureTime": {
                    "format": "date-time",
                    "description": "Estimated departure time.",
                    "type": "string"
                },
                "estimatedArrivalTime": {
                    "format": "date-time",
                    "description": "Estimated arrival time.",
                    "type": "string"
                },
                "actualDepartureTime": {
                    "format": "date-time",
                    "description": "Actual departure time.",
                    "type": "string"
                },
                "actualArrivalTime": {
                    "format": "date-time",
                    "description": "Actual arrival time.",
                    "type": "string"
                },
                "departureLtv": {
                    "format": "int32",
                    "description": "Departure LTV time offset in minutes.  To convert from Local time to UTC time you would\r\nneed to subtract this value for the current local time.",
                    "type": "integer"
                },
                "arrivalLtv": {
                    "format": "int32",
                    "description": "Arrival LTV time offset in minutes.  To convert from Local time to UTC time you would\r\nneed to subtract this value for the current local time.",
                    "type": "integer"
                },
                "equipmentType": {
                    "description": "Equipment type.",
                    "type": "string",
                    "example": ""
                },
                "equipmentTypeSuffix": {
                    "description": "Equipment type suffix.",
                    "type": "string",
                    "example": ""
                },
                "marketingConfigurationCode": {
                    "description": "Marketing configuration code.",
                    "type": "string",
                    "example": ""
                },
                "salesConfigurationCode": {
                    "description": "Sales configuration code.",
                    "type": "string",
                    "example": ""
                },
                "market": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "InventoryLegKey about the flight."
                }
            }
        },
        "TravelQueueItemRequest": {
            "description": "API request object used to enqueue a new travel queue item.",
            "required": [
                "item",
                "queue"
            ],
            "type": "object",
            "properties": {
                "item": {
                    "$ref": "#/definitions/TravelQueueItemBase",
                    "description": "Flight queue item to enqueue on the matching flight queues."
                },
                "queue": {
                    "$ref": "#/definitions/TravelQueueRequest",
                    "description": "Queue information about this item."
                },
                "queueEventCode": {
                    "description": "Queue event code used for matching flight queues.",
                    "type": "string",
                    "example": ""
                },
                "timeEventCode": {
                    "description": "Time event code used for matching flight queues.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TravelQueueItemBase": {
            "description": "Model representing the travel queue item without a unique key.",
            "required": [
                "information"
            ],
            "type": "object",
            "properties": {
                "information": {
                    "$ref": "#/definitions/MarketInformation",
                    "description": "Market designator."
                },
                "processStatus": {
                    "description": "Process status.",
                    "enum": [
                        "Ready",
                        "Pending"
                    ],
                    "type": "string"
                },
                "notes": {
                    "description": "Notes.",
                    "type": "string",
                    "example": ""
                },
                "processState": {
                    "description": "Process state.",
                    "enum": [
                        "Default",
                        "SegmentsConfirmed",
                        "BookingBalanced",
                        "Other",
                        "Complete"
                    ],
                    "type": "string"
                },
                "priorityCode": {
                    "description": "Priority code.",
                    "type": "string"
                },
                "inProgress": {
                    "description": "Status.",
                    "type": "boolean",
                    "example": false
                },
                "priorityDate": {
                    "format": "date-time",
                    "description": "Priority date.",
                    "type": "string"
                },
                "statusReset": {
                    "format": "date-time",
                    "description": "Date status reset.",
                    "type": "string"
                }
            }
        },
        "TravelQueueRequest": {
            "description": "Defines a travel queue query.",
            "required": [
                "travelQueueCode"
            ],
            "type": "object",
            "properties": {
                "travelQueueCode": {
                    "description": "The required queue code.",
                    "type": "string",
                    "example": ""
                },
                "subQueueCode": {
                    "description": "The optional sub queue code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "BookingSellRequest": {
            "description": "Trip sell request represents the data needed to sell journeys to a booking.",
            "required": [
                "passengers",
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "journeys": {
                    "$ref": "#/definitions/JourneySellRequest",
                    "description": "The journey information."
                },
                "contact": {
                    "$ref": "#/definitions/ContactRequest",
                    "description": "The primary contact."
                },
                "passengers": {
                    "description": "The list of passengers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BookingPassengerRequest"
                    }
                },
                "residentCountry": {
                    "description": "The acting resident country.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The desired currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "promotionCode": {
                    "description": "The promo code to apply.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceOrganization": {
                    "description": "The acting source organization code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "JourneySellRequest": {
            "description": "Journey request represents the trip sell request but with only information needed for a booking sell.",
            "required": [
                "keys"
            ],
            "type": "object",
            "properties": {
                "keys": {
                    "description": "The list of selected sell keys to be added to the booking.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SellKey"
                    }
                },
                "preventOverlap": {
                    "description": "Used to explicitly control support for flight overlaps. It works together with the ‘Allow Sell of Flight Overlap’\r\nrole setting.  Overlaps will be allowed only when PreventOverlaps is FALSE and the user has permissions to sell\r\noverlaps.",
                    "type": "boolean"
                },
                "suppressPassengerAgeValidation": {
                    "description": "Flag indicating if passenger and infant age validation will be skipped.",
                    "type": "boolean"
                }
            }
        },
        "BookingPassengerRequest": {
            "description": "Defines the the passenger and associated ssr request.",
            "required": [
                "passenger"
            ],
            "type": "object",
            "properties": {
                "passenger": {
                    "$ref": "#/definitions/PassengerRequest",
                    "description": "The passenger information."
                },
                "discountCode": {
                    "description": "The passenger discount code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "ssrs": {
                    "description": "The ssrs to initally add.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JourneySsrRequest"
                    }
                }
            }
        },
        "PassengerRequest": {
            "description": "Defines the passenger request details.",
            "required": [
                "passengerTypeCode"
            ],
            "type": "object",
            "properties": {
                "customerNumber": {
                    "description": "The passenger customer number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The passenger's name."
                },
                "discountCode": {
                    "description": "The discount code associated with the passenger type.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "program": {
                    "$ref": "#/definitions/PassengerProgram",
                    "description": "The passenger programs."
                },
                "info": {
                    "$ref": "#/definitions/PassengerInformation",
                    "description": "Additional passenger information."
                },
                "travelDocuments": {
                    "description": "Travel Documents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TravelDocumentCreateRequest"
                    }
                },
                "addresses": {
                    "description": "The passengers addresses.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PassengerAddress"
                    }
                },
                "infant": {
                    "$ref": "#/definitions/Infant",
                    "description": "The optional infant associated with this passenger."
                },
                "passengerTypeCode": {
                    "description": "The passenger type code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "JourneySsrRequest": {
            "description": "SSR request for a single journey Ssr.",
            "required": [
                "journeyKey",
                "ssrCode"
            ],
            "type": "object",
            "properties": {
                "journeyKey": {
                    "description": "The journey key.",
                    "type": "string",
                    "example": ""
                },
                "ssrCode": {
                    "description": "The Ssr code.",
                    "type": "string",
                    "example": ""
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items to include. Defaults to 1.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "note": {
                    "description": "Notes associated with this Ssr.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TripDetails": {
            "description": "Represents the trip status details version two model.",
            "type": "object",
            "properties": {
                "legCrossReferences": {
                    "description": "Represents the leg cross references.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LegCrossReference"
                    }
                },
                "cabinDetails": {
                    "description": "Represents the list of cabin details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CabinDetails"
                    }
                },
                "checkinLid": {
                    "format": "int32",
                    "description": "Represents the total number of passengers allowed to checkin.",
                    "type": "integer"
                }
            }
        },
        "CabinDetails": {
            "description": "Represents the cabin details model.",
            "type": "object",
            "properties": {
                "cabinOfService": {
                    "description": "Represents the code for the cabin of service.",
                    "type": "string"
                },
                "adjustedSeatCount": {
                    "format": "int32",
                    "description": "Represents the adjusted seat count of the leg for the cabin.",
                    "type": "integer"
                },
                "maximumSeatCount": {
                    "format": "int32",
                    "description": "Represents the maximum number of seats authorized to be sold on a flight.",
                    "type": "integer"
                },
                "seatsSold": {
                    "format": "int32",
                    "description": "Represents the number of seats that have been sold.",
                    "type": "integer"
                }
            }
        },
        "TripDowngradeRequest": {
            "description": "Defines a trip downgrade request.",
            "required": [
                "segmentKeys"
            ],
            "type": "object",
            "properties": {
                "segmentKeys": {
                    "description": "The collection of segments that can be downgraded.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "inventoryControl": {
                    "description": "The reserving inventory action of the upgrade once sold by the system.",
                    "enum": [
                        "HoldSpace",
                        "SoftHoldSpace",
                        "ClaimSpace",
                        "OversellSpace",
                        "StandBy"
                    ],
                    "type": "string"
                }
            }
        },
        "TripInformationQuery": {
            "description": "The trip information query model contains data to perform a \r\ntrip information search.",
            "required": [
                "beginDate"
            ],
            "type": "object",
            "properties": {
                "daysOfWeek": {
                    "description": "The days of the week to include in the provided date range.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "type": "string"
                    }
                },
                "endDate": {
                    "format": "date-time",
                    "description": "The end date of the trip information search.",
                    "type": "string"
                },
                "beginDate": {
                    "format": "date-time",
                    "description": "The starting date of the trip information search.",
                    "type": "string"
                },
                "equipmentFilter": {
                    "$ref": "#/definitions/EquipmentFilter",
                    "description": "The optional equipment filter for the search."
                },
                "startTimeInterval": {
                    "description": "The starting time of the trip information search.",
                    "type": "string"
                },
                "identifier": {
                    "description": "The transportation identifier, such as a flight number.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "originStations": {
                    "description": "The list of departure stations.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "endTimeInterval": {
                    "description": "The end time of the trip information search.",
                    "type": "string"
                },
                "carrierCode": {
                    "description": "The carrier code.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "destinationStations": {
                    "description": "The list of arrival stations.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "flightType": {
                    "description": "The flight type.",
                    "enum": [
                        "All",
                        "NonStop",
                        "Through",
                        "Direct",
                        "Connect"
                    ],
                    "type": "string"
                },
                "opSuffix": {
                    "description": "The operational suffix.",
                    "type": "string"
                },
                "searchXRef": {
                    "description": "Indicates whether to include marketing codeshare segments.\r\nSetting this flag to true will request all marketing codeshare segments \r\nin addition to the operational ones.",
                    "type": "boolean",
                    "example": false
                },
                "excludeMarketedFlights": {
                    "description": "When set to true, all flights with a non-blank operating carrier are filtered out of the result. \r\nThe DB calls the parameter noOperatingCarrier.",
                    "type": "boolean",
                    "example": false
                },
                "numberOfJourneys": {
                    "format": "int32",
                    "description": "When set to null, there will be no limit to the number of journeys to be returned.",
                    "type": "integer"
                }
            }
        },
        "EquipmentFilter": {
            "description": "Represents a filter for equipment type.",
            "required": [
                "equipmentType",
                "equipmentTypeSuffix"
            ],
            "type": "object",
            "properties": {
                "equipmentType": {
                    "description": "The type of equipment for the journey.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "equipmentTypeSuffix": {
                    "description": "The suffix associated with the equipment type.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "ScheduleDetail": {
            "description": "Market detail contains the abstracted market data describing the earliest and\r\nlatest STD.",
            "type": "object",
            "properties": {
                "departureDate": {
                    "format": "date-time",
                    "description": "Date this market detail corresponds to.",
                    "type": "string"
                },
                "earliest": {
                    "format": "date-time",
                    "description": "Earliest std on this departure date.",
                    "type": "string"
                },
                "latest": {
                    "format": "date-time",
                    "description": "Latest std on this deparure date.",
                    "type": "string"
                },
                "flights": {
                    "format": "int64",
                    "description": "Number of flights on the given departure date.",
                    "type": "integer"
                }
            }
        },
        "TripSellRequest": {
            "description": "Trip sell request represents the data needed to sell journeys to a booking.",
            "required": [
                "passengers",
                "currencyCode"
            ],
            "type": "object",
            "properties": {
                "preventOverlap": {
                    "description": "Used to explicitly control support for flight overlaps. It works together with the ‘Allow Sell of Flight Overlap’\r\nrole setting.  Overlaps will be allowed only when PreventOverlaps is FALSE and the user has permissions to sell\r\noverlaps.",
                    "type": "boolean"
                },
                "keys": {
                    "description": "The list of selected sell keys to be added to the booking.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SellKey"
                    }
                },
                "suppressPassengerAgeValidation": {
                    "description": "Flag indicating if passenger and infant age validation will be skipped.",
                    "type": "boolean"
                },
                "passengers": {
                    "$ref": "#/definitions/PassengerTypeCriteria",
                    "description": "The list of passengers."
                },
                "currencyCode": {
                    "description": "The desired currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "infantCount": {
                    "format": "int32",
                    "description": "The number of infants to be added.",
                    "type": "integer"
                },
                "promotionCode": {
                    "description": "The promo code to apply.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sourceOrganization": {
                    "description": "The acting source organization code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TripStatusv2": {
            "description": "Represents the trip status version two model.",
            "type": "object",
            "properties": {
                "tripStatusKey": {
                    "description": "Represents the trip status key.",
                    "type": "string",
                    "example": ""
                },
                "operationDetails": {
                    "$ref": "#/definitions/OperationDetails",
                    "description": "Represents the operation details."
                },
                "originDetails": {
                    "$ref": "#/definitions/OriginDetails",
                    "description": "Represents details related to the trip origin location."
                },
                "destinationDetails": {
                    "$ref": "#/definitions/DestinationDetails",
                    "description": "Represents details related to the trip destination location."
                },
                "modifiedAgentName": {
                    "description": "The name of the agent that last modified this data.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "verified": {
                    "description": "Represents the verified bit.",
                    "type": "boolean",
                    "example": false
                },
                "irop": {
                    "description": "Represents the IROP flag.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "OperationDetails": {
            "description": "Represents the operation details model.",
            "type": "object",
            "properties": {
                "tailNumber": {
                    "description": "Represents the tail number for the aircraft.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "equipmentType": {
                    "description": "Represents the equipment type for the leg.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "equipmentTypeSuffix": {
                    "description": "Represents the equipment type suffix for the leg.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "Represents the trip status.",
                    "enum": [
                        "Normal",
                        "Closed",
                        "Canceled",
                        "Suspended",
                        "ClosedPending",
                        "BlockAllActivities",
                        "Mishap"
                    ],
                    "type": "string"
                },
                "identifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "Represents the transportation identifier."
                },
                "tripOperationTimes": {
                    "$ref": "#/definitions/TripOperationTimes",
                    "description": "Represents the trip operation time events."
                },
                "counts": {
                    "$ref": "#/definitions/OperationCounts",
                    "description": "Represents the various counts related to the operation."
                },
                "delays": {
                    "description": "A list of trip operation delays.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TripOperationDelay"
                    }
                },
                "payloads": {
                    "description": "Represents the list of trip operation payloads.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TripOperationPayload"
                    }
                },
                "crewList": {
                    "description": "Represents the list of crew members.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TripOperationCrew"
                    }
                },
                "comments": {
                    "description": "Represents the comments related to this trip operation.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TripOperationComment"
                    }
                },
                "historyList": {
                    "description": "Represents the history of this trip operation.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TripOperationHistory"
                    }
                }
            }
        },
        "OriginDetails": {
            "description": "Represents the origin details model.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "Represents the departure status.",
                    "enum": [
                        "Default",
                        "Cancelled",
                        "Boarding",
                        "SeeAgent",
                        "Delayed",
                        "Departed"
                    ],
                    "type": "string"
                },
                "note": {
                    "description": "Represents additional information about the\r\ntrip operation station.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "gate": {
                    "$ref": "#/definitions/GateInformation",
                    "description": "Represents the gate details."
                },
                "station": {
                    "description": "The station code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "DestinationDetails": {
            "description": "Represents the destination details model.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "Represents the arrival status.",
                    "enum": [
                        "Default",
                        "Cancelled",
                        "Arrived",
                        "SeeAgent",
                        "Delayed"
                    ],
                    "type": "string"
                },
                "note": {
                    "description": "Represents additional information about the\r\ntrip operation station.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "baggageClaim": {
                    "description": "Represents the airline defined location where the trip's\r\nluggage is to be retrieved.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "gate": {
                    "$ref": "#/definitions/GateInformation",
                    "description": "Represents the gate details."
                },
                "station": {
                    "description": "The station code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TripOperationTimes": {
            "description": "Represents the flight operation time events.  Null property values indicate\r\nthat there is no recorded time event for the given property name.",
            "type": "object",
            "properties": {
                "touchDownTimes": {
                    "$ref": "#/definitions/TripOperationEvents",
                    "description": "Represents the touch down times for this flight operation."
                },
                "onBlockTimes": {
                    "$ref": "#/definitions/TripOperationEvents",
                    "description": "Represents the on-block times for this flight operation."
                },
                "departureTimes": {
                    "$ref": "#/definitions/DepartureEvent",
                    "description": "Represents the departure times for this flight operation."
                },
                "offBlockTime": {
                    "format": "date-time",
                    "description": "Represents the off-block time for this flight operation.",
                    "type": "string"
                },
                "airborneTime": {
                    "format": "date-time",
                    "description": "Represents the airborne time for this flight operation.",
                    "type": "string"
                },
                "crewReportTime": {
                    "format": "date-time",
                    "description": "Represents the crew report time for this flight operation.",
                    "type": "string"
                },
                "takeOffTime": {
                    "format": "date-time",
                    "description": "Represents the take-off time for this flight operation.",
                    "type": "string"
                },
                "movementAfterPushBackTime": {
                    "format": "date-time",
                    "description": "Represents the movement after push-back time (taxi) for this flight operation.",
                    "type": "string"
                },
                "nextInformationTime": {
                    "format": "date-time",
                    "description": "Represents the next information time for this flight operation.",
                    "type": "string"
                },
                "reclearanceTime": {
                    "format": "date-time",
                    "description": "Represents the reclearance time for this flight operation.",
                    "type": "string"
                },
                "returnToRampTime": {
                    "format": "date-time",
                    "description": "Represents the return to ramp time for this flight operation.",
                    "type": "string"
                },
                "scheduledArrivalTime": {
                    "format": "date-time",
                    "description": "Represents the scheduled arrival time for this flight operation.",
                    "type": "string"
                }
            }
        },
        "OperationCounts": {
            "description": "Represents the operation counts model.",
            "type": "object",
            "properties": {
                "boardingCount": {
                    "format": "int32",
                    "description": "Represents the number of passengers that have boarded the trip equipment.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "boardingSequence": {
                    "format": "int32",
                    "description": "Represents the boarding sequence number.  Starts at 1 for each leg.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "infantCount": {
                    "format": "int32",
                    "description": "Represents the number of infants not occupying a seat.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "nonRevenueCount": {
                    "format": "int32",
                    "description": "Represents the number of non-revenue passengers.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "revenueCount": {
                    "format": "int32",
                    "description": "Represents the number of revenue passengers.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "checkInCount": {
                    "format": "int32",
                    "description": "Represents the number of passengers that have checked-in.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "fuelOnboardOut": {
                    "format": "int32",
                    "description": "Represents the amount of fuel onboard the aircraft/equipment upon departure.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "fuelOnboardIn": {
                    "format": "int32",
                    "description": "Represents the amount of fuel onboard the aircraft/equipment upon arrival.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "upLiftFuel": {
                    "format": "int32",
                    "description": "Represents the amount of fuel uplifted to the aircraft/equipment.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "upLiftWeight": {
                    "format": "int32",
                    "description": "Represents the uplift weight.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "cockpitCrewCount": {
                    "format": "int32",
                    "description": "Represents the number of crew in the cockpit.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                },
                "cabinCrewCount": {
                    "format": "int32",
                    "description": "Represents the number of crew in the cabin.",
                    "maximum": 32767,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "TripOperationDelay": {
            "description": "Represents the trip operation delay data.",
            "type": "object",
            "properties": {
                "tripOperationDelayKey": {
                    "description": "The unique identification for the trip operation delay.",
                    "type": "string",
                    "example": ""
                },
                "delayCode": {
                    "description": "The delay code.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "delayMinutes": {
                    "format": "int32",
                    "description": "The number of minutes for this delay.",
                    "type": "integer"
                },
                "note": {
                    "description": "The note for this delay, containing extra information about the delay\r\n(if any).",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "includeMvtMessage": {
                    "description": "The flag to include the MVT message.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "TripOperationPayload": {
            "description": "Represents the payload data for the trip operation.",
            "type": "object",
            "properties": {
                "payloadType": {
                    "description": "The type of payload this model represents, expressed as a single\r\ncharacter.",
                    "type": "string"
                },
                "compartment": {
                    "description": "The compartment for the payload this model represents, expressed \r\nas a single character.",
                    "type": "string"
                },
                "payloadCount": {
                    "format": "int32",
                    "description": "The payload count.",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                },
                "weight": {
                    "format": "int32",
                    "description": "The total payload weight.",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "TripOperationCrew": {
            "description": "Represents the crew of an trip operation.",
            "type": "object",
            "properties": {
                "tripOperationCrewKey": {
                    "description": "The unique identifier for the trip crew operation.",
                    "type": "string",
                    "example": ""
                },
                "crewType": {
                    "description": "The crew personnel type.",
                    "enum": [
                        "Default",
                        "Pilot",
                        "CoPilot",
                        "CockpitJumpseat",
                        "CabinJumpseat",
                        "CabinCrew"
                    ],
                    "type": "string"
                }
            }
        },
        "TripOperationComment": {
            "description": "Represents a comment for a trip operation.",
            "type": "object",
            "properties": {
                "tripOperationCommentKey": {
                    "description": "The unique identification number for the comment.",
                    "type": "string",
                    "example": ""
                },
                "text": {
                    "description": "Represents the comment text.",
                    "maxLength": 800,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "Represents the comment type.",
                    "enum": [
                        "Default",
                        "Reservation",
                        "Operation",
                        "PitLoad",
                        "Irop",
                        "AppsOverride",
                        "ManualAppsOverride"
                    ],
                    "type": "string"
                }
            }
        },
        "TripOperationHistory": {
            "description": "Represents the history of an trip operation.",
            "type": "object",
            "properties": {
                "tripOperationHistoryKey": {
                    "description": "The unique identification for the trip operation history.",
                    "type": "string",
                    "example": ""
                },
                "tripOperationHistoryCode": {
                    "description": "Represents the code for the event that triggered an entry into history.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "detail": {
                    "description": "Represents the history details.",
                    "maxLength": 6000,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "createdHistoryDate": {
                    "format": "date-time",
                    "description": "The date when this history item was created.",
                    "type": "string"
                }
            }
        },
        "TripOperationEvents": {
            "description": "Represents the flight operation time events for an estimated,\r\nactual, and forced time event.",
            "type": "object",
            "properties": {
                "forced": {
                    "format": "date-time",
                    "description": "Represents the forced time for this event type.",
                    "type": "string"
                },
                "actual": {
                    "format": "date-time",
                    "description": "Represents the actual time for this event type.",
                    "type": "string"
                },
                "estimated": {
                    "format": "date-time",
                    "description": "Represents the estimated time for this event type.",
                    "type": "string"
                }
            }
        },
        "UpgradeSegment": {
            "description": "Defines a available upgrade segment.",
            "type": "object",
            "properties": {
                "transportationIdentifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The segments flight designator."
                },
                "departureTime": {
                    "format": "date-time",
                    "description": "The standard time of departure.",
                    "type": "string"
                },
                "departureStation": {
                    "description": "The departure station.",
                    "type": "string",
                    "example": ""
                },
                "arrivalStation": {
                    "description": "The arrival station.",
                    "type": "string",
                    "example": ""
                },
                "upgrades": {
                    "description": "The list of available upgrades.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Upgrade"
                    }
                }
            }
        },
        "Upgrade": {
            "description": "Defines the upgrade information.",
            "type": "object",
            "properties": {
                "upgradeKey": {
                    "description": "The upgrade key.",
                    "type": "string",
                    "example": ""
                },
                "originalClassOfService": {
                    "description": "The current/original class of service.",
                    "type": "string",
                    "example": ""
                },
                "upgradeClassOfService": {
                    "description": "The new/upgrade class of service.",
                    "type": "string",
                    "example": ""
                },
                "available": {
                    "format": "int32",
                    "description": "The count of upgrades available.",
                    "type": "integer"
                },
                "fee": {
                    "$ref": "#/definitions/PassengerFee",
                    "description": "The passenger fee amount."
                }
            }
        },
        "TripUpgradeRequest": {
            "description": "Defines the trip upgrade request.",
            "required": [
                "upgradeKeys"
            ],
            "type": "object",
            "properties": {
                "upgradeKeys": {
                    "description": "The list of segment upgrades.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": ""
                    }
                },
                "inventoryControl": {
                    "description": "The reserving inventory action of the upgrade once sold by the system.",
                    "enum": [
                        "HoldSpace",
                        "SoftHoldSpace",
                        "ClaimSpace",
                        "OversellSpace",
                        "StandBy"
                    ],
                    "type": "string"
                },
                "overrideFee": {
                    "description": "Flag indicating to override the fee if permissions allow it.",
                    "type": "boolean"
                },
                "collectedCurrencyCode": {
                    "description": "The option currency code if different than the bookings currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "TripUpgradeBaseRequest": {
            "description": "Defines the trip upgrade request.",
            "type": "object",
            "properties": {
                "inventoryControl": {
                    "description": "The reserving inventory action of the upgrade once sold by the system.",
                    "enum": [
                        "HoldSpace",
                        "SoftHoldSpace",
                        "ClaimSpace",
                        "OversellSpace",
                        "StandBy"
                    ],
                    "type": "string"
                },
                "overrideFee": {
                    "description": "Flag indicating to override the fee if permissions allow it.",
                    "type": "boolean"
                },
                "collectedCurrencyCode": {
                    "description": "The option currency code if different than the bookings currency code.",
                    "maxLength": 3,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "User": {
            "description": "Defines a unique user.",
            "required": [
                "username",
                "codes",
                "roles"
            ],
            "type": "object",
            "properties": {
                "userKey": {
                    "description": "The unique user key.",
                    "type": "string",
                    "example": ""
                },
                "lastAlertReadDate": {
                    "format": "date-time",
                    "description": "The date the alerts were last read.",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the account.",
                    "enum": [
                        "Default",
                        "Active",
                        "Pending",
                        "Suspended",
                        "Terminated"
                    ],
                    "type": "string"
                },
                "personKey": {
                    "description": "The unque person key associated to the user.",
                    "type": "string",
                    "example": ""
                },
                "lastNewsReadDate": {
                    "format": "date-time",
                    "description": "The date the news was last read.",
                    "type": "string"
                },
                "username": {
                    "description": "The unique username.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "allowed": {
                    "description": "Flag indicating if status is allowed.",
                    "type": "boolean",
                    "example": false
                },
                "codes": {
                    "$ref": "#/definitions/UserCodes",
                    "description": "The identifying agent codes."
                },
                "lastLogon": {
                    "format": "date-time",
                    "description": "The data and time of last login.",
                    "type": "string"
                },
                "hireDate": {
                    "format": "date-time",
                    "description": "The date the agent was hired.",
                    "type": "string"
                },
                "passwordLastChanged": {
                    "format": "date-time",
                    "description": "The date and time the password was last changed.",
                    "type": "string"
                },
                "terminationDate": {
                    "format": "date-time",
                    "description": "The date the agent was terminated.",
                    "type": "string"
                },
                "roles": {
                    "description": "The collection of authorized roles.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserRole"
                    }
                },
                "note": {
                    "description": "The agent's note.",
                    "type": "string",
                    "example": ""
                },
                "settings": {
                    "description": "The collection of agent settings.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserSetting"
                    }
                },
                "traceQueueCode": {
                    "description": "The trace logging queue code.",
                    "type": "string",
                    "example": ""
                },
                "locked": {
                    "description": "Flag indicating if the account is locked.",
                    "type": "boolean",
                    "example": false
                },
                "forcePasswordReset": {
                    "description": "Flag indicating if the password needs to be reset.",
                    "type": "boolean"
                }
            }
        },
        "UserCodes": {
            "description": "Defines all the different user codes.",
            "required": [
                "departmentCode",
                "locationCode",
                "organizationCode",
                "domainCode"
            ],
            "type": "object",
            "properties": {
                "departmentCode": {
                    "description": "The user's department code.",
                    "maxLength": 4,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "locationCode": {
                    "description": "The user's location code.",
                    "maxLength": 5,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "locationGroupCode": {
                    "description": "The user's location group code.",
                    "type": "string",
                    "example": ""
                },
                "organizationCode": {
                    "description": "The user's organization code.",
                    "maxLength": 10,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "organizationGroupCode": {
                    "description": "The user's organization group code.",
                    "type": "string",
                    "example": ""
                },
                "domainCode": {
                    "description": "The user's domain code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "UserRole": {
            "description": "Defines a user role.",
            "required": [
                "roleCode",
                "effectiveAfter"
            ],
            "type": "object",
            "properties": {
                "userRoleKey": {
                    "description": "The user role key.",
                    "type": "string",
                    "example": ""
                },
                "roleName": {
                    "description": "The role's name.",
                    "type": "string",
                    "example": ""
                },
                "roleCode": {
                    "description": "The unique role code.",
                    "type": "string",
                    "example": ""
                },
                "effectiveDays": {
                    "description": "The days the role is effective.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "type": "string"
                    }
                },
                "effectiveAfter": {
                    "format": "date-time",
                    "description": "The date the role is effective after.",
                    "type": "string"
                },
                "parentRoleCode": {
                    "description": "The parents role code.",
                    "type": "string",
                    "example": ""
                },
                "effectiveBefore": {
                    "format": "date-time",
                    "description": "The date the role is effective before.",
                    "type": "string"
                }
            }
        },
        "UserSetting": {
            "description": "Defines the agent setting configuration.",
            "type": "object",
            "properties": {
                "data": {
                    "description": "The setting data.",
                    "type": "string",
                    "example": ""
                },
                "agentSettingTypeCode": {
                    "description": "The setting type code.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "version": {
                    "format": "int32",
                    "description": "The settings version.",
                    "type": "integer"
                },
                "name": {
                    "description": "The setting type name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "inActive": {
                    "description": "The in active.",
                    "type": "boolean",
                    "example": false
                },
                "schema": {
                    "description": "The data schema.",
                    "maxLength": 2147483647,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "UserRequest": {
            "description": "Defines the user request.",
            "required": [
                "username",
                "codes"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "description": "The status of the account.",
                    "enum": [
                        "Default",
                        "Active",
                        "Pending",
                        "Suspended",
                        "Terminated"
                    ],
                    "type": "string"
                },
                "username": {
                    "description": "The unique username.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "codes": {
                    "$ref": "#/definitions/UserCodes",
                    "description": "The identifying agent codes."
                },
                "hireDate": {
                    "format": "date-time",
                    "description": "The date the agent was hired.",
                    "type": "string"
                },
                "terminationDate": {
                    "format": "date-time",
                    "description": "The date the agent was terminated.",
                    "type": "string"
                },
                "note": {
                    "description": "The agent's note.",
                    "type": "string",
                    "example": ""
                },
                "traceQueueCode": {
                    "description": "The trace logging queue code.",
                    "type": "string",
                    "example": ""
                },
                "locked": {
                    "description": "Flag indicating if the account is locked.",
                    "type": "boolean",
                    "example": false
                },
                "forcePasswordReset": {
                    "description": "Flag indicating if the password needs to be reset.",
                    "type": "boolean"
                }
            }
        },
        "DeltaMapper[UserRequest]": {
            "$ref": "#/definitions/UserRequest"
        },
        "UserCustomerCreateRequest": {
            "description": "Defines the user customer create request that will be setup with the defiend default customer creation parameters.",
            "required": [
                "person",
                "username",
                "password"
            ],
            "type": "object",
            "properties": {
                "person": {
                    "$ref": "#/definitions/PersonCreateRequest",
                    "description": "The person record to be associated with the customer."
                },
                "username": {
                    "description": "The unique username.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "password": {
                    "description": "The unique password.",
                    "type": "string",
                    "example": ""
                },
                "sendRegistrationConfirmation": {
                    "description": "Send registration configrmation.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "BookingTripResult": {
            "description": "Booking flight result data.",
            "type": "object",
            "properties": {
                "recordLocator": {
                    "description": "The record locator.",
                    "type": "string",
                    "example": ""
                },
                "bookingStatus": {
                    "description": "The booking status.",
                    "enum": [
                        "Default",
                        "Hold",
                        "Confirmed",
                        "Closed",
                        "HoldCanceled",
                        "PendingArchive",
                        "Archived"
                    ],
                    "type": "string"
                },
                "priceStatus": {
                    "description": "The price status.",
                    "enum": [
                        "Invalid",
                        "Override",
                        "Valid"
                    ],
                    "type": "string"
                },
                "paidStatus": {
                    "description": "The paid status.",
                    "enum": [
                        "UnderPaid",
                        "PaidInFull",
                        "OverPaid"
                    ],
                    "type": "string"
                },
                "createdDate": {
                    "format": "date-time",
                    "description": "The UTC date and time of when the booking was created.",
                    "type": "string"
                },
                "firstName": {
                    "description": "The first name on the booking.",
                    "type": "string",
                    "example": ""
                },
                "lastName": {
                    "description": "The last name on the booking.",
                    "type": "string",
                    "example": ""
                },
                "customerNumber": {
                    "description": "The customer number on the booking.",
                    "type": "string",
                    "example": ""
                },
                "segments": {
                    "description": "The applicable segments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SegmentTripResult"
                    }
                }
            }
        },
        "SegmentTripResult": {
            "description": "Model data.",
            "type": "object",
            "properties": {
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "This is a summarry of all the legs on the segment. It will contain the details\r\nof the transportation from the first and last leg.",
                    "readOnly": true
                },
                "classOfService": {
                    "description": "The class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "activityDate": {
                    "format": "date-time",
                    "description": "The activity date.",
                    "type": "string"
                },
                "identifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The transportation identifier."
                },
                "externalIdentifier": {
                    "$ref": "#/definitions/TransportationIdentifier",
                    "description": "The external transportation identifier."
                },
                "legs": {
                    "description": "The associated leg information.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LegTripResult"
                    }
                }
            }
        },
        "LegTripResult": {
            "description": "Model data.",
            "type": "object",
            "properties": {
                "designator": {
                    "$ref": "#/definitions/TransportationDesignator",
                    "description": "Transportation information."
                },
                "boardingSequence": {
                    "format": "int32",
                    "description": "The boarding sequence number.",
                    "type": "integer"
                },
                "compartmentDesignator": {
                    "description": "The passenger seat compartment designator.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "unitDesignator": {
                    "description": "The passenger seat compartment designator.",
                    "maxLength": 2,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "The leg's status.",
                    "enum": [
                        "Normal",
                        "Closed",
                        "Canceled",
                        "Suspended",
                        "ClosedPending",
                        "BlockAllActivities",
                        "Mishap"
                    ],
                    "type": "string"
                },
                "liftStatus": {
                    "description": "The lift status.",
                    "enum": [
                        "Default",
                        "CheckedIn",
                        "Boarded",
                        "NoShow"
                    ],
                    "type": "string"
                },
                "departureTimeUtc": {
                    "format": "date-time",
                    "description": "The departure time using the time variant in universal time.",
                    "type": "string"
                },
                "arrivalTimeUtc": {
                    "format": "date-time",
                    "description": "The arrival time using the time variant in universal time.",
                    "type": "string"
                }
            }
        },
        "UserCustomerCreateRequestv2": {
            "description": "Defines the user customer create request that will be setup with the defiend default customer creation parameters.",
            "required": [
                "personKey",
                "username",
                "password"
            ],
            "type": "object",
            "properties": {
                "personKey": {
                    "description": "The unique person key to be associated to the customer.",
                    "type": "string",
                    "example": ""
                },
                "username": {
                    "description": "The unique username.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "password": {
                    "description": "The unique password.",
                    "type": "string",
                    "example": ""
                },
                "sendRegistrationConfirmation": {
                    "description": "Send registration configrmation.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "UserImpersonateRequest": {
            "description": "Defines a user impersonate request.",
            "required": [
                "roleCode"
            ],
            "type": "object",
            "properties": {
                "roleCode": {
                    "description": "The role to impersonate.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "UserChangePasswordRequestBase": {
            "description": "Defines a change password request base.",
            "required": [
                "newPassword"
            ],
            "type": "object",
            "properties": {
                "newPassword": {
                    "description": "The new password.",
                    "maxLength": 16,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "UserRoleCreateRequest": {
            "description": "Defines the user role create request.",
            "required": [
                "roleCode",
                "effectiveAfter"
            ],
            "type": "object",
            "properties": {
                "roleCode": {
                    "description": "The unique role code.",
                    "type": "string",
                    "example": ""
                },
                "effectiveDays": {
                    "description": "The days the role is effective.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "type": "string"
                    }
                },
                "effectiveAfter": {
                    "format": "date-time",
                    "description": "The date the role is effective after.",
                    "type": "string"
                },
                "effectiveBefore": {
                    "format": "date-time",
                    "description": "The date the role is effective before.",
                    "type": "string"
                }
            }
        },
        "UserRoleEditRequest": {
            "description": "Defines the user role edit request.",
            "required": [
                "effectiveAfter"
            ],
            "type": "object",
            "properties": {
                "effectiveDays": {
                    "description": "The days the role is effective.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "type": "string"
                    }
                },
                "effectiveAfter": {
                    "format": "date-time",
                    "description": "The date the role is effective after.",
                    "type": "string"
                },
                "effectiveBefore": {
                    "format": "date-time",
                    "description": "The date the role is effective before.",
                    "type": "string"
                }
            }
        },
        "DeltaMapper[UserRolePatchRequest]": {
            "$ref": "#/definitions/UserRolePatchRequest"
        },
        "UserRolePatchRequest": {
            "description": "Defines the user role patch request.",
            "required": [
                "effectiveAfter"
            ],
            "type": "object",
            "properties": {
                "effectiveAfter": {
                    "format": "date-time",
                    "description": "The date the role is effective after.",
                    "type": "string"
                },
                "effectiveBefore": {
                    "format": "date-time",
                    "description": "The date the role is effective before.",
                    "type": "string"
                }
            }
        },
        "UserCreateRequest": {
            "description": "Defines the user create request.",
            "required": [
                "person",
                "password",
                "roles",
                "username",
                "codes"
            ],
            "type": "object",
            "properties": {
                "person": {
                    "$ref": "#/definitions/PersonCreateRequest",
                    "description": "The person to create for the user."
                },
                "password": {
                    "description": "The unique password.",
                    "maxLength": 16,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "The status of the account.",
                    "enum": [
                        "Default",
                        "Active",
                        "Pending",
                        "Suspended",
                        "Terminated"
                    ],
                    "type": "string"
                },
                "roles": {
                    "description": "The collection of user roles.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserRoleCreateRequest"
                    }
                },
                "username": {
                    "description": "The unique username.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "settings": {
                    "description": "The collection of agent settings.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserSetting"
                    }
                },
                "codes": {
                    "$ref": "#/definitions/UserCodes",
                    "description": "The identifying agent codes."
                },
                "sendRegistrationConfirmation": {
                    "description": "Send registration configrmation.",
                    "type": "boolean",
                    "example": false
                },
                "hireDate": {
                    "format": "date-time",
                    "description": "The date the agent was hired.",
                    "type": "string"
                },
                "terminationDate": {
                    "format": "date-time",
                    "description": "The date the agent was terminated.",
                    "type": "string"
                },
                "note": {
                    "description": "The agent's note.",
                    "type": "string",
                    "example": ""
                },
                "traceQueueCode": {
                    "description": "The trace logging queue code.",
                    "type": "string",
                    "example": ""
                },
                "locked": {
                    "description": "Flag indicating if the account is locked.",
                    "type": "boolean",
                    "example": false
                },
                "forcePasswordReset": {
                    "description": "Flag indicating if the password needs to be reset.",
                    "type": "boolean"
                }
            }
        },
        "UserCreateRequestv2": {
            "description": "Defines the v2 user create request.",
            "required": [
                "personKey",
                "password",
                "roles",
                "username",
                "codes"
            ],
            "type": "object",
            "properties": {
                "personKey": {
                    "description": "The unique person key associated with the user.",
                    "type": "string",
                    "example": ""
                },
                "password": {
                    "description": "The unique password.",
                    "maxLength": 16,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "The status of the account.",
                    "enum": [
                        "Default",
                        "Active",
                        "Pending",
                        "Suspended",
                        "Terminated"
                    ],
                    "type": "string"
                },
                "roles": {
                    "description": "The collection of user roles.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserRoleCreateRequest"
                    }
                },
                "username": {
                    "description": "The unique username.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "settings": {
                    "description": "The collection of agent settings.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserSetting"
                    }
                },
                "codes": {
                    "$ref": "#/definitions/UserCodes",
                    "description": "The identifying agent codes."
                },
                "sendRegistrationConfirmation": {
                    "description": "Send registration configrmation.",
                    "type": "boolean",
                    "example": false
                },
                "hireDate": {
                    "format": "date-time",
                    "description": "The date the agent was hired.",
                    "type": "string"
                },
                "terminationDate": {
                    "format": "date-time",
                    "description": "The date the agent was terminated.",
                    "type": "string"
                },
                "note": {
                    "description": "The agent's note.",
                    "type": "string",
                    "example": ""
                },
                "traceQueueCode": {
                    "description": "The trace logging queue code.",
                    "type": "string",
                    "example": ""
                },
                "locked": {
                    "description": "Flag indicating if the account is locked.",
                    "type": "boolean",
                    "example": false
                },
                "forcePasswordReset": {
                    "description": "Flag indicating if the password needs to be reset.",
                    "type": "boolean"
                }
            }
        },
        "UserRecord": {
            "description": "Defines a user record.",
            "type": "object",
            "properties": {
                "userKey": {
                    "description": "The unique user key.",
                    "type": "string",
                    "example": ""
                },
                "username": {
                    "description": "The unique username.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "$ref": "#/definitions/Name",
                    "description": "The user's name."
                },
                "roles": {
                    "description": "The collection of user roles.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserRole"
                    }
                },
                "status": {
                    "description": "The status of the user.",
                    "enum": [
                        "Default",
                        "Active",
                        "Pending",
                        "Suspended",
                        "Terminated"
                    ],
                    "type": "string"
                },
                "allowed": {
                    "description": "Flag indicating if the user is allowed.",
                    "type": "boolean",
                    "example": false
                },
                "domainCode": {
                    "description": "The domain the user exists in.",
                    "type": "string",
                    "example": ""
                },
                "organizationCode": {
                    "description": "The organization the user exists in.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "Voucher": {
            "description": "The voucher model.",
            "type": "object",
            "properties": {
                "foreignCurrencyCode": {
                    "description": "The foreign currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "voucherKey": {
                    "description": "The voucher key.",
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The voucher expiration date.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "foreignAmount": {
                    "format": "double",
                    "description": "The amount of foreign currency.",
                    "type": "number"
                },
                "reference": {
                    "description": "The reference number for the voucher.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount of currency.",
                    "type": "number"
                },
                "type": {
                    "description": "The voucher type.",
                    "enum": [
                        "Credit",
                        "SingleUseCredit",
                        "Service",
                        "SingleUse",
                        "MultiUse",
                        "SingleUseNegativeAdjustment"
                    ],
                    "type": "string"
                },
                "configurationCode": {
                    "description": "The voucher configuration code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "password": {
                    "description": "The password for the voucher.",
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "The voucher status.",
                    "enum": [
                        "Available",
                        "Void",
                        "Redeemed",
                        "Expired"
                    ],
                    "type": "string"
                },
                "recordLocator": {
                    "description": "The record locator associated with the voucher.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "available": {
                    "format": "double",
                    "description": "The availability count of the voucher.",
                    "type": "number"
                },
                "transactions": {
                    "description": "The voucher transactions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VoucherTransaction"
                    }
                },
                "firstName": {
                    "description": "The first name associated with the voucher.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lastName": {
                    "description": "The last name associated with the voucher.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "personKey": {
                    "description": "The person key associated with the voucher.",
                    "type": "string",
                    "example": ""
                },
                "voucherIssuanceKey": {
                    "description": "The voucher issuance key.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "VoucherTransaction": {
            "description": "The voucher transaction model.",
            "type": "object",
            "properties": {
                "voucherTransactionKey": {
                    "description": "The voucher transaction key.",
                    "type": "string",
                    "example": ""
                },
                "foreignCurrencyCode": {
                    "description": "The foreign currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The voucher transaction type.",
                    "enum": [
                        "Debit",
                        "Credit",
                        "Void",
                        "Reinstate",
                        "Adjustment"
                    ],
                    "type": "string"
                },
                "foreignAmount": {
                    "format": "double",
                    "description": "The amount of foreign currency.",
                    "type": "number"
                },
                "amount": {
                    "format": "double",
                    "description": "The amount of currency.",
                    "type": "number"
                },
                "recordLocator": {
                    "description": "The record locator associated with the voucher transaction.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "VoucherUpdateRequest": {
            "description": "The voucher update request.",
            "required": [
                "status"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "description": "The status to update the voucher to.",
                    "enum": [
                        "Reinstate",
                        "Void"
                    ],
                    "type": "string"
                }
            }
        },
        "VoucherItem": {
            "description": "The voucher item model.",
            "type": "object",
            "properties": {
                "createdDate": {
                    "format": "date-time",
                    "description": "The created date for the voucher item.",
                    "type": "string"
                },
                "voucherKey": {
                    "description": "The voucher key.",
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The voucher expiration date.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "reference": {
                    "description": "The reference number for the voucher.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount of currency.",
                    "type": "number"
                },
                "configurationCode": {
                    "description": "The voucher configuration code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "The voucher status.",
                    "enum": [
                        "Available",
                        "Void",
                        "Redeemed",
                        "Expired"
                    ],
                    "type": "string"
                },
                "available": {
                    "format": "double",
                    "description": "The availability count of the voucher.",
                    "type": "number"
                },
                "firstName": {
                    "description": "The first name associated with the voucher.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "lastName": {
                    "description": "The last name associated with the voucher.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "personKey": {
                    "description": "The person key associated with the voucher.",
                    "type": "string",
                    "example": ""
                },
                "voucherIssuanceKey": {
                    "description": "The voucher issuance key.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "VouchersSummaryResponse": {
            "description": "The voucher by date search response item.",
            "type": "object",
            "properties": {
                "lastPageKey": {
                    "description": "The key for the last item returned from paging.",
                    "type": "string",
                    "example": ""
                },
                "vouchers": {
                    "description": "The collection of vouchers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VoucherSummary"
                    }
                }
            }
        },
        "VoucherSummary": {
            "description": "The voucher summary model.",
            "type": "object",
            "properties": {
                "voucherKey": {
                    "description": "The unique identifier for the voucher.",
                    "type": "string",
                    "example": ""
                },
                "reference": {
                    "description": "The voucher reference.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "recordLocator": {
                    "description": "The record locator associated with the voucher.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The optional note associated with the voucher.",
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount of the voucher.",
                    "type": "number"
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The voucher's expiration.",
                    "type": "string"
                }
            }
        },
        "VoucherConfiguration": {
            "description": "The voucher configuration model.",
            "required": [
                "configurationCode",
                "name",
                "description",
                "type",
                "issuanceType",
                "expirationType"
            ],
            "type": "object",
            "properties": {
                "configurationCode": {
                    "description": "The voucher configuration code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The voucher configuration note.",
                    "type": "string",
                    "example": ""
                },
                "name": {
                    "description": "The voucher configuration name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "description": {
                    "description": "The voucher configuration description.",
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "description": "The voucher type.",
                    "enum": [
                        "Credit",
                        "SingleUseCredit",
                        "Service",
                        "SingleUse",
                        "MultiUse",
                        "SingleUseNegativeAdjustment"
                    ],
                    "type": "string"
                },
                "issuanceType": {
                    "description": "The issuance type.",
                    "enum": [
                        "Individual",
                        "Batch",
                        "FlightBatch",
                        "HighVolumeBatch",
                        "OdBatch"
                    ],
                    "type": "string"
                },
                "usageTypes": {
                    "description": "The voucher usage types.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "Fares",
                            "Taxes",
                            "TravelFees",
                            "ServiceFees",
                            "PenaltyFees",
                            "SsrFees",
                            "NonFlightServiceFees",
                            "UpgradeFees",
                            "SeatFees",
                            "SpoilageFees",
                            "NameChangeFees",
                            "ConvenienceFees",
                            "Car",
                            "Hotel",
                            "Insurance",
                            "Activities"
                        ],
                        "type": "string"
                    }
                },
                "tripType": {
                    "description": "The voucher trip type.",
                    "enum": [
                        "Any",
                        "OneWay",
                        "RoundTrip",
                        "None"
                    ],
                    "type": "string"
                },
                "expirationControl": {
                    "description": "The voucher expiration control.",
                    "enum": [
                        "None",
                        "Fixed",
                        "FixedAtIssuance",
                        "Calculated"
                    ],
                    "type": "string"
                },
                "expirationType": {
                    "description": "The voucher expiration type.",
                    "enum": [
                        "TravelBy",
                        "TravelCompleteBy",
                        "BookingBy"
                    ],
                    "type": "string"
                },
                "expirationDays": {
                    "format": "int32",
                    "description": "The voucher expiration days.",
                    "type": "integer"
                },
                "amountControl": {
                    "description": "The voucher amount control.",
                    "enum": [
                        "Fixed",
                        "FixedAtIssuance",
                        "Calculated"
                    ],
                    "type": "string"
                },
                "calculatedAmountControl": {
                    "description": "The voucher calculated amount control.",
                    "enum": [
                        "Default",
                        "Fares",
                        "FaresPlusTaxes"
                    ],
                    "type": "string"
                },
                "maximumPassengers": {
                    "format": "int32",
                    "description": "The voucher maximum passenger total.",
                    "maximum": 32767,
                    "minimum": 1,
                    "type": "integer"
                },
                "maximumVouchersPerBooking": {
                    "format": "int32",
                    "description": "The voucher maximum number of vouchers per booking.",
                    "type": "integer"
                },
                "travelDowRestriction": {
                    "description": "The voucher day of week travel restrictions.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "type": "string"
                    }
                },
                "nameRestriction": {
                    "description": "The voucher name restriction.",
                    "enum": [
                        "None",
                        "MustBePassenger",
                        "MustBePassengerOrContact"
                    ],
                    "type": "string"
                },
                "isRecordLocatorRequired": {
                    "description": "The flag to indicate if a record locator is required.",
                    "type": "boolean",
                    "example": false
                },
                "isCustomerNumberRequired": {
                    "description": "The flag to indicate if a customer number is required.",
                    "type": "boolean",
                    "example": false
                },
                "nextReferenceNumber": {
                    "format": "int64",
                    "description": "The next reference number for the voucher configuration.",
                    "type": "integer"
                },
                "maximumAmountIsPerPassenger": {
                    "description": "Flag to indicate if the maximum amount is per passenger or not.",
                    "type": "boolean",
                    "example": false
                },
                "calculatedPercentage": {
                    "format": "double",
                    "description": "The calculated percentage.",
                    "type": "number"
                },
                "issuanceControl": {
                    "description": "The voucher issuance control.",
                    "enum": [
                        "IssuedToPassengers",
                        "IssuedToContact"
                    ],
                    "type": "string"
                },
                "fareClasses": {
                    "description": "The voucher configuration fare classes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VoucherConfigurationFareClass"
                    }
                },
                "marketRestrictions": {
                    "description": "The voucher configuration market restrictions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VoucherMarketRestriction"
                    }
                },
                "travelRestrictions": {
                    "description": "The voucher configuration travel restrictions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VoucherTravelRestriction"
                    }
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The voucher expiration date.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The voucher currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "maximumAmount": {
                    "format": "double",
                    "description": "The maximum voucher amount.",
                    "type": "number"
                }
            }
        },
        "VoucherConfigurationFareClass": {
            "description": "The voucher configuration model.",
            "type": "object",
            "properties": {
                "configurationCode": {
                    "description": "The voucher configuration code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "classOfService": {
                    "description": "The voucher configuration fare class of service.",
                    "maxLength": 8,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "VoucherMarketRestriction": {
            "description": "The voucher market restriction model.",
            "type": "object",
            "properties": {
                "restrictionType": {
                    "description": "The market restriction type.",
                    "enum": [
                        "MustBeOne",
                        "MustNot"
                    ],
                    "type": "string"
                },
                "voucherConfigurationCode": {
                    "description": "The voucher configuration code.",
                    "type": "string",
                    "example": ""
                },
                "directionality": {
                    "description": "The directionality of the voucher market restriction.",
                    "enum": [
                        "None",
                        "To",
                        "From",
                        "Between"
                    ],
                    "type": "string"
                },
                "sequence": {
                    "format": "int32",
                    "description": "The sequence number of the voucher restriction.",
                    "type": "integer"
                },
                "regionType": {
                    "description": "The region type.",
                    "enum": [
                        "Default",
                        "Station",
                        "City",
                        "ProvinceState",
                        "Country",
                        "FeeZone",
                        "SubZone",
                        "Area",
                        "All",
                        "Mac"
                    ],
                    "type": "string"
                },
                "regionCode": {
                    "description": "The region code.",
                    "type": "string",
                    "example": ""
                },
                "travelRegionType": {
                    "description": "The travel region type.",
                    "enum": [
                        "Default",
                        "Station",
                        "City",
                        "ProvinceState",
                        "Country",
                        "FeeZone",
                        "SubZone",
                        "Area",
                        "All",
                        "Mac"
                    ],
                    "type": "string"
                },
                "travelRegionCode": {
                    "description": "The travel region code.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "VoucherTravelRestriction": {
            "description": "The voucher configuration model.",
            "type": "object",
            "properties": {
                "restrictionType": {
                    "description": "The travel restriction type.",
                    "enum": [
                        "Default",
                        "Blackout",
                        "Season"
                    ],
                    "type": "string"
                },
                "voucherConfigurationCode": {
                    "description": "The voucher configuration code.",
                    "type": "string",
                    "example": ""
                },
                "initialTravelDate": {
                    "format": "date-time",
                    "description": "The beginning travel date.",
                    "type": "string"
                },
                "sequence": {
                    "format": "int32",
                    "description": "The sequence number of the voucher restriction.",
                    "type": "integer"
                },
                "endTravelDate": {
                    "format": "date-time",
                    "description": "The ending travel date.",
                    "type": "string"
                }
            }
        },
        "VoucherIssuanceRequest": {
            "description": "The voucher issuance request model.",
            "required": [
                "configurationCode",
                "issuanceReasonCode"
            ],
            "type": "object",
            "properties": {
                "recordLocator": {
                    "description": "The record locator.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "configurationCode": {
                    "description": "The voucher configuration code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The voucher expiration date.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "firstName": {
                    "description": "The passenger's first name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "issuanceReasonCode": {
                    "description": "The voucher issuance reason code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount of currency.",
                    "type": "number"
                },
                "lastName": {
                    "description": "The passenger's last name.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "note": {
                    "description": "The voucher issuance note.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "personKey": {
                    "description": "The person key.",
                    "type": "string",
                    "example": ""
                },
                "market": {
                    "$ref": "#/definitions/VoucherMarketInformation",
                    "description": "Market details associated with the voucher issuance."
                },
                "quantity": {
                    "format": "int32",
                    "description": "The number of vouchers to issue.",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                },
                "customerNumber": {
                    "description": "The customer number.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "sendFiles": {
                    "description": "Decides whether to send reference files over ftp for a HighVolumeBatch of vouchers.",
                    "type": "boolean",
                    "example": false
                },
                "ssrCode": {
                    "description": "The SSR filter value in this object.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                }
            }
        },
        "VoucherMarketInformation": {
            "description": "The voucher issuance request model.",
            "required": [
                "destination",
                "origin",
                "departureDate",
                "identifier",
                "carrierCode"
            ],
            "type": "object",
            "properties": {
                "destination": {
                    "description": "Gets or sets the leg arrival station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "origin": {
                    "description": "Gets or sets the leg departure station.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "departureDate": {
                    "format": "date-time",
                    "description": "The departure date.",
                    "type": "string"
                },
                "identifier": {
                    "description": "The unique transportation identifier.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "carrierCode": {
                    "description": "The carrier code.",
                    "maxLength": 3,
                    "minLength": 2,
                    "type": "string",
                    "example": ""
                },
                "opSuffix": {
                    "description": "The op suffix.",
                    "type": "string"
                }
            }
        },
        "VoucherIssuance": {
            "description": "The voucher issuance model.",
            "required": [
                "configurationCode",
                "issuanceReasonCode"
            ],
            "type": "object",
            "properties": {
                "voucherIssuanceKey": {
                    "description": "The voucher issuance key.",
                    "type": "string",
                    "example": ""
                },
                "configurationCode": {
                    "description": "The voucher configuration code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The voucher expiration date.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "issuanceReasonCode": {
                    "description": "The voucher issuance reason code.",
                    "maxLength": 4,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount of currency.",
                    "type": "number"
                },
                "note": {
                    "description": "The voucher issuance note.",
                    "maxLength": 256,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "market": {
                    "$ref": "#/definitions/VoucherMarketInformation",
                    "description": "Market details associated with the voucher issuance."
                }
            }
        },
        "VoucherInformation": {
            "description": "Voucher information. This model describes a voucher information after being queried by the voucher code.",
            "type": "object",
            "properties": {
                "calculatedAmount": {
                    "format": "double",
                    "description": "The total amount of the booking that is payable by the voucher.",
                    "type": "number"
                },
                "foreignCurrencyCode": {
                    "description": "The foreign currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "voucherKey": {
                    "description": "The voucher key.",
                    "type": "string",
                    "example": ""
                },
                "expiration": {
                    "format": "date-time",
                    "description": "The voucher expiration date.",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "customerNumber": {
                    "description": "The customer number associated to the voucher.",
                    "type": "string",
                    "example": ""
                },
                "foreignAmount": {
                    "format": "double",
                    "description": "The amount of foreign currency.",
                    "type": "number"
                },
                "reference": {
                    "description": "The reference number for the voucher.",
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount of currency.",
                    "type": "number"
                },
                "foreignCalculatedAmount": {
                    "format": "double",
                    "description": "The total amount of the booking that is payable by the voucher,\r\nconverted to a foreign currency specified by the ForeignCalculatededCurrencyCode.\r\nUsed if the booking and voucher are in different currencies.",
                    "type": "number"
                },
                "type": {
                    "description": "The voucher type.",
                    "enum": [
                        "Credit",
                        "SingleUseCredit",
                        "Service",
                        "SingleUse",
                        "MultiUse",
                        "SingleUseNegativeAdjustment"
                    ],
                    "type": "string"
                },
                "configurationCode": {
                    "description": "The voucher configuration code.",
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "foreignCalculatededCurrencyCode": {
                    "description": "The currency code for used with the ForeignCalculatedAmount field.\r\nUsed if the booking and voucher are in different currencies, this would be the currency code being converted to.",
                    "type": "string",
                    "example": ""
                },
                "password": {
                    "description": "The password for the voucher.",
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "description": "The voucher status.",
                    "enum": [
                        "Available",
                        "Void",
                        "Redeemed",
                        "Expired"
                    ],
                    "type": "string"
                },
                "foreignReversableAmount": {
                    "format": "double",
                    "description": "Returns the original available amount of the voucher, converted to a foreign currency.\r\nUsed if the booking and voucher are in different currencies.",
                    "type": "number"
                },
                "recordLocator": {
                    "description": "The record locator associated with the voucher.",
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "available": {
                    "format": "double",
                    "description": "The availability count of the voucher.",
                    "type": "number"
                },
                "nameRestriction": {
                    "description": "The name restriction for the voucher.",
                    "enum": [
                        "None",
                        "MustBePassenger",
                        "MustBePassengerOrContact"
                    ],
                    "type": "string"
                },
                "transactions": {
                    "description": "The voucher transactions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VoucherTransaction"
                    }
                },
                "firstName": {
                    "description": "The first name associated with the voucher.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "redeemableAmount": {
                    "format": "double",
                    "description": "The total amount of the booking that the voucher can pay for up to the full amount of the voucher.",
                    "type": "number"
                },
                "lastName": {
                    "description": "The last name associated with the voucher.",
                    "maxLength": 64,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "reversableAmount": {
                    "format": "double",
                    "description": "Returns the original available amount of the voucher.",
                    "type": "number"
                },
                "personKey": {
                    "description": "The person key associated with the voucher.",
                    "type": "string",
                    "example": ""
                },
                "foreignAvailableCurrencyCode": {
                    "description": "The currency code for used with the ForeignAvailableAmount field.\r\nUsed if the booking and voucher are in different currencies, this \r\nwould be the currency code being converted to.",
                    "type": "string",
                    "example": ""
                },
                "voucherIssuanceKey": {
                    "description": "The voucher issuance key.",
                    "type": "string",
                    "example": ""
                }
            }
        },
        "VoucherPaymentRequest": {
            "description": "Model to request a voucher payment.",
            "required": [
                "referenceCode",
                "paymentMethodCode"
            ],
            "type": "object",
            "properties": {
                "referenceCode": {
                    "description": "The voucher reference code.",
                    "maxLength": 20,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "currencyCode": {
                    "description": "The currency code.",
                    "maxLength": 3,
                    "minLength": 0,
                    "type": "string",
                    "example": ""
                },
                "paymentMethodCode": {
                    "description": "The payment method to apply the voucher to. This will default to primary voucher code.",
                    "maxLength": 2,
                    "minLength": 1,
                    "type": "string",
                    "example": ""
                },
                "amount": {
                    "format": "double",
                    "description": "The amount of currency.",
                    "type": "number"
                }
            }
        },
        "ApiNskV1AccountPasswordChangePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1AccountPasswordChangePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1AccountPasswordChangePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1AccountPasswordResetPost202TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1AccountPasswordResetPost202ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1AccountPasswordResetPost202TextJsonResponse": {
            "type": "object"
        },
        "ActivityProductArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ActivityProduct"
            }
        },
        "CarProductArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/CarProduct"
            }
        },
        "HotelProductArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/HotelProduct"
            }
        },
        "ApiNskV1AvailabilityLowfarePost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1AvailabilityLowfarePost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1AvailabilityLowfarePost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1AvailabilityLowfareSimplePost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1AvailabilityLowfareSimplePost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1AvailabilityLowfareSimplePost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2AvailabilityLowfarePost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2AvailabilityLowfarePost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2AvailabilityLowfarePost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2AvailabilityLowfareSimplePost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2AvailabilityLowfareSimplePost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2AvailabilityLowfareSimplePost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1AvailabilitySearchPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1AvailabilitySearchPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1AvailabilitySearchPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3AvailabilitySearchPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3AvailabilitySearchPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3AvailabilitySearchPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3AvailabilitySearchSimplePost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3AvailabilitySearchSimplePost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3AvailabilitySearchSimplePost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAccountGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAccountGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAccountGet404TextJsonResponse": {
            "type": "object"
        },
        "TransactionArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Transaction"
            }
        },
        "ApiNskV1BookingAccountCollection{accountCollectionKey}TransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAccountCollection{accountCollectionKey}TransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAccountCollection{accountCollectionKey}TransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAccountTransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAccountTransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAccountTransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddonsGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/AddOn"
                }
            }
        },
        "ApiNskV1BookingAddonsGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/AddOn"
                }
            }
        },
        "ApiNskV1BookingAddonsGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/AddOn"
                }
            }
        },
        "ApiNskV1BookingAddonsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddonsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddonsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPatch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPatch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPatch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPatch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPatch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}CustomerPatch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}Participants{participantKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}PaymentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}PaymentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}PaymentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}PaymentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}PaymentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}PaymentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}PreCancelGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}PreCancelGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}PreCancelGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}SyncPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}SyncPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}SyncPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}ValidationGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}ValidationGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddons{addOnKey}ValidationGet404TextJsonResponse": {
            "type": "object"
        },
        "InsuranceProductArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/InsuranceProduct"
            }
        },
        "ApiNskV1BookingAddonsPaymentsGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/AddOnAllowedPayments"
                }
            }
        },
        "ApiNskV1BookingAddonsPaymentsGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/AddOnAllowedPayments"
                }
            }
        },
        "ApiNskV1BookingAddonsPaymentsGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/AddOnAllowedPayments"
                }
            }
        },
        "ApiNskV1BookingAddonsPaymentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddonsPaymentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingAddonsPaymentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingBoardingpassesJourney{journeyKey}Post404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingBoardingpassesJourney{journeyKey}Post404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingBoardingpassesJourney{journeyKey}Post404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingBoardingpassesSegment{segmentKey}Post404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingBoardingpassesSegment{segmentKey}Post404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingBoardingpassesSegment{segmentKey}Post404TextJsonResponse": {
            "type": "object"
        },
        "BundleAvailabilityArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BundleAvailability"
            }
        },
        "ApiNskV1BookingBundleAvailabilityPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingBundleAvailabilityPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingBundleAvailabilityPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinJourney{journeyKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinJourney{journeyKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinJourney{journeyKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingCheckinJourney{journeyKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingCheckinJourney{journeyKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingCheckinJourney{journeyKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinJourney{journeyKey}RequirementsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinJourney{journeyKey}RequirementsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinJourney{journeyKey}RequirementsGet404TextJsonResponse": {
            "type": "object"
        },
        "CheckinPassengerLiftStatusArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/CheckinPassengerLiftStatus"
            }
        },
        "ApiNskV1BookingCheckinJourney{journeyKey}StatusGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinJourney{journeyKey}StatusGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinJourney{journeyKey}StatusGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingCheckinSegment{segmentKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingCheckinSegment{segmentKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingCheckinSegment{segmentKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}RequirementsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}RequirementsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}RequirementsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}StatusGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerLiftStatus"
                    }
                }
            }
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}StatusGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerLiftStatus"
                    }
                }
            }
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}StatusGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerLiftStatus"
                    }
                }
            }
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}StatusGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}StatusGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCheckinSegment{segmentKey}StatusGet404TextJsonResponse": {
            "type": "object"
        },
        "BookingCommentArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BookingComment"
            }
        },
        "ApiNskV1BookingCommentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCommentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCommentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCommentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCommentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingCommentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingComments{commentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingComments{commentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingComments{commentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/Contact"
                }
            }
        },
        "ApiNskV1BookingContactsGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/Contact"
                }
            }
        },
        "ApiNskV1BookingContactsGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/Contact"
                }
            }
        },
        "ApiNskV1BookingContactsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PhoneNumberArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PhoneNumber"
            }
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbersGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbersGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbersGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbersPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbersPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbersPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContacts{contactTypeCode}PhoneNumbers{phoneNumberType}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPatch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPatch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPatch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPatch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPatch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingContactsPrimaryPatch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingDividePost200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingDividePost200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingDividePost200TextJsonResponse": {
            "type": "object"
        },
        "FareRuleArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/FareRule"
            }
        },
        "ApiNskV1BookingFareRulesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesFare{fareKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesFare{fareKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesFare{fareKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesJourney{journeyKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesJourney{journeyKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesJourney{journeyKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesSegment{segmentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesSegment{segmentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFareRulesSegment{segmentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ServiceChargeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ServiceCharge"
            }
        },
        "ApiNskV1BookingFeeGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFeeGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFeeGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFeePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFeePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFeePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFee{feeKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFee{feeKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFee{feeKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFee{feeKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFee{feeKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFee{feeKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFee{feeKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFee{feeKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingFee{feeKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistoryGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistoryGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistoryGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistoryFlightMoveGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistoryFlightMoveGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistoryFlightMoveGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistorySeatAssignmentGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistorySeatAssignmentGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistorySeatAssignmentGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistorySegmentChangeGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistorySegmentChangeGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingHistorySegmentChangeGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingHoldAvailableGet200TextPlainResponse": {
            "format": "date-time",
            "type": "string"
        },
        "ApiNskV2BookingHoldAvailableGet200ApplicationJsonResponse": {
            "format": "date-time",
            "type": "string"
        },
        "ApiNskV2BookingHoldAvailableGet200TextJsonResponse": {
            "format": "date-time",
            "type": "string"
        },
        "ApiNskV2BookingHoldAvailableGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingHoldAvailableGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingHoldAvailableGet404TextJsonResponse": {
            "type": "object"
        },
        "JourneyArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Journey"
            }
        },
        "ApiNskV1BookingJourneysGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneysGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneysGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneysDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneysDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneysDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}BundlesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}BundlesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}BundlesPost201TextJsonResponse": {
            "type": "object"
        },
        "PassengerBagArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PassengerBag"
            }
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}BaggageGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}BaggageGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}BaggageGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}BaggagePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}BaggagePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}BaggagePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}Baggage{baggageKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}Baggage{baggageKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}Baggage{baggageKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}Baggage{baggageKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}Baggage{baggageKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingJourneys{journeyKey}Passengers{passengerKey}Baggage{baggageKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengersGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/Passenger"
                }
            }
        },
        "ApiNskV1BookingPassengersGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/Passenger"
                }
            }
        },
        "ApiNskV1BookingPassengersGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/Passenger"
                }
            }
        },
        "ApiNskV1BookingPassengersGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengersGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengersGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PassengerAddressArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PassengerAddress"
            }
        },
        "ApiNskV1BookingPassengers{passengerKey}AddressesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}AddressesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}AddressesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}AddressesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}AddressesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}AddressesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Addresses{addressKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Addresses{addressKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Addresses{addressKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Addresses{addressKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}BaggageGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}BaggageGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}BaggageGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Baggage{baggageKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Baggage{baggageKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Baggage{baggageKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}BreakdownGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}BreakdownGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}BreakdownGet404TextJsonResponse": {
            "type": "object"
        },
        "PassengerTravelDocumentArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PassengerTravelDocument"
            }
        },
        "ApiNskV1BookingPassengers{passengerKey}DocumentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}DocumentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}DocumentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}DocumentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}DocumentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}DocumentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Documents{travelDocumentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Documents{travelDocumentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Documents{travelDocumentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Documents{travelDocumentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}InfantGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}InfantGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}InfantGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantPatch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantPatch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantPatch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantPatch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantPatch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantPatch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}InfantPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}InfantPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}InfantPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}InfantPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}InfantPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}InfantPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}InfantPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}InfantPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPassengers{passengerKey}InfantPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}InfantDocumentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}InfantDocumentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}InfantDocumentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocumentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocumentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocumentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}InfantDocuments{travelDocumentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PassengerSeatArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PassengerSeat"
            }
        },
        "ApiNskV2BookingPassengers{passengerKey}SeatsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}SeatsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}SeatsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Seats{unitKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Seats{unitKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Seats{unitKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Seats{unitKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Seats{unitKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengers{passengerKey}Seats{unitKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Seats{unitKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Seats{unitKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPassengers{passengerKey}Seats{unitKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengersBreakdownGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PassengerPriceBreakdown"
                }
            }
        },
        "ApiNskV1BookingPassengersBreakdownGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PassengerPriceBreakdown"
                }
            }
        },
        "ApiNskV1BookingPassengersBreakdownGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PassengerPriceBreakdown"
                }
            }
        },
        "ApiNskV1BookingPassengersBreakdownGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengersBreakdownGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengersBreakdownGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengersBreakdownByTypeGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PassengerTypePriceBreakdown"
                }
            }
        },
        "ApiNskV1BookingPassengersBreakdownByTypeGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PassengerTypePriceBreakdown"
                }
            }
        },
        "ApiNskV1BookingPassengersBreakdownByTypeGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PassengerTypePriceBreakdown"
                }
            }
        },
        "ApiNskV1BookingPassengersBreakdownByTypeGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengersBreakdownByTypeGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPassengersBreakdownByTypeGet404TextJsonResponse": {
            "type": "object"
        },
        "CustomV2BookingPaymentsPost201TextPlainResponse": {
            "type": "object"
        },
        "CustomV2BookingPaymentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomV2BookingPaymentsPost201TextJsonResponse": {
            "type": "object"
        },
        "CustomV2BookingPaymentsPost400TextPlainResponse": {
            "type": "object"
        },
        "CustomV2BookingPaymentsPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomV2BookingPaymentsPost400TextJsonResponse": {
            "type": "object"
        },
        "PaymentArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Payment"
            }
        },
        "ApiNskV1BookingPaymentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsAvailableGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PaymentMethod"
                }
            }
        },
        "ApiNskV1BookingPaymentsAvailableGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PaymentMethod"
                }
            }
        },
        "ApiNskV1BookingPaymentsAvailableGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PaymentMethod"
                }
            }
        },
        "ApiNskV1BookingPaymentsAvailableGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsAvailableGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsAvailableGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPayments{paymentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPayments{paymentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPayments{paymentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPayments{paymentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPayments{paymentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPayments{paymentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPayments{paymentMethod}DccGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPayments{paymentMethod}DccGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPayments{paymentMethod}DccGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsAvailableGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PaymentMethod"
                }
            }
        },
        "ApiNskV2BookingPaymentsAvailableGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PaymentMethod"
                }
            }
        },
        "ApiNskV2BookingPaymentsAvailableGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PaymentMethod"
                }
            }
        },
        "ApiNskV2BookingPaymentsAvailableGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsAvailableGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsAvailableGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsBookingCreditGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsBookingCreditGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsBookingCreditGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsBookingCreditPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsBookingCreditPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsBookingCreditPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCreditGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCreditGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCreditGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCreditPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCreditPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCreditPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCustomerCreditGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCustomerCreditGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCustomerCreditGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCustomerCreditPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCustomerCreditPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsCustomerCreditPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV4BookingPaymentsDcc{dccKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV4BookingPaymentsDcc{dccKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV4BookingPaymentsDcc{dccKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsFees{feeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsFees{feeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsFees{feeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsMccGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/MccCurrencyInformationv2"
                }
            }
        },
        "ApiNskV3BookingPaymentsMccGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/MccCurrencyInformationv2"
                }
            }
        },
        "ApiNskV3BookingPaymentsMccGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/MccCurrencyInformationv2"
                }
            }
        },
        "ApiNskV3BookingPaymentsMccGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsMccGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsMccGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsMcc{currencyCode}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsMcc{currencyCode}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsMcc{currencyCode}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsMcc{currencyCode}StoredPayment{storedPaymentKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsMcc{currencyCode}StoredPayment{storedPaymentKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsMcc{currencyCode}StoredPayment{storedPaymentKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsOrganizationCreditGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsOrganizationCreditGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsOrganizationCreditGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsOrganizationCreditPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsOrganizationCreditPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsOrganizationCreditPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsRefundsGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PaymentMethod"
                }
            }
        },
        "ApiNskV1BookingPaymentsRefundsGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PaymentMethod"
                }
            }
        },
        "ApiNskV1BookingPaymentsRefundsGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "$ref": "#/definitions/PaymentMethod"
                }
            }
        },
        "ApiNskV1BookingPaymentsRefundsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsRefundsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsRefundsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsRefundsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsRefundsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsRefundsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsRefundsCustomerCreditPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsRefundsCustomerCreditPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsRefundsCustomerCreditPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsRefundsOrganizationCreditPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsRefundsOrganizationCreditPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsRefundsOrganizationCreditPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsRefundsOrganizationCreditPost400TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsRefundsOrganizationCreditPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsRefundsOrganizationCreditPost400TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsStoredPayment{storedPaymentKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsStoredPayment{storedPaymentKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsStoredPayment{storedPaymentKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsThreeDSecurePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsThreeDSecurePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsThreeDSecurePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsVoucherGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsVoucherGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsVoucherGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsVoucherPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsVoucherPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingPaymentsVoucherPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsVoucher{voucherPaymentReference}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsVoucher{voucherPaymentReference}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPaymentsVoucher{voucherPaymentReference}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsVoucher{voucherPaymentReference}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsVoucher{voucherPaymentReference}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingPaymentsVoucher{voucherPaymentReference}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePatch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePatch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePatch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePatch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePatch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPointOfSalePatch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingPromotionDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingQueuePost200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingQueuePost200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingQueuePost200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingQueuePost500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingQueuePost500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingQueuePost500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingQueueDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingQueueDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingQueueDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingResetDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingResetDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingResetDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingRetrieveGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingRetrieveGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingRetrieveGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingRetrieve{bookingKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingRetrieve{bookingKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingRetrieve{bookingKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingRetrieveByRecordLocator{recordLocator}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingRetrieveByRecordLocator{recordLocator}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingRetrieveByRecordLocator{recordLocator}Get404TextJsonResponse": {
            "type": "object"
        },
        "SeatMapAvailabilityArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/SeatMapAvailability"
            }
        },
        "ApiNskV2BookingSeatmapsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingSeatmapsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingSeatmapsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingSeatmapsJourney{journeyKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3BookingSeatmapsJourney{journeyKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3BookingSeatmapsJourney{journeyKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingSeatmapsSegment{segmentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingSeatmapsSegment{segmentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingSeatmapsSegment{segmentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSeatsAuto{primaryPassengerKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSeatsAuto{primaryPassengerKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSeatsAuto{primaryPassengerKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSeatsAuto{primaryPassengerKey}Journey{journeyKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSeatsAuto{primaryPassengerKey}Journey{journeyKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSeatsAuto{primaryPassengerKey}Journey{journeyKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSeatsAuto{primaryPassengerKey}Segment{segmentKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSeatsAuto{primaryPassengerKey}Segment{segmentKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSeatsAuto{primaryPassengerKey}Segment{segmentKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSegments{segmentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSegments{segmentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSegments{segmentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "PassengerSsrArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PassengerSsr"
            }
        },
        "ApiNskV1BookingSsrsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "Note": {
            "type": "string",
            "example": ""
        },
        "ApiNskV1BookingSsrs{ssrKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrs{ssrKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsAvailabilityPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsAvailabilityPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsAvailabilityPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsManualPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsManualPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsManualPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsManualDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsManualDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingSsrsManualDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingStatusGet202TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingStatusGet202ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingStatusGet202TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistoryGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistoryGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistoryGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistoryFlightMoveGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistoryFlightMoveGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistoryFlightMoveGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistorySeatAssignmentGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistorySeatAssignmentGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistorySeatAssignmentGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistorySegmentChangeGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistorySegmentChangeGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}HistorySegmentChangeGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueuePost200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueuePost200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueuePost200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueuePost500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueuePost500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueuePost500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueueDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueueDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueueDelete200TextJsonResponse": {
            "type": "object"
        },
        "BookingQueueHistoryArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BookingQueueHistory"
            }
        },
        "ApiNskV1Bookings{bookingKey}QueueHistoryPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueueHistoryPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{bookingKey}QueueHistoryPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountPost400TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountPost400TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollectionPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollectionPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollectionPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollectionPost400TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollectionPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollectionPost400TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsPost400TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountCollection{accountCollectionKey}TransactionsPost400TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountStatusPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountStatusPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountStatusPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountStatusPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountStatusPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountStatusPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountTransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountTransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}AccountTransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "BookingCommentRequestArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BookingCommentRequest"
            }
        },
        "ApiNskV1Bookings{recordLocator}CommentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}CommentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}CommentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}EmailPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}EmailPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Bookings{recordLocator}EmailPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Bookings{recordLocator}NotificationPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Bookings{recordLocator}NotificationPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Bookings{recordLocator}NotificationPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingsCheckin{recordLocator}Journey{journeyKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingsCheckin{recordLocator}Journey{journeyKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingsCheckin{recordLocator}Journey{journeyKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}RequirementsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}RequirementsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}RequirementsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}StatusGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerLiftStatus"
                    }
                }
            }
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}StatusGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerLiftStatus"
                    }
                }
            }
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}StatusGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerLiftStatus"
                    }
                }
            }
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}StatusGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}StatusGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Journey{journeyKey}StatusGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingsCheckin{recordLocator}Segment{segmentKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingsCheckin{recordLocator}Segment{segmentKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingsCheckin{recordLocator}Segment{segmentKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}RequirementsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}RequirementsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}RequirementsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}StatusGet200TextPlainResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerLiftStatus"
                    }
                }
            }
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}StatusGet200ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerLiftStatus"
                    }
                }
            }
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}StatusGet200TextJsonResponse": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckinPassengerLiftStatus"
                    }
                }
            }
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}StatusGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}StatusGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsCheckin{recordLocator}Segment{segmentKey}StatusGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingsQuotePost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2BookingsQuotePost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2BookingsQuotePost404TextJsonResponse": {
            "type": "object"
        },
        "BookingSearchResultArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BookingSearchResult"
            }
        },
        "ApiNskV1BookingsSearchByAgencyGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByAgencyGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByAgencyGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByAgentGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByAgentGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByAgentGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByAgentCodeGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByAgentCodeGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByAgentCodeGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByBagTagGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByBagTagGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByBagTagGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByContactGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByContactGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByContactGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByContactCustomerNumberGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByContactCustomerNumberGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByContactCustomerNumberGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByCreditCardGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByCreditCardGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByCreditCardGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByCustomerNumberGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByCustomerNumberGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByCustomerNumberGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByDateGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByDateGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByDateGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByDocumentGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByDocumentGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByDocumentGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByEmailGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByEmailGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByEmailGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByLastNameGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByLastNameGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByLastNameGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByPhoneGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByPhoneGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByPhoneGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByRecordLocatorGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByRecordLocatorGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByRecordLocatorGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByThirdPartyRecordLocatorGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByThirdPartyRecordLocatorGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BookingsSearchByThirdPartyRecordLocatorGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BundlesApplications{bundleApplicationKey}DetailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BundlesApplications{bundleApplicationKey}DetailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BundlesApplications{bundleApplicationKey}DetailsGet404TextJsonResponse": {
            "type": "object"
        },
        "BundleApplicationArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BundleApplication"
            }
        },
        "ApiNskV1BundlesRules{bundleRuleCode}DetailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BundlesRules{bundleRuleCode}DetailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BundlesRules{bundleRuleCode}DetailsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BundlesSets{bundleSetCode}DetailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1BundlesSets{bundleSetCode}DetailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1BundlesSets{bundleSetCode}DetailsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Collection{accountCollectionKey}TransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Collection{accountCollectionKey}TransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Collection{accountCollectionKey}TransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1CurrencyConverterGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1CurrencyConverterGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1CurrencyConverterGet404TextJsonResponse": {
            "type": "object"
        },
        "CustomBookingAddbookingPost400TextPlainResponse": {
            "type": "object"
        },
        "CustomBookingAddbookingPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomBookingAddbookingPost400TextJsonResponse": {
            "type": "object"
        },
        "CustomBookingPassengers{passengerKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "CustomBookingPassengers{passengerKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomBookingPassengers{passengerKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "CustomBookingPassengers{passengerKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "CustomBookingPassengers{passengerKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomBookingPassengers{passengerKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "CustomBookingPaymentsDeclinependingPut400TextPlainResponse": {
            "type": "object"
        },
        "CustomBookingPaymentsDeclinependingPut400ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomBookingPaymentsDeclinependingPut400TextJsonResponse": {
            "type": "object"
        },
        "CustomBookingPaymentsStoredpaymayapayment{storedPaymentKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "CustomBookingPaymentsStoredpaymayapayment{storedPaymentKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomBookingPaymentsStoredpaymayapayment{storedPaymentKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "CustomBookingPaymentsStoredpaymayapayment{storedPaymentKey}Post400TextPlainResponse": {
            "type": "object"
        },
        "CustomBookingPaymentsStoredpaymayapayment{storedPaymentKey}Post400ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomBookingPaymentsStoredpaymayapayment{storedPaymentKey}Post400TextJsonResponse": {
            "type": "object"
        },
        "CustomCurrencyConverterGet200TextPlainResponse": {
            "type": "object"
        },
        "CustomCurrencyConverterGet200ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomCurrencyConverterGet200TextJsonResponse": {
            "type": "object"
        },
        "CustomSessionGet200TextPlainResponse": {
            "type": "object"
        },
        "CustomSessionGet200ApplicationJsonResponse": {
            "type": "object"
        },
        "CustomSessionGet200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1FareRules{fareKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1FareRules{fareKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1FareRules{fareKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "Variables": {
            "type": "object"
        },
        "ApiNskV1ManifestGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ManifestGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ManifestGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Manifest{legKey}Post404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Manifest{legKey}Post404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Manifest{legKey}Post404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Manifest{legKey}PassengerDetailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Manifest{legKey}PassengerDetailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Manifest{legKey}PassengerDetailsGet404TextJsonResponse": {
            "type": "object"
        },
        "PassengerSeatAssignmentArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PassengerSeatAssignment"
            }
        },
        "ApiNskV1Manifest{legKey}PassengerSeatAssignmentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Manifest{legKey}PassengerSeatAssignmentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Manifest{legKey}PassengerSeatAssignmentsGet404TextJsonResponse": {
            "type": "object"
        },
        "OrganizationGroupArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/OrganizationGroup"
            }
        },
        "ApiNskV1OrganizationsGroupsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1OrganizationsGroupsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1OrganizationsGroupsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1OrganizationsGroups{organizationGroupCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1OrganizationsGroups{organizationGroupCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1OrganizationsGroups{organizationGroupCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "OrganizationRecordArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/OrganizationRecord"
            }
        },
        "ApiNskV2Organizations2Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Organizations2Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Organizations2Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountPost400TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountPost400TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountStatusPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountStatusPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountStatusPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountStatusPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountStatusPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountStatusPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountTransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountTransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountTransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountTransactionsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountTransactionsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountTransactionsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountTransactionsPost400TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountTransactionsPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}AccountTransactionsPost400TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CommissionRatesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CommissionRatesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CommissionRatesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CommissionRates{commissionRateCode}Delete201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CommissionRates{commissionRateCode}Delete201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CommissionRates{commissionRateCode}Delete201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbersPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbersPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbersPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbers{phoneNumberType}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbers{phoneNumberType}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbers{phoneNumberType}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbers{phoneNumberType}Delete204TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbers{phoneNumberType}Delete204ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}CompanyPhoneNumbers{phoneNumberType}Delete204TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ContactPhoneNumbersPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ContactPhoneNumbersPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ContactPhoneNumbersPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ContactPhoneNumbers{phoneNumberType}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ContactPhoneNumbers{phoneNumberType}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ContactPhoneNumbers{phoneNumberType}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ContactPhoneNumbers{phoneNumberType}Delete204TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ContactPhoneNumbers{phoneNumberType}Delete204ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ContactPhoneNumbers{phoneNumberType}Delete204TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ExternalAccountsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ExternalAccountsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ExternalAccountsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ExternalAccounts{externalAccountKey}Delete201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ExternalAccounts{externalAccountKey}Delete201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Organizations2{organizationCode}ExternalAccounts{externalAccountKey}Delete201TextJsonResponse": {
            "type": "object"
        },
        "PersonRecordArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonRecord"
            }
        },
        "ApiNskV1PersonsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1PersonsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1PersonsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1PersonsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1PersonsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1PersonsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountPost400TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountPost400TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollectionPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollectionPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollectionPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollectionPost400TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollectionPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollectionPost400TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsPost400TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsPost400ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountCollection{accountCollectionKey}TransactionsPost400TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountStatusPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountStatusPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountStatusPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountStatusPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountStatusPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountStatusPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountTransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountTransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AccountTransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "PersonAddressArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonAddress"
            }
        },
        "ApiNskV1Persons{personKey}AddressesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AddressesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AddressesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AddressesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AddressesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AddressesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Addresses{personAddressKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PersonAliasArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonAlias"
            }
        },
        "ApiNskV1Persons{personKey}AliasesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AliasesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AliasesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AliasesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AliasesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}AliasesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Aliases{personAliasKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PersonCommentArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonComment"
            }
        },
        "ApiNskV1Persons{personKey}CommentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}CommentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}CommentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}CommentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}CommentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}CommentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Comments{personCommentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PersonEmailArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonEmail"
            }
        },
        "ApiNskV1Persons{personKey}EmailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}EmailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}EmailsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}EmailsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}EmailsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}EmailsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Emails{personEmailAddressKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PersonInformationArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonInformation"
            }
        },
        "ApiNskV1Persons{personKey}InformationGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}InformationGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}InformationGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}InformationPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}InformationPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}InformationPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Information{personInformationKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PersonPhoneNumberArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonPhoneNumber"
            }
        },
        "ApiNskV1Persons{personKey}PhoneNumbersGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbersGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbersGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbersPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbersPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbersPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PhoneNumbers{personPhoneNumberKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PersonPreferenceArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonPreference"
            }
        },
        "ApiNskV1Persons{personKey}PreferencesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PreferencesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PreferencesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PreferencesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PreferencesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}PreferencesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Preferences{personPreferenceKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PersonCustomerProgramArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonCustomerProgram"
            }
        },
        "ApiNskV1Persons{personKey}ProgramsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}ProgramsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}ProgramsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}ProgramsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}ProgramsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}ProgramsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}Programs{personProgramKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PersonStoredPaymentArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonStoredPayment"
            }
        },
        "ApiNskV1Persons{personKey}StoredPaymentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPaymentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPaymentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPaymentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPaymentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPaymentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}StoredPayments{personStoredPaymentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PersonTravelDocumentArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonTravelDocument"
            }
        },
        "ApiNskV1Persons{personKey}TravelDocumentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocumentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocumentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocumentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocumentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocumentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocuments{personTravelDocumentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocuments{personTravelDocumentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocuments{personTravelDocumentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocuments{personTravelDocumentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocuments{personTravelDocumentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Persons{personKey}TravelDocuments{personTravelDocumentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Persons{personKey}TravelDocuments{personTravelDocumentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "PromotionBaseArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PromotionBase"
            }
        },
        "ApiNskV1PromotionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1PromotionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1PromotionsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Promotions{promotionCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Promotions{promotionCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Promotions{promotionCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Promotions{promotionCode}ValidateGet200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Promotions{promotionCode}ValidateGet200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Promotions{promotionCode}ValidateGet200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2QueuesBookingsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2QueuesBookingsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2QueuesBookingsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesBookings{bookingQueueCode}Items{bookingQueueItemKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesBookings{bookingQueueCode}Items{bookingQueueItemKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesBookings{bookingQueueCode}Items{bookingQueueItemKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesBookings{bookingQueueCode}Items{bookingQueueItemKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesBookings{bookingQueueCode}Items{bookingQueueItemKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesBookings{bookingQueueCode}Items{bookingQueueItemKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "BookingQueueItemArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BookingQueueItem"
            }
        },
        "ApiNskV1QueuesBookings{bookingQueueCode}NextGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesBookings{bookingQueueCode}NextGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesBookings{bookingQueueCode}NextGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesTravelPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesTravelPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesTravelPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesTravel{travelQueueCode}NextGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesTravel{travelQueueCode}NextGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1QueuesTravel{travelQueueCode}NextGet404TextJsonResponse": {
            "type": "object"
        },
        "AccountTransactionCodeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/AccountTransactionCode"
            }
        },
        "ApiNskV1ResourcesAccountTransactionCodesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAccountTransactionCodesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAccountTransactionCodesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAccountTransactionCodesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAccountTransactionCodesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAccountTransactionCodesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAccountTransactionCodes{transactionCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAccountTransactionCodes{transactionCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAccountTransactionCodes{transactionCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "CommerceLocationArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/CommerceLocation"
            }
        },
        "DynamicParameterArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/DynamicParameter"
            }
        },
        "ParticipantTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ParticipantType"
            }
        },
        "SourceArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Source"
            }
        },
        "Vendorv2Array": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Vendorv2"
            }
        },
        "AddressTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/AddressType"
            }
        },
        "ApiNskV1ResourcesAddressTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAddressTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAddressTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAddressTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAddressTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAddressTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAddressTypes{addressTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAddressTypes{addressTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAddressTypes{addressTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "AgentSettingTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/AgentSettingType"
            }
        },
        "ApiNskV1ResourcesAgentSettingTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAgentSettingTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAgentSettingTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAgentSettingTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAgentSettingTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAgentSettingTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAgentSettingTypes{agentSettingTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAgentSettingTypes{agentSettingTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAgentSettingTypes{agentSettingTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "AreaArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Area"
            }
        },
        "ApiNskV1ResourcesAreasGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAreasGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAreasGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAreasGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAreasGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAreasGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAreas{areaCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAreas{areaCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesAreas{areaCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "BaggageTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BaggageType"
            }
        },
        "ApiNskV1ResourcesBaggageTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBaggageTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBaggageTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBaggageTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBaggageTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBaggageTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBaggageTypes{baggageTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBaggageTypes{baggageTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBaggageTypes{baggageTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "BundleConfigurationArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BundleConfiguration"
            }
        },
        "ApiNskV1ResourcesBundlesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundles{bundleCode}Get304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundles{bundleCode}Get304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundles{bundleCode}Get304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundles{bundleCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundles{bundleCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundles{bundleCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesApplicationsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesApplicationsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesApplicationsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesApplicationsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesApplicationsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesApplicationsGet404TextJsonResponse": {
            "type": "object"
        },
        "BundleRuleArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BundleRule"
            }
        },
        "ApiNskV1ResourcesBundlesRulesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesRulesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesRulesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesRulesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesRulesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesRulesGet404TextJsonResponse": {
            "type": "object"
        },
        "BundleSetArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BundleSet"
            }
        },
        "ApiNskV1ResourcesBundlesSetsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSetsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSetsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSetsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSetsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSetsGet404TextJsonResponse": {
            "type": "object"
        },
        "BundleSsrConfigurationArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BundleSsrConfiguration"
            }
        },
        "ApiNskV1ResourcesBundlesSsrsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSsrsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSsrsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSsrsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSsrsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesBundlesSsrsGet404TextJsonResponse": {
            "type": "object"
        },
        "CarrierArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Carrier"
            }
        },
        "ApiNskV1ResourcesCarriersGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCarriersGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCarriersGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCarriersGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCarriersGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCarriersGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCarriers{carrierCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCarriers{carrierCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCarriers{carrierCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "CityArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/City"
            }
        },
        "ApiNskV1ResourcesCitiesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCitiesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCitiesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCitiesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCitiesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCitiesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCities{cityCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCities{cityCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCities{cityCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ClassOfServiceArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ClassOfService"
            }
        },
        "ApiNskV1ResourcesClassOfServicesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesClassOfServicesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesClassOfServicesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesClassOfServicesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesClassOfServicesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesClassOfServicesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesClassOfServices{classOfServiceCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesClassOfServices{classOfServiceCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesClassOfServices{classOfServiceCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "CommissionRateArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/CommissionRate"
            }
        },
        "ApiNskV1ResourcesCommissionRatesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCommissionRatesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCommissionRatesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCommissionRatesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCommissionRatesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCommissionRatesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCommissionRates{commissionRateCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCommissionRates{commissionRateCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCommissionRates{commissionRateCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ContactTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ContactType"
            }
        },
        "ApiNskV1ResourcesContactTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContactTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContactTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContactTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContactTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContactTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContactTypes{contactTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContactTypes{contactTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContactTypes{contactTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ResourceContentResultArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ResourceContentResult"
            }
        },
        "ApiNskV1ResourcesContents{contentId}Get304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}Get304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}Get304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}DataGet200TextPlainResponse": {
            "format": "byte",
            "type": "string"
        },
        "ApiNskV1ResourcesContents{contentId}DataGet200ApplicationJsonResponse": {
            "format": "byte",
            "type": "string"
        },
        "ApiNskV1ResourcesContents{contentId}DataGet200TextJsonResponse": {
            "format": "byte",
            "type": "string"
        },
        "ApiNskV1ResourcesContents{contentId}DataGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}DataGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}DataGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}DataGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}DataGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesContents{contentId}DataGet404TextJsonResponse": {
            "type": "object"
        },
        "Countryv2Array": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Countryv2"
            }
        },
        "ApiNskV2ResourcesCountriesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCountriesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCountriesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCountriesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCountriesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCountriesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCountries{countryCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCountries{countryCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCountries{countryCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "CultureArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Culture"
            }
        },
        "ApiNskV1ResourcesCulturesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCulturesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCulturesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCulturesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCulturesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCulturesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCultures{cultureCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCultures{cultureCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCultures{cultureCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCurrenciesControllerv2Get304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCurrenciesControllerv2Get304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCurrenciesControllerv2Get304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCurrenciesControllerv2Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCurrenciesControllerv2Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCurrenciesControllerv2Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCurrenciesControllerv2{currencyCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCurrenciesControllerv2{currencyCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesCurrenciesControllerv2{currencyCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "CustomerProgramArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/CustomerProgram"
            }
        },
        "ApiNskV1ResourcesCustomerProgramsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerProgramsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerProgramsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerProgramsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerProgramsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerProgramsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerPrograms{programCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerPrograms{programCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerPrograms{programCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerPrograms{programCode}Levels{programLevelCode}Get304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerPrograms{programCode}Levels{programLevelCode}Get304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerPrograms{programCode}Levels{programLevelCode}Get304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerPrograms{programCode}Levels{programLevelCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerPrograms{programCode}Levels{programLevelCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesCustomerPrograms{programCode}Levels{programLevelCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "DelayArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Delay"
            }
        },
        "ApiNskV1ResourcesDelaysGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDelaysGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDelaysGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDelaysGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDelaysGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDelaysGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDelays{delayCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDelays{delayCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDelays{delayCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "DepartmentArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Department"
            }
        },
        "ApiNskV1ResourcesDepartmentsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDepartmentsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDepartmentsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDepartmentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDepartmentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDepartmentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDepartments{departmentCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDepartments{departmentCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDepartments{departmentCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "EnumResourceArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/EnumResource"
            }
        },
        "ApiNskV1ResourcesDistributionOptionsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDistributionOptionsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDistributionOptionsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDistributionOptionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDistributionOptionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDistributionOptionsGet404TextJsonResponse": {
            "type": "object"
        },
        "DocumentTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/DocumentType"
            }
        },
        "ApiNskV1ResourcesDocumentTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDocumentTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDocumentTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDocumentTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDocumentTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDocumentTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDocumentTypes{documentTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDocumentTypes{documentTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDocumentTypes{documentTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "DomainArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Domain"
            }
        },
        "ApiNskV1ResourcesDomainsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDomainsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDomainsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDomainsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDomainsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDomainsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDomains{domainCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDomains{domainCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesDomains{domainCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "EmailTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/EmailType"
            }
        },
        "ApiNskV1ResourcesEmailTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesEmailTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesEmailTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesEmailTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesEmailTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesEmailTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesEmailTypes{emailTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesEmailTypes{emailTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesEmailTypes{emailTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ExternalRateArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ExternalRate"
            }
        },
        "ApiNskV1ResourcesExternalRatesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesExternalRatesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesExternalRatesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesExternalRatesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesExternalRatesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesExternalRatesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesExternalRates{rateId}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesExternalRates{rateId}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesExternalRates{rateId}Get404TextJsonResponse": {
            "type": "object"
        },
        "FareTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/FareType"
            }
        },
        "ApiNskV1ResourcesFareTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFareTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFareTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFareTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFareTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFareTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFareTypes{fareTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFareTypes{fareTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFareTypes{fareTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "FeeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Fee"
            }
        },
        "ApiNskV1ResourcesFeesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFeesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFeesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFeesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFeesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFeesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFees{feeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFees{feeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFees{feeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "FeeDetailArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/FeeDetail"
            }
        },
        "ApiNskV1ResourcesFees{feeCode}DetailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFees{feeCode}DetailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesFees{feeCode}DetailsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesGendersGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesGendersGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesGendersGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesGendersGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesGendersGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesGendersGet404TextJsonResponse": {
            "type": "object"
        },
        "HotCardReasonArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/HotCardReason"
            }
        },
        "ApiNskV1ResourcesHotCardReasonsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesHotCardReasonsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesHotCardReasonsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesHotCardReasonsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesHotCardReasonsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesHotCardReasonsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesHotCardReasons{hotCardReasonCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesHotCardReasons{hotCardReasonCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesHotCardReasons{hotCardReasonCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "IssuanceReasonArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/IssuanceReason"
            }
        },
        "ApiNskV1ResourcesIssuanceReasonsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesIssuanceReasonsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesIssuanceReasonsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesIssuanceReasonsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesIssuanceReasonsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesIssuanceReasonsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesIssuanceReasons{issuanceReasonCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesIssuanceReasons{issuanceReasonCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesIssuanceReasons{issuanceReasonCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "LocationArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Location"
            }
        },
        "ApiNskV1ResourcesLocationsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesLocationsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesLocationsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesLocationsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesLocationsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesLocationsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesLocations{locationCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesLocations{locationCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesLocations{locationCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "MacArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Mac"
            }
        },
        "ApiNskV1ResourcesMacsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMacsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMacsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMacsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMacsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMacsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMacs{macCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMacs{macCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMacs{macCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "Marketv2Array": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Marketv2"
            }
        },
        "ApiNskV2ResourcesMarketsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarketsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarketsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarketsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarketsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarketsGet404TextJsonResponse": {
            "type": "object"
        },
        "MarketArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Market"
            }
        },
        "ApiNskV2ResourcesMarkets{locationCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarkets{locationCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarkets{locationCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarkets{locationCode}{travelLocationCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarkets{locationCode}{travelLocationCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2ResourcesMarkets{locationCode}{travelLocationCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "MessageTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/MessageType"
            }
        },
        "ApiNskV1ResourcesMessageTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMessageTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMessageTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMessageTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMessageTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMessageTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMessageTypes{messageTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMessageTypes{messageTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesMessageTypes{messageTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesOrganizationStatusesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesOrganizationStatusesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesOrganizationStatusesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesOrganizationStatusesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesOrganizationStatusesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesOrganizationStatusesGet404TextJsonResponse": {
            "type": "object"
        },
        "PassengerDiscountArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PassengerDiscount"
            }
        },
        "ApiNskV1ResourcesPassengerDiscountsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerDiscountsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerDiscountsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerDiscountsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerDiscountsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerDiscountsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerDiscounts{passengerDiscountCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerDiscounts{passengerDiscountCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerDiscounts{passengerDiscountCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "PassengerTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PassengerType"
            }
        },
        "ApiNskV1ResourcesPassengerTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerTypes{passengerTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerTypes{passengerTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPassengerTypes{passengerTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "PaymentMethodArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PaymentMethod"
            }
        },
        "ApiNskV1ResourcesPaymentMethodsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPaymentMethodsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPaymentMethodsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPaymentMethodsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPaymentMethodsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPaymentMethodsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPaymentMethods{paymentMethodCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPaymentMethods{paymentMethodCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPaymentMethods{paymentMethodCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "PersonAttachmentTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonAttachmentType"
            }
        },
        "ApiNskV1ResourcesPersonAttachmentTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonAttachmentTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonAttachmentTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonAttachmentTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonAttachmentTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonAttachmentTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonAttachmentTypes{personAttachmentTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonAttachmentTypes{personAttachmentTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonAttachmentTypes{personAttachmentTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "PersonInformationTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PersonInformationType"
            }
        },
        "ApiNskV1ResourcesPersonInformationTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonInformationTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonInformationTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonInformationTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonInformationTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonInformationTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonInformationTypes{personInformationTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonInformationTypes{personInformationTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPersonInformationTypes{personInformationTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "PhoneTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PhoneType"
            }
        },
        "ApiNskV1ResourcesPhoneTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPhoneTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPhoneTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPhoneTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPhoneTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPhoneTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPhoneTypes{phoneTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPhoneTypes{phoneTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPhoneTypes{phoneTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ProductClassArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ProductClass"
            }
        },
        "ApiNskV1ResourcesProductClassesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProductClassesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProductClassesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProductClassesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProductClassesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProductClassesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProductClasses{productClassCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProductClasses{productClassCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProductClasses{productClassCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "PromotionSettingTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PromotionSettingType"
            }
        },
        "ApiNskV1ResourcesPromotionSettingTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPromotionSettingTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPromotionSettingTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPromotionSettingTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPromotionSettingTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPromotionSettingTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPromotionSettingTypes{promotionSettingsTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPromotionSettingTypes{promotionSettingsTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesPromotionSettingTypes{promotionSettingsTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ProvinceStateArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ProvinceState"
            }
        },
        "ApiNskV1ResourcesProvinceStatesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProvinceStatesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProvinceStatesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProvinceStatesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProvinceStatesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProvinceStatesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProvinceStates{provinceStateCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProvinceStates{provinceStateCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesProvinceStates{provinceStateCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "QueueCategoryArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/QueueCategory"
            }
        },
        "ApiNskV1ResourcesQueueCategoriesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesQueueCategoriesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesQueueCategoriesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesQueueCategoriesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesQueueCategoriesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesQueueCategoriesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesQueueCategories{queueCategoryCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesQueueCategories{queueCategoryCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesQueueCategories{queueCategoryCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "RoleArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Role"
            }
        },
        "ApiNskV1ResourcesRolesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRolesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRolesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRolesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRolesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRolesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoles{roleCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoles{roleCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoles{roleCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "RoleSettingTypeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/RoleSettingType"
            }
        },
        "ApiNskV1ResourcesRoleSettingTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoleSettingTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoleSettingTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoleSettingTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoleSettingTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoleSettingTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoleSettingTypes{roleSettingTypeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoleSettingTypes{roleSettingTypeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesRoleSettingTypes{roleSettingTypeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSearchTypesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSearchTypesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSearchTypesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSearchTypesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSearchTypesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSearchTypesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsPost304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsPost304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsPost304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsDataPost200TextPlainResponse": {
            "type": "string",
            "example": ""
        },
        "ApiNskV1ResourcesSettingsDataPost200ApplicationJsonResponse": {
            "type": "string",
            "example": ""
        },
        "ApiNskV1ResourcesSettingsDataPost200TextJsonResponse": {
            "type": "string",
            "example": ""
        },
        "ApiNskV1ResourcesSettingsDataPost304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsDataPost304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsDataPost304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsDataPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsDataPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsDataPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsDataPost415TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsDataPost415ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSettingsDataPost415TextJsonResponse": {
            "type": "object"
        },
        "ShoppingAttributeGroupArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ShoppingAttributeGroup"
            }
        },
        "ApiNskV1ResourcesShoppingAttributeGroupsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributeGroupsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributeGroupsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributeGroupsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributeGroupsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributeGroupsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributeGroups{shoppingAttributeGroupCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributeGroups{shoppingAttributeGroupCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributeGroups{shoppingAttributeGroupCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ShoppingAttributeArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ShoppingAttribute"
            }
        },
        "ApiNskV1ResourcesShoppingAttributesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributes{shoppingAttributeCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributes{shoppingAttributeCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesShoppingAttributes{shoppingAttributeCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "SingleSignOnProviderArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/SingleSignOnProvider"
            }
        },
        "ApiNskV1ResourcesSingleSignOnProviderGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProviderGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProviderGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProviderGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProviderGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProviderGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProvider{providerName}Get304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProvider{providerName}Get304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProvider{providerName}Get304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProvider{providerName}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProvider{providerName}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSingleSignOnProvider{providerName}Get404TextJsonResponse": {
            "type": "object"
        },
        "SsrGroupArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/SsrGroup"
            }
        },
        "ApiNskV1ResourcesSsrGroupsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrGroupsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrGroupsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrGroupsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrGroupsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrGroupsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrGroups{ssrGroupCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrGroups{ssrGroupCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrGroups{ssrGroupCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "SsrNestArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/SsrNest"
            }
        },
        "ApiNskV1ResourcesSsrNestsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrNestsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrNestsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrNestsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrNestsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrNestsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrNests{ssrNestCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrNests{ssrNestCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrNests{ssrNestCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "SsrRestrictionResultArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/SsrRestrictionResult"
            }
        },
        "ApiNskV1ResourcesSsrRestrictionResultsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrRestrictionResultsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrRestrictionResultsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrRestrictionResultsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrRestrictionResultsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrRestrictionResultsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrRestrictionResults{ssrRestrictionResultCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrRestrictionResults{ssrRestrictionResultCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrRestrictionResults{ssrRestrictionResultCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "SsrArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Ssr"
            }
        },
        "ApiNskV1ResourcesSsrsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrs{ssrCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrs{ssrCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSsrs{ssrCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "StandByPriorityArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/StandByPriority"
            }
        },
        "ApiNskV1ResourcesStandByPrioritiesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStandByPrioritiesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStandByPrioritiesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStandByPrioritiesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStandByPrioritiesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStandByPrioritiesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStandByPriorities{standByPriorityCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStandByPriorities{standByPriorityCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStandByPriorities{standByPriorityCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "StationCategoryArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/StationCategory"
            }
        },
        "ApiNskV1ResourcesStationCategoriesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationCategoriesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationCategoriesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationCategoriesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationCategoriesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationCategoriesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationCategories{stationCategoryCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationCategories{stationCategoryCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationCategories{stationCategoryCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "StationArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Station"
            }
        },
        "ApiNskV1ResourcesStationsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStations{stationCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStations{stationCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStations{stationCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStations{stationCode}DetailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStations{stationCode}DetailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStations{stationCode}DetailsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsCategory{stationCategoryCode}Get304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsCategory{stationCategoryCode}Get304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsCategory{stationCategoryCode}Get304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsCategory{stationCategoryCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsCategory{stationCategoryCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesStationsCategory{stationCategoryCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "SubZoneArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/SubZone"
            }
        },
        "ApiNskV1ResourcesSubZonesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSubZonesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSubZonesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSubZonesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSubZonesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSubZonesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSubZones{subZoneCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSubZones{subZoneCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSubZones{subZoneCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "SuffixArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Suffix"
            }
        },
        "ApiNskV1ResourcesSuffixesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSuffixesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSuffixesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSuffixesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSuffixesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSuffixesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSuffixes{suffixCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSuffixes{suffixCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesSuffixes{suffixCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "TimeZoneArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/TimeZone"
            }
        },
        "ApiNskV1ResourcesTimeZonesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTimeZonesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTimeZonesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTimeZonesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTimeZonesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTimeZonesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTimeZones{timeZoneCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTimeZones{timeZoneCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTimeZones{timeZoneCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "TitleArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Title"
            }
        },
        "ApiNskV1ResourcesTitlesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTitlesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTitlesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTitlesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTitlesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTitlesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTitles{titleKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTitles{titleKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTitles{titleKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "TravelClassArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/TravelClass"
            }
        },
        "ApiNskV1ResourcesTravelClassesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTravelClassesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTravelClassesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTravelClassesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTravelClassesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTravelClassesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTravelClasses{travelClassCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTravelClasses{travelClassCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesTravelClasses{travelClassCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ZoneArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Zone"
            }
        },
        "ApiNskV1ResourcesZonesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesZonesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesZonesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesZonesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesZonesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesZonesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesZones{zoneCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesZones{zoneCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1ResourcesZones{zoneCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3Seatmaps{journeyKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3Seatmaps{journeyKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3Seatmaps{journeyKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCheckinGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCheckinGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCheckinGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCheckinGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCheckinGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCheckinGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingContactGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingContactGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingContactGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingContactGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingContactGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingContactGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCustomerAccountGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCustomerAccountGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCustomerAccountGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCustomerAccountGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCustomerAccountGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingCustomerAccountGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFeeGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFeeGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFeeGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFeeGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFeeGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFeeGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFlightSearchGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFlightSearchGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFlightSearchGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFlightSearchGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFlightSearchGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingFlightSearchGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingPassengerGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingPassengerGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingPassengerGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingPassengerGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingPassengerGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingPassengerGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2SettingsBookingPaymentGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2SettingsBookingPaymentGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2SettingsBookingPaymentGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2SettingsBookingPaymentGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2SettingsBookingPaymentGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2SettingsBookingPaymentGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingReserveFlightsGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingReserveFlightsGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingReserveFlightsGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingReserveFlightsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingReserveFlightsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsBookingReserveFlightsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralApplicationLogonGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralApplicationLogonGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralApplicationLogonGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralApplicationLogonGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralApplicationLogonGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralApplicationLogonGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralCodesGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralCodesGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralCodesGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralCodesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralCodesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralCodesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralSessionGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralSessionGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralSessionGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralSessionGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralSessionGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsGeneralSessionGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsPaymentGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsPaymentGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsPaymentGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsPaymentGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsPaymentGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsPaymentGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserAgencyCreationGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserAgencyCreationGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserAgencyCreationGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserAgencyCreationGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserAgencyCreationGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserAgencyCreationGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserCustomerCreationGet304TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserCustomerCreationGet304ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserCustomerCreationGet304TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserCustomerCreationGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserCustomerCreationGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1SettingsUserCustomerCreationGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TokenPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenPut201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TokenPut201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenPut201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TokenDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiV1TokenPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiV1TokenPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiV1TokenPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiV1TokenPut201TextPlainResponse": {
            "type": "object"
        },
        "ApiV1TokenPut201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiV1TokenPut201TextJsonResponse": {
            "type": "object"
        },
        "ApiV1TokenDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiV1TokenDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiV1TokenDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenCulturePost200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TokenCulturePost200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenCulturePost200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenSingleSignOnPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TokenSingleSignOnPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenSingleSignOnPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenSingleSignOnPut201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TokenSingleSignOnPut201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TokenSingleSignOnPut201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV4TripPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV4TripPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV4TripPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripDowngradePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripDowngradePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripDowngradePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripFlyAheadAvailabilityPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripFlyAheadAvailabilityPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripFlyAheadAvailabilityPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripFlyAheadAvailability{journeyKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripFlyAheadAvailability{journeyKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripFlyAheadAvailability{journeyKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "TripInformationResponseArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/TripInformationResponse"
            }
        },
        "ApiNskV1TripInfoPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripInfoPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripInfoPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripInfo{legKey}DetailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripInfo{legKey}DetailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripInfo{legKey}DetailsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2TripInfo{legKey}StatusGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2TripInfo{legKey}StatusGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2TripInfo{legKey}StatusGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripInfoSimpleGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripInfoSimpleGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripInfoSimpleGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripMovePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripMovePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripMovePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2TripMoveAvailabilityPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2TripMoveAvailabilityPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2TripMoveAvailabilityPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2TripMoveAvailability{journeyKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2TripMoveAvailability{journeyKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2TripMoveAvailability{journeyKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3TripRebookAvailabilityPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3TripRebookAvailabilityPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3TripRebookAvailabilityPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV3TripRebookAvailabilitySimpleGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV3TripRebookAvailabilitySimpleGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV3TripRebookAvailabilitySimpleGet404TextJsonResponse": {
            "type": "object"
        },
        "ScheduleDetailArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ScheduleDetail"
            }
        },
        "ApiNskV2TripSellPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2TripSellPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2TripSellPost404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV4TripSellPost404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV4TripSellPost404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV4TripSellPost404TextJsonResponse": {
            "type": "object"
        },
        "UpgradeSegmentArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/UpgradeSegment"
            }
        },
        "ApiNskV1TripUpgradeGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripUpgradeGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripUpgradeGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripUpgradePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripUpgradePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripUpgradePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripUpgrade{upgradeKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1TripUpgrade{upgradeKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1TripUpgrade{upgradeKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPatch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPatch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPatch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPatch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPatch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPatch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2UserPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserBookingsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserBookingsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserBookingsGet404TextJsonResponse": {
            "type": "object"
        },
        "BookingTripResultArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/BookingTripResult"
            }
        },
        "ApiNskV1UserImpersonateGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserImpersonateGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserImpersonateGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserImpersonatePost202TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserImpersonatePost202ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserImpersonatePost202TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserImpersonateDelete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserImpersonateDelete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserImpersonateDelete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPasswordChangePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPasswordChangePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPasswordChangePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPatch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPatch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPatch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPatch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPatch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPatch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAccountGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAccountGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAccountGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAccountCollection{accountCollectionKey}TransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAccountCollection{accountCollectionKey}TransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAccountCollection{accountCollectionKey}TransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAccountTransactionsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAccountTransactionsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAccountTransactionsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddressesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddressesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddressesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddressesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddressesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddressesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAddresses{personAddressKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliasesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliasesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliasesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliasesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliasesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliasesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonAliases{personAliasKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonCommentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonCommentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonCommentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonCommentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonCommentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonCommentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonComments{personCommentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmailsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmailsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmailsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmailsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonEmails{personEmailAddressKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformationGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformationGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformationGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformationPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformationPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformationPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonInformation{personInformationKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbersGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbersGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbersGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbersPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbersPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbersPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPhoneNumbers{personPhoneNumberKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferencesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferencesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferencesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferencesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferencesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferencesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPreferences{personPreferenceKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonProgramsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonProgramsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonProgramsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonProgramsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonProgramsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonProgramsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonPrograms{personProgramKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPaymentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPaymentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPaymentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPaymentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPaymentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPaymentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonStoredPayments{personStoredPaymentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocumentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocumentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocumentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocumentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocumentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocumentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocuments{personTravelDocumentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocuments{personTravelDocumentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocuments{personTravelDocumentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocuments{personTravelDocumentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocuments{personTravelDocumentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserPersonTravelDocuments{personTravelDocumentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UserPersonTravelDocuments{personTravelDocumentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "UserRoleArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/UserRole"
            }
        },
        "ApiNskV1UserRolesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserRolesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRolesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRolesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserRolesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRolesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserRoles{userRoleKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "UserSingleSignOnTokenArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/UserSingleSignOnToken"
            }
        },
        "ApiNskV1UserSingleSignOnTokenGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnTokenGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnTokenGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UserSingleSignOnToken{providerKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UsersPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UsersPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UsersPost201TextJsonResponse": {
            "type": "object"
        },
        "UserRecordArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/UserRecord"
            }
        },
        "ApiNskV2UsersGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2UsersGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UsersGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UsersPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2UsersPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2UsersPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Delete204TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Delete204ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Delete204TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}BookingsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}BookingsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}BookingsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PasswordChangePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PasswordChangePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PasswordChangePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PasswordResetPost202TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PasswordResetPost202ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PasswordResetPost202TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPut200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPut200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPut200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPut500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPut500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPut500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPatch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPatch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPatch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPatch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPatch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPatch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddressesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddressesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddressesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddressesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddressesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddressesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAddresses{personAddressKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliasesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliasesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliasesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliasesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliasesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliasesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonAliases{personAliasKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonCommentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonCommentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonCommentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonCommentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonCommentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonCommentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonComments{personCommentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmailsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmailsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmailsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Post201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Post201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Post201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonEmails{personEmailAddressKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformationGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformationGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformationGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformationPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformationPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformationPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonInformation{personInformationKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbersGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbersGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbersGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbersPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbersPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbersPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPhoneNumbers{personPhoneNumberKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferencesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferencesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferencesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferencesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferencesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferencesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPreferences{personPreferenceKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonProgramsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonProgramsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonProgramsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonProgramsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonProgramsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonProgramsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonPrograms{personProgramKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPaymentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPaymentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPaymentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPaymentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPaymentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPaymentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonStoredPayments{personStoredPaymentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocumentsGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocumentsGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocumentsGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocumentsPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocumentsPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocumentsPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV2Users{userKey}PersonTravelDocuments{personTravelDocumentKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}RolesGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}RolesGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}RolesGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}RolesPost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}RolesPost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}RolesPost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Delete200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Delete200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Delete200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Patch200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Patch200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Patch200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Patch500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Patch500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Users{userKey}Roles{userRoleKey}Patch500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UtilitiesStationLocalTime{stationCode}Get200TextPlainResponse": {
            "format": "date-time",
            "type": "string"
        },
        "ApiNskV1UtilitiesStationLocalTime{stationCode}Get200ApplicationJsonResponse": {
            "format": "date-time",
            "type": "string"
        },
        "ApiNskV1UtilitiesStationLocalTime{stationCode}Get200TextJsonResponse": {
            "format": "date-time",
            "type": "string"
        },
        "ApiNskV1UtilitiesStationLocalTime{stationCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1UtilitiesStationLocalTime{stationCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1UtilitiesStationLocalTime{stationCode}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VoucherIssuancePost201TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1VoucherIssuancePost201ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VoucherIssuancePost201TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VoucherIssuance{voucherIssuanceKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1VoucherIssuance{voucherIssuanceKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VoucherIssuance{voucherIssuanceKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "VoucherItemArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/VoucherItem"
            }
        },
        "ApiNskV1VouchersGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Vouchers{voucherKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Vouchers{voucherKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Vouchers{voucherKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Vouchers{voucherKey}Put200TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Vouchers{voucherKey}Put200ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Vouchers{voucherKey}Put200TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Vouchers{voucherKey}Put500TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1Vouchers{voucherKey}Put500ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1Vouchers{voucherKey}Put500TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersByDateGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersByDateGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersByDateGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersByIssuance{voucherIssuanceKey}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersByIssuance{voucherIssuanceKey}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersByIssuance{voucherIssuanceKey}Get404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersByMarketGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersByMarketGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersByMarketGet404TextJsonResponse": {
            "type": "object"
        },
        "VoucherConfigurationArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/VoucherConfiguration"
            }
        },
        "ApiNskV1VouchersConfigurationGet404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersConfigurationGet404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersConfigurationGet404TextJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersConfiguration{configurationCode}Get404TextPlainResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersConfiguration{configurationCode}Get404ApplicationJsonResponse": {
            "type": "object"
        },
        "ApiNskV1VouchersConfiguration{configurationCode}Get404TextJsonResponse": {
            "type": "object"
        }
    },
    "tags": []
}